// Code generated by protoc-gen-go. DO NOT EDIT.
// source: workorder/workorder.proto

package workorder

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	commons "gitlab.kenda.com.tw/kenda/commons/v2/proto/golang/mes/v2/commons"
	recipe "gitlab.kenda.com.tw/kenda/commons/v2/proto/golang/mes/v2/recipe"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_PENDING Status = 0
	Status_ACTIVE  Status = 1
	Status_CLOSING Status = 2
	Status_CLOSED  Status = 3
	Status_SKIPPED Status = 4
)

var Status_name = map[int32]string{
	0: "PENDING",
	1: "ACTIVE",
	2: "CLOSING",
	3: "CLOSED",
	4: "SKIPPED",
}

var Status_value = map[string]int32{
	"PENDING": 0,
	"ACTIVE":  1,
	"CLOSING": 2,
	"CLOSED":  3,
	"SKIPPED": 4,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0afdc737daaceab0, []int{0}
}

type BatchStatus int32

const (
	BatchStatus_BATCH_PREPARING BatchStatus = 0
	BatchStatus_BATCH_STARTED   BatchStatus = 1
	BatchStatus_BATCH_CLOSING   BatchStatus = 2
	BatchStatus_BATCH_CLOSED    BatchStatus = 3
	BatchStatus_BATCH_CANCELLED BatchStatus = 4
)

var BatchStatus_name = map[int32]string{
	0: "BATCH_PREPARING",
	1: "BATCH_STARTED",
	2: "BATCH_CLOSING",
	3: "BATCH_CLOSED",
	4: "BATCH_CANCELLED",
}

var BatchStatus_value = map[string]int32{
	"BATCH_PREPARING": 0,
	"BATCH_STARTED":   1,
	"BATCH_CLOSING":   2,
	"BATCH_CLOSED":    3,
	"BATCH_CANCELLED": 4,
}

func (x BatchStatus) String() string {
	return proto.EnumName(BatchStatus_name, int32(x))
}

func (BatchStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0afdc737daaceab0, []int{1}
}

type Batches struct {
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// Types that are valid to be assigned to Size:
	//	*Batches_UnitQuantity
	//	*Batches_FixedQuantity
	//	*Batches_PerBatchQuantities
	//	*Batches_PlanQuantity_
	Size                 isBatches_Size `protobuf_oneof:"size"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Batches) Reset()         { *m = Batches{} }
func (m *Batches) String() string { return proto.CompactTextString(m) }
func (*Batches) ProtoMessage()    {}
func (*Batches) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afdc737daaceab0, []int{0}
}

func (m *Batches) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Batches.Unmarshal(m, b)
}
func (m *Batches) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Batches.Marshal(b, m, deterministic)
}
func (m *Batches) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batches.Merge(m, src)
}
func (m *Batches) XXX_Size() int {
	return xxx_messageInfo_Batches.Size(m)
}
func (m *Batches) XXX_DiscardUnknown() {
	xxx_messageInfo_Batches.DiscardUnknown(m)
}

var xxx_messageInfo_Batches proto.InternalMessageInfo

func (m *Batches) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type isBatches_Size interface {
	isBatches_Size()
}

type Batches_UnitQuantity struct {
	UnitQuantity bool `protobuf:"varint,2,opt,name=unitQuantity,proto3,oneof"`
}

type Batches_FixedQuantity struct {
	FixedQuantity *commons.Decimal `protobuf:"bytes,3,opt,name=fixedQuantity,proto3,oneof"`
}

type Batches_PerBatchQuantities struct {
	PerBatchQuantities *Batches_PerBatch `protobuf:"bytes,4,opt,name=perBatchQuantities,proto3,oneof"`
}

type Batches_PlanQuantity_ struct {
	PlanQuantity *Batches_PlanQuantity `protobuf:"bytes,5,opt,name=planQuantity,proto3,oneof"`
}

func (*Batches_UnitQuantity) isBatches_Size() {}

func (*Batches_FixedQuantity) isBatches_Size() {}

func (*Batches_PerBatchQuantities) isBatches_Size() {}

func (*Batches_PlanQuantity_) isBatches_Size() {}

func (m *Batches) GetSize() isBatches_Size {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *Batches) GetUnitQuantity() bool {
	if x, ok := m.GetSize().(*Batches_UnitQuantity); ok {
		return x.UnitQuantity
	}
	return false
}

func (m *Batches) GetFixedQuantity() *commons.Decimal {
	if x, ok := m.GetSize().(*Batches_FixedQuantity); ok {
		return x.FixedQuantity
	}
	return nil
}

func (m *Batches) GetPerBatchQuantities() *Batches_PerBatch {
	if x, ok := m.GetSize().(*Batches_PerBatchQuantities); ok {
		return x.PerBatchQuantities
	}
	return nil
}

func (m *Batches) GetPlanQuantity() *Batches_PlanQuantity {
	if x, ok := m.GetSize().(*Batches_PlanQuantity_); ok {
		return x.PlanQuantity
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Batches) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Batches_UnitQuantity)(nil),
		(*Batches_FixedQuantity)(nil),
		(*Batches_PerBatchQuantities)(nil),
		(*Batches_PlanQuantity_)(nil),
	}
}

// Three possible ways to specify batch sizes:
//  1. all single-unit batches : set unitQuantity=true
//  2. all same size batches   : specify the size in fixedQuantity
//  3. different size batches  : specify batch sizes in perBatchQuantities
//  4. plan quantity : specify quantity(plan), batch sizes and batchCount in PlanQuantity
type Batches_PerBatch struct {
	Quantities           []*commons.Decimal `protobuf:"bytes,1,rep,name=quantities,proto3" json:"quantities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Batches_PerBatch) Reset()         { *m = Batches_PerBatch{} }
func (m *Batches_PerBatch) String() string { return proto.CompactTextString(m) }
func (*Batches_PerBatch) ProtoMessage()    {}
func (*Batches_PerBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afdc737daaceab0, []int{0, 0}
}

func (m *Batches_PerBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Batches_PerBatch.Unmarshal(m, b)
}
func (m *Batches_PerBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Batches_PerBatch.Marshal(b, m, deterministic)
}
func (m *Batches_PerBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batches_PerBatch.Merge(m, src)
}
func (m *Batches_PerBatch) XXX_Size() int {
	return xxx_messageInfo_Batches_PerBatch.Size(m)
}
func (m *Batches_PerBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batches_PerBatch.DiscardUnknown(m)
}

var xxx_messageInfo_Batches_PerBatch proto.InternalMessageInfo

func (m *Batches_PerBatch) GetQuantities() []*commons.Decimal {
	if m != nil {
		return m.Quantities
	}
	return nil
}

type Batches_PlanQuantity struct {
	Quantity             *commons.Decimal `protobuf:"bytes,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
	BatchSize            *commons.Decimal `protobuf:"bytes,2,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Batches_PlanQuantity) Reset()         { *m = Batches_PlanQuantity{} }
func (m *Batches_PlanQuantity) String() string { return proto.CompactTextString(m) }
func (*Batches_PlanQuantity) ProtoMessage()    {}
func (*Batches_PlanQuantity) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afdc737daaceab0, []int{0, 1}
}

func (m *Batches_PlanQuantity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Batches_PlanQuantity.Unmarshal(m, b)
}
func (m *Batches_PlanQuantity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Batches_PlanQuantity.Marshal(b, m, deterministic)
}
func (m *Batches_PlanQuantity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batches_PlanQuantity.Merge(m, src)
}
func (m *Batches_PlanQuantity) XXX_Size() int {
	return xxx_messageInfo_Batches_PlanQuantity.Size(m)
}
func (m *Batches_PlanQuantity) XXX_DiscardUnknown() {
	xxx_messageInfo_Batches_PlanQuantity.DiscardUnknown(m)
}

var xxx_messageInfo_Batches_PlanQuantity proto.InternalMessageInfo

func (m *Batches_PlanQuantity) GetQuantity() *commons.Decimal {
	if m != nil {
		return m.Quantity
	}
	return nil
}

func (m *Batches_PlanQuantity) GetBatchSize() *commons.Decimal {
	if m != nil {
		return m.BatchSize
	}
	return nil
}

type Info struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Process              string         `protobuf:"bytes,2,opt,name=process,proto3" json:"process,omitempty"`
	Batches              *Batches       `protobuf:"bytes,3,opt,name=batches,proto3" json:"batches,omitempty"`
	Recipe               *recipe.Recipe `protobuf:"bytes,4,opt,name=recipe,proto3" json:"recipe,omitempty"`
	Status               Status         `protobuf:"varint,5,opt,name=status,proto3,enum=proto.mes.v2.workorder.Status" json:"status,omitempty"`
	FedBatch             int32          `protobuf:"varint,6,opt,name=fedBatch,proto3" json:"fedBatch,omitempty"`
	CollectedBatch       int32          `protobuf:"varint,7,opt,name=collectedBatch,proto3" json:"collectedBatch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afdc737daaceab0, []int{1}
}

func (m *Info) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Info.Unmarshal(m, b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Info.Marshal(b, m, deterministic)
}
func (m *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(m, src)
}
func (m *Info) XXX_Size() int {
	return xxx_messageInfo_Info.Size(m)
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Info) GetProcess() string {
	if m != nil {
		return m.Process
	}
	return ""
}

func (m *Info) GetBatches() *Batches {
	if m != nil {
		return m.Batches
	}
	return nil
}

func (m *Info) GetRecipe() *recipe.Recipe {
	if m != nil {
		return m.Recipe
	}
	return nil
}

func (m *Info) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *Info) GetFedBatch() int32 {
	if m != nil {
		return m.FedBatch
	}
	return 0
}

func (m *Info) GetCollectedBatch() int32 {
	if m != nil {
		return m.CollectedBatch
	}
	return 0
}

func init() {
	proto.RegisterEnum("proto.mes.v2.workorder.Status", Status_name, Status_value)
	proto.RegisterEnum("proto.mes.v2.workorder.BatchStatus", BatchStatus_name, BatchStatus_value)
	proto.RegisterType((*Batches)(nil), "proto.mes.v2.workorder.Batches")
	proto.RegisterType((*Batches_PerBatch)(nil), "proto.mes.v2.workorder.Batches.PerBatch")
	proto.RegisterType((*Batches_PlanQuantity)(nil), "proto.mes.v2.workorder.Batches.PlanQuantity")
	proto.RegisterType((*Info)(nil), "proto.mes.v2.workorder.Info")
}

func init() { proto.RegisterFile("workorder/workorder.proto", fileDescriptor_0afdc737daaceab0) }

var fileDescriptor_0afdc737daaceab0 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x6f, 0x8f, 0xd2, 0x4e,
	0x10, 0xa6, 0xfc, 0x29, 0x30, 0x70, 0xfc, 0xfa, 0x5b, 0x8d, 0x41, 0x8c, 0x4a, 0x88, 0x31, 0xe4,
	0x62, 0xda, 0x84, 0x4b, 0x4c, 0x2e, 0xc6, 0x17, 0x40, 0x9b, 0x83, 0x48, 0xb0, 0x2e, 0xc4, 0x17,
	0xf7, 0xc6, 0x94, 0x76, 0xc1, 0xcd, 0x95, 0x2e, 0xd7, 0x2e, 0x9c, 0xde, 0x07, 0xf0, 0x33, 0xf8,
	0xc2, 0x0f, 0x6b, 0xba, 0xdd, 0x16, 0x30, 0x67, 0xf0, 0xd5, 0x74, 0x66, 0x9e, 0x79, 0xe6, 0xe9,
	0xcc, 0x64, 0xe1, 0xe9, 0x1d, 0x0b, 0x6f, 0x58, 0xe8, 0x91, 0xd0, 0xc8, 0xbe, 0xf4, 0x4d, 0xc8,
	0x38, 0x43, 0x4f, 0x84, 0xd1, 0xd7, 0x24, 0xd2, 0x77, 0x3d, 0x3d, 0xcb, 0xb6, 0x3a, 0x22, 0x6e,
	0xac, 0x49, 0x64, 0xec, 0x7a, 0x86, 0xcb, 0xd6, 0x6b, 0x16, 0x44, 0xa9, 0x4d, 0x6a, 0x5b, 0xed,
	0x23, 0x4c, 0x48, 0x5c, 0xba, 0x21, 0xd2, 0x24, 0x88, 0xce, 0xcf, 0x22, 0x94, 0x07, 0x0e, 0x77,
	0xbf, 0x92, 0x08, 0x3d, 0x86, 0x92, 0xcb, 0xb6, 0x01, 0x6f, 0x2a, 0x6d, 0xa5, 0x5b, 0xc2, 0x89,
	0x83, 0x5e, 0x41, 0x7d, 0x1b, 0x50, 0xfe, 0x69, 0xeb, 0x04, 0x9c, 0xf2, 0xef, 0xcd, 0x7c, 0x5b,
	0xe9, 0x56, 0x46, 0x39, 0x7c, 0x14, 0x45, 0x16, 0x9c, 0x2d, 0xe9, 0x37, 0xe2, 0x65, 0xb0, 0x42,
	0x5b, 0xe9, 0xd6, 0x7a, 0xcf, 0xf5, 0x23, 0xf5, 0xa9, 0x3a, 0x93, 0xb8, 0x74, 0xed, 0xf8, 0xa3,
	0x1c, 0x3e, 0xae, 0x42, 0xd7, 0x80, 0x36, 0x24, 0x14, 0x82, 0x64, 0x8c, 0x92, 0xa8, 0x59, 0x14,
	0x5c, 0x5d, 0xfd, 0xe1, 0x49, 0xe8, 0x52, 0xbf, 0x6e, 0xcb, 0xca, 0x51, 0x0e, 0x3f, 0xc0, 0x82,
	0x30, 0xd4, 0x37, 0xbe, 0x13, 0x64, 0x0a, 0x4b, 0x82, 0xf5, 0xcd, 0x49, 0xd6, 0x83, 0x9a, 0xf8,
	0xb7, 0x0f, 0x39, 0x5a, 0x63, 0xa8, 0xa4, 0x5d, 0xd1, 0x7b, 0x80, 0xdb, 0xbd, 0x66, 0xa5, 0x5d,
	0x38, 0xf9, 0xff, 0xf8, 0xa0, 0xa0, 0xf5, 0x43, 0x81, 0xfa, 0x61, 0x2f, 0x74, 0x09, 0x95, 0xdb,
	0x54, 0xab, 0xf2, 0x0f, 0xd3, 0xc4, 0x19, 0x1c, 0xbd, 0x83, 0xea, 0x22, 0xd6, 0x34, 0xa3, 0xf7,
	0x44, 0x2c, 0xec, 0x64, 0xed, 0x1e, 0x3f, 0x50, 0xa1, 0x18, 0xd1, 0x7b, 0xd2, 0xf9, 0x95, 0x87,
	0xe2, 0x38, 0x58, 0x32, 0xd4, 0x80, 0x3c, 0xf5, 0x84, 0x84, 0x2a, 0xce, 0x53, 0x0f, 0x35, 0xa1,
	0xbc, 0x09, 0x99, 0x4b, 0xa2, 0x48, 0x70, 0x57, 0x71, 0xea, 0xa2, 0x4b, 0x28, 0x2f, 0x92, 0xb1,
	0xc9, 0xfd, 0xbf, 0x3c, 0x31, 0x5d, 0x9c, 0xe2, 0xd1, 0x05, 0xa8, 0xc9, 0x61, 0xca, 0x6d, 0x3f,
	0x3b, 0xae, 0x94, 0x47, 0x8b, 0x85, 0xc1, 0x12, 0x8a, 0xde, 0x82, 0x1a, 0x71, 0x87, 0x6f, 0x23,
	0xb1, 0xcc, 0x46, 0xef, 0xc5, 0xdf, 0xda, 0xcd, 0x04, 0x0a, 0x4b, 0x34, 0x6a, 0x41, 0x65, 0x49,
	0x3c, 0xa1, 0xa1, 0xa9, 0x8a, 0x63, 0xcf, 0x7c, 0xf4, 0x1a, 0x1a, 0x2e, 0xf3, 0x7d, 0xe2, 0xf2,
	0x14, 0x51, 0x16, 0x88, 0x3f, 0xa2, 0xe7, 0x57, 0xa0, 0x26, 0xac, 0xa8, 0x06, 0x65, 0xdb, 0x9a,
	0x9a, 0xe3, 0xe9, 0x95, 0x96, 0x43, 0x00, 0x6a, 0x7f, 0x38, 0x1f, 0x7f, 0xb6, 0x34, 0x25, 0x4e,
	0x0c, 0x27, 0x1f, 0x67, 0x71, 0x22, 0x1f, 0x27, 0x62, 0xc7, 0x32, 0xb5, 0x42, 0x9c, 0x98, 0x7d,
	0x18, 0xdb, 0xb6, 0x65, 0x6a, 0xc5, 0x73, 0x06, 0x35, 0xc1, 0x28, 0xd9, 0x1e, 0xc1, 0x7f, 0x83,
	0xfe, 0x7c, 0x38, 0xfa, 0x62, 0x63, 0xcb, 0xee, 0xe3, 0x84, 0xf5, 0x7f, 0x38, 0x4b, 0x82, 0xb3,
	0x79, 0x1f, 0xcf, 0x2d, 0x53, 0x53, 0xf6, 0xa1, 0x7d, 0x0b, 0x0d, 0xea, 0xfb, 0x90, 0x68, 0x94,
	0x91, 0x0d, 0xfb, 0xd3, 0xa1, 0x35, 0x99, 0xc4, 0x0d, 0x07, 0xe6, 0xf5, 0x60, 0x45, 0xb9, 0xef,
	0x2c, 0xf4, 0x1b, 0x12, 0x78, 0x4e, 0x7c, 0x0b, 0x3a, 0xbf, 0x33, 0x84, 0x93, 0x3d, 0x24, 0xbb,
	0x9e, 0x91, 0x3c, 0x1e, 0x2b, 0xe6, 0x3b, 0xc1, 0x2a, 0x7d, 0x43, 0xb2, 0x91, 0x2e, 0x54, 0x91,
	0xbe, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x59, 0x47, 0x9b, 0x2d, 0xbb, 0x04, 0x00, 0x00,
}
