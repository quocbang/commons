// Code generated by protoc-gen-go. DO NOT EDIT.
// source: code/error/enums.proto

package error

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 登出/登入錯誤代碼
type LoginAndLogout int32

const (
	// 登入成功
	LoginAndLogout_LOGIN_AND_LOGOUT_SUCCESS LoginAndLogout = 0
	// 登入失敗
	LoginAndLogout_LOGIN_AND_LOGOUT_FAIL LoginAndLogout = 1
)

var LoginAndLogout_name = map[int32]string{
	0: "LOGIN_AND_LOGOUT_SUCCESS",
	1: "LOGIN_AND_LOGOUT_FAIL",
}

var LoginAndLogout_value = map[string]int32{
	"LOGIN_AND_LOGOUT_SUCCESS": 0,
	"LOGIN_AND_LOGOUT_FAIL":    1,
}

func (x LoginAndLogout) String() string {
	return proto.EnumName(LoginAndLogout_name, int32(x))
}

func (LoginAndLogout) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{0}
}

// 載入工單錯誤代碼
type LoadRecipe int32

const (
	// 配方載入成功
	LoadRecipe_LOAD_RECIPE_SUCCESS LoadRecipe = 0
	// 配方載入失敗
	LoadRecipe_LOAD_RECIPE_FAILED LoadRecipe = 1
	// 查無此工單
	LoadRecipe_LOAD_RECIPE_NOT_FOUND_LOT_ID LoadRecipe = 2
	// 查無此配方
	LoadRecipe_LOAD_RECIPE_NOT_FOUND_RECIPE_ID LoadRecipe = 4
)

var LoadRecipe_name = map[int32]string{
	0: "LOAD_RECIPE_SUCCESS",
	1: "LOAD_RECIPE_FAILED",
	2: "LOAD_RECIPE_NOT_FOUND_LOT_ID",
	4: "LOAD_RECIPE_NOT_FOUND_RECIPE_ID",
}

var LoadRecipe_value = map[string]int32{
	"LOAD_RECIPE_SUCCESS":             0,
	"LOAD_RECIPE_FAILED":              1,
	"LOAD_RECIPE_NOT_FOUND_LOT_ID":    2,
	"LOAD_RECIPE_NOT_FOUND_RECIPE_ID": 4,
}

func (x LoadRecipe) String() string {
	return proto.EnumName(LoadRecipe_name, int32(x))
}

func (LoadRecipe) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{1}
}

//材料檢核錯誤代碼
type Material int32

const (
	// 材料檢核成功
	Material_CHECK_MATERIAL_SUCCESS Material = 0
	// 檢核材料失敗
	Material_CHECK_MATERIAL_FAILED Material = 1
	// 找不到工單
	Material_CHECK_MATERIAL_NOT_FOUND_LOT_ID Material = 2
	// 投料重複
	Material_BARCODE_DUPLICATE Material = 4
	// 材料不可使用
	Material_MATERIAL_UNAVAILABLE Material = 8
	// 材料過期
	Material_MATERIAL_EXPIRED Material = 16
	// 無此材料條碼
	Material_NOT_FOUND_BARCODE Material = 32
	// 材料不足
	Material_MATERIAL_NOT_ENOUGH Material = 64
	// 材料不符
	Material_MATERIAL_NOT_MATCH Material = 128
	// 中央供應材料不足
	Material_CENTRAL_SUPPLY_MATERIAL_NOT_ENOUGH Material = 256
	// 查無產品類別代號 (X)
	Material_NOT_FOUND_PRODUCT_TYPE Material = 512
	// 材料重量小於最小單位使用量
	Material_INVENTORY_IS_LESS_THAN_MIN_DOSAGE Material = 1024
	// 材料需要切膠
	Material_THIS_MATERIAL_NEED_TO_CUT Material = 2048
	// 中央供應不須掃描
	Material_CENTRAL_SUPPLY_MATERIAL_DOES_NOT_NEED_TO_SCANNED Material = 4096
)

var Material_name = map[int32]string{
	0:    "CHECK_MATERIAL_SUCCESS",
	1:    "CHECK_MATERIAL_FAILED",
	2:    "CHECK_MATERIAL_NOT_FOUND_LOT_ID",
	4:    "BARCODE_DUPLICATE",
	8:    "MATERIAL_UNAVAILABLE",
	16:   "MATERIAL_EXPIRED",
	32:   "NOT_FOUND_BARCODE",
	64:   "MATERIAL_NOT_ENOUGH",
	128:  "MATERIAL_NOT_MATCH",
	256:  "CENTRAL_SUPPLY_MATERIAL_NOT_ENOUGH",
	512:  "NOT_FOUND_PRODUCT_TYPE",
	1024: "INVENTORY_IS_LESS_THAN_MIN_DOSAGE",
	2048: "THIS_MATERIAL_NEED_TO_CUT",
	4096: "CENTRAL_SUPPLY_MATERIAL_DOES_NOT_NEED_TO_SCANNED",
}

var Material_value = map[string]int32{
	"CHECK_MATERIAL_SUCCESS":                           0,
	"CHECK_MATERIAL_FAILED":                            1,
	"CHECK_MATERIAL_NOT_FOUND_LOT_ID":                  2,
	"BARCODE_DUPLICATE":                                4,
	"MATERIAL_UNAVAILABLE":                             8,
	"MATERIAL_EXPIRED":                                 16,
	"NOT_FOUND_BARCODE":                                32,
	"MATERIAL_NOT_ENOUGH":                              64,
	"MATERIAL_NOT_MATCH":                               128,
	"CENTRAL_SUPPLY_MATERIAL_NOT_ENOUGH":               256,
	"NOT_FOUND_PRODUCT_TYPE":                           512,
	"INVENTORY_IS_LESS_THAN_MIN_DOSAGE":                1024,
	"THIS_MATERIAL_NEED_TO_CUT":                        2048,
	"CENTRAL_SUPPLY_MATERIAL_DOES_NOT_NEED_TO_SCANNED": 4096,
}

func (x Material) String() string {
	return proto.EnumName(Material_name, int32(x))
}

func (Material) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{2}
}

//投料錯誤代碼
type MoveIn int32

const (
	// 投料成功
	MoveIn_MOVE_IN_SUCCESS MoveIn = 0
	// 投料失敗
	MoveIn_MOVE_IN_FAILED MoveIn = 1
	// 查無此工單
	MoveIn_MOVE_IN_NOT_FOUND_LOT_ID MoveIn = 2
	// 查無首數
	MoveIn_MOVE_IN_NOT_FOUND_SHEET_ID MoveIn = 4
	// 該首數狀態不可投料
	MoveIn_MOVE_IN_WRONG_SHEET_STATUS MoveIn = 8
)

var MoveIn_name = map[int32]string{
	0: "MOVE_IN_SUCCESS",
	1: "MOVE_IN_FAILED",
	2: "MOVE_IN_NOT_FOUND_LOT_ID",
	4: "MOVE_IN_NOT_FOUND_SHEET_ID",
	8: "MOVE_IN_WRONG_SHEET_STATUS",
}

var MoveIn_value = map[string]int32{
	"MOVE_IN_SUCCESS":            0,
	"MOVE_IN_FAILED":             1,
	"MOVE_IN_NOT_FOUND_LOT_ID":   2,
	"MOVE_IN_NOT_FOUND_SHEET_ID": 4,
	"MOVE_IN_WRONG_SHEET_STATUS": 8,
}

func (x MoveIn) String() string {
	return proto.EnumName(MoveIn_name, int32(x))
}

func (MoveIn) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{3}
}

//收料錯誤代碼
type MoveOut int32

const (
	// 收料成功
	MoveOut_MOVE_OUT_SUCCESS MoveOut = 0
	// 收料失敗
	MoveOut_MOVE_OUT_FAILED MoveOut = 1
	// 查無此工單
	MoveOut_MOVE_OUT_NOT_FOUND_LOT_ID MoveOut = 2
	// 查無首數
	MoveOut_MOVE_OUT_NOT_FOUND_SHEET_ID MoveOut = 4
	// 查無階段
	MoveOut_MOVE_OUT_NOT_FOUND_NEXT_PROCESS_NAME MoveOut = 8
	// 該條碼不可使用
	MoveOut_THIS_MATERIAL_LOT_ID_HAS_BEEN_USED MoveOut = 16
	// 該首數狀態不可投料
	MoveOut_MOVE_OUT_WRONG_SHEET_STATUS MoveOut = 32
	// 無效標示卡條碼
	MoveOut_MOVE_OUT_INVALID_MATERIAL_LOT_ID MoveOut = 64
	// 查無鐵架(載具)ID
	MoveOut_MOVE_OUT_NOT_FOUND_CARRIER_ID MoveOut = 128
)

var MoveOut_name = map[int32]string{
	0:   "MOVE_OUT_SUCCESS",
	1:   "MOVE_OUT_FAILED",
	2:   "MOVE_OUT_NOT_FOUND_LOT_ID",
	4:   "MOVE_OUT_NOT_FOUND_SHEET_ID",
	8:   "MOVE_OUT_NOT_FOUND_NEXT_PROCESS_NAME",
	16:  "THIS_MATERIAL_LOT_ID_HAS_BEEN_USED",
	32:  "MOVE_OUT_WRONG_SHEET_STATUS",
	64:  "MOVE_OUT_INVALID_MATERIAL_LOT_ID",
	128: "MOVE_OUT_NOT_FOUND_CARRIER_ID",
}

var MoveOut_value = map[string]int32{
	"MOVE_OUT_SUCCESS":                     0,
	"MOVE_OUT_FAILED":                      1,
	"MOVE_OUT_NOT_FOUND_LOT_ID":            2,
	"MOVE_OUT_NOT_FOUND_SHEET_ID":          4,
	"MOVE_OUT_NOT_FOUND_NEXT_PROCESS_NAME": 8,
	"THIS_MATERIAL_LOT_ID_HAS_BEEN_USED":   16,
	"MOVE_OUT_WRONG_SHEET_STATUS":          32,
	"MOVE_OUT_INVALID_MATERIAL_LOT_ID":     64,
	"MOVE_OUT_NOT_FOUND_CARRIER_ID":        128,
}

func (x MoveOut) String() string {
	return proto.EnumName(MoveOut_name, int32(x))
}

func (MoveOut) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{4}
}

// 投料/收膠結束錯誤代碼
type MoveEnd int32

const (
	//投料或收料成功
	MoveEnd_MOVE_END_SUCCESS MoveEnd = 0
	//投料或收料失敗
	MoveEnd_MOVE_END_FAILED MoveEnd = 1
	//查無此工單
	MoveEnd_MOVE_END_NOT_FOUND_LOT_ID MoveEnd = 2
	//尚未投料不可結束投料
	MoveEnd_NO_SHEET_MOVE_IN_CAN_NOT_END MoveEnd = 4
	//投料尚未完成，不可結束收料
	MoveEnd_CANT_MOVE_OUT_END_BEFORE_MOVE_IN_FINISH MoveEnd = 8
	//收料未完成,不可結束收料
	MoveEnd_HAVE_SHEET_MOVE_OUT_NOT_YET_CAN_NOT_END MoveEnd = 16
)

var MoveEnd_name = map[int32]string{
	0:  "MOVE_END_SUCCESS",
	1:  "MOVE_END_FAILED",
	2:  "MOVE_END_NOT_FOUND_LOT_ID",
	4:  "NO_SHEET_MOVE_IN_CAN_NOT_END",
	8:  "CANT_MOVE_OUT_END_BEFORE_MOVE_IN_FINISH",
	16: "HAVE_SHEET_MOVE_OUT_NOT_YET_CAN_NOT_END",
}

var MoveEnd_value = map[string]int32{
	"MOVE_END_SUCCESS":                        0,
	"MOVE_END_FAILED":                         1,
	"MOVE_END_NOT_FOUND_LOT_ID":               2,
	"NO_SHEET_MOVE_IN_CAN_NOT_END":            4,
	"CANT_MOVE_OUT_END_BEFORE_MOVE_IN_FINISH": 8,
	"HAVE_SHEET_MOVE_OUT_NOT_YET_CAN_NOT_END": 16,
}

func (x MoveEnd) String() string {
	return proto.EnumName(MoveEnd_name, int32(x))
}

func (MoveEnd) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{5}
}

//工單操作錯誤代碼
type WorkOrderOperating int32

const (
	// 工單操作成功
	WorkOrderOperating_WORK_ORDER_OPERATING_SUCCESS WorkOrderOperating = 0
	// 工單操作條件失敗
	WorkOrderOperating_WORK_ORDER_OPERATING_FAILED WorkOrderOperating = 1
	// 查無工單
	WorkOrderOperating_NOT_FOUND_LOT_ID WorkOrderOperating = 2
)

var WorkOrderOperating_name = map[int32]string{
	0: "WORK_ORDER_OPERATING_SUCCESS",
	1: "WORK_ORDER_OPERATING_FAILED",
	2: "NOT_FOUND_LOT_ID",
}

var WorkOrderOperating_value = map[string]int32{
	"WORK_ORDER_OPERATING_SUCCESS": 0,
	"WORK_ORDER_OPERATING_FAILED":  1,
	"NOT_FOUND_LOT_ID":             2,
}

func (x WorkOrderOperating) String() string {
	return proto.EnumName(WorkOrderOperating_name, int32(x))
}

func (WorkOrderOperating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{6}
}

//初始作業階段錯誤代碼
type SetInitialProcess int32

const (
	// 初始作業階段成功
	SetInitialProcess_SET_INITIAL_PROCESS_SUCCESS SetInitialProcess = 0
	// 缺少初始作業階段request
	SetInitialProcess_SET_INITIAL_PROCESS_MISSING_REQUEST SetInitialProcess = 1
)

var SetInitialProcess_name = map[int32]string{
	0: "SET_INITIAL_PROCESS_SUCCESS",
	1: "SET_INITIAL_PROCESS_MISSING_REQUEST",
}

var SetInitialProcess_value = map[string]int32{
	"SET_INITIAL_PROCESS_SUCCESS":         0,
	"SET_INITIAL_PROCESS_MISSING_REQUEST": 1,
}

func (x SetInitialProcess) String() string {
	return proto.EnumName(SetInitialProcess_name, int32(x))
}

func (SetInitialProcess) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{7}
}

type MaterialOperating int32

const (
	// 材料操作成功
	MaterialOperating_MATERIAL_OPERATING_SUCCESS MaterialOperating = 0
	// 標示卡重複
	MaterialOperating_MATERIAL_LOT_ID_REPEAT MaterialOperating = 1
	// 無此條碼
	MaterialOperating_NOT_FOUND_MATERIAL_LOT_ID MaterialOperating = 2
	// 資訊不足錯誤
	MaterialOperating_MATERIAL_OPERATING_INSUFFICIENT_INFO MaterialOperating = 3
	// 產品類別未定義
	MaterialOperating_MATERIAL_OPERATING_PRODUCT_TYPE_IS_NOT_DEFINED MaterialOperating = 4
	// 材料單位未定義
	MaterialOperating_MATERIAL_OPERATING_MATERIAL_UNIT_IS_NOT_DEFINED MaterialOperating = 5
	// 材料不得重複展延
	MaterialOperating_THIS_MATERIAL_CAN_NOT_POSTPONE_AGAIN MaterialOperating = 6
)

var MaterialOperating_name = map[int32]string{
	0: "MATERIAL_OPERATING_SUCCESS",
	1: "MATERIAL_LOT_ID_REPEAT",
	2: "NOT_FOUND_MATERIAL_LOT_ID",
	3: "MATERIAL_OPERATING_INSUFFICIENT_INFO",
	4: "MATERIAL_OPERATING_PRODUCT_TYPE_IS_NOT_DEFINED",
	5: "MATERIAL_OPERATING_MATERIAL_UNIT_IS_NOT_DEFINED",
	6: "THIS_MATERIAL_CAN_NOT_POSTPONE_AGAIN",
}

var MaterialOperating_value = map[string]int32{
	"MATERIAL_OPERATING_SUCCESS":                      0,
	"MATERIAL_LOT_ID_REPEAT":                          1,
	"NOT_FOUND_MATERIAL_LOT_ID":                       2,
	"MATERIAL_OPERATING_INSUFFICIENT_INFO":            3,
	"MATERIAL_OPERATING_PRODUCT_TYPE_IS_NOT_DEFINED":  4,
	"MATERIAL_OPERATING_MATERIAL_UNIT_IS_NOT_DEFINED": 5,
	"THIS_MATERIAL_CAN_NOT_POSTPONE_AGAIN":            6,
}

func (x MaterialOperating) String() string {
	return proto.EnumName(MaterialOperating_name, int32(x))
}

func (MaterialOperating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{8}
}

type RapidCheckOperating int32

const (
	// 快檢操作成功
	RapidCheckOperating_RAPID_CHECK_OPERATING_SUCCESS                     RapidCheckOperating = 0
	RapidCheckOperating_RAPID_CHECK_OPERATING_NOT_FOUND_SHEET_ID          RapidCheckOperating = 1
	RapidCheckOperating_RAPID_CHECK_OPERATING_WRONG_STATUS                RapidCheckOperating = 2
	RapidCheckOperating_RAPID_CHECK_OPERATING_NOT_FOUND_MATERIAL_BY_SHEET RapidCheckOperating = 3
	RapidCheckOperating_RAPID_CHECK_OPERATING_NOT_FOUND_LOT_ID            RapidCheckOperating = 4
)

var RapidCheckOperating_name = map[int32]string{
	0: "RAPID_CHECK_OPERATING_SUCCESS",
	1: "RAPID_CHECK_OPERATING_NOT_FOUND_SHEET_ID",
	2: "RAPID_CHECK_OPERATING_WRONG_STATUS",
	3: "RAPID_CHECK_OPERATING_NOT_FOUND_MATERIAL_BY_SHEET",
	4: "RAPID_CHECK_OPERATING_NOT_FOUND_LOT_ID",
}

var RapidCheckOperating_value = map[string]int32{
	"RAPID_CHECK_OPERATING_SUCCESS":                     0,
	"RAPID_CHECK_OPERATING_NOT_FOUND_SHEET_ID":          1,
	"RAPID_CHECK_OPERATING_WRONG_STATUS":                2,
	"RAPID_CHECK_OPERATING_NOT_FOUND_MATERIAL_BY_SHEET": 3,
	"RAPID_CHECK_OPERATING_NOT_FOUND_LOT_ID":            4,
}

func (x RapidCheckOperating) String() string {
	return proto.EnumName(RapidCheckOperating_name, int32(x))
}

func (RapidCheckOperating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{9}
}

type ContainerIdOperating int32

const (
	ContainerIdOperating_CONTAINER_OPERATING_SUCCESS ContainerIdOperating = 0
	ContainerIdOperating_CONTAINER_OPERATING_FAILED  ContainerIdOperating = 1
)

var ContainerIdOperating_name = map[int32]string{
	0: "CONTAINER_OPERATING_SUCCESS",
	1: "CONTAINER_OPERATING_FAILED",
}

var ContainerIdOperating_value = map[string]int32{
	"CONTAINER_OPERATING_SUCCESS": 0,
	"CONTAINER_OPERATING_FAILED":  1,
}

func (x ContainerIdOperating) String() string {
	return proto.EnumName(ContainerIdOperating_name, int32(x))
}

func (ContainerIdOperating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{10}
}

type EquipmentOperating int32

const (
	EquipmentOperating_EQUIPMENT_OPERATING_SUCCESS EquipmentOperating = 0
	EquipmentOperating_EQUIPMENT_OPERATING_FAILED  EquipmentOperating = 1
)

var EquipmentOperating_name = map[int32]string{
	0: "EQUIPMENT_OPERATING_SUCCESS",
	1: "EQUIPMENT_OPERATING_FAILED",
}

var EquipmentOperating_value = map[string]int32{
	"EQUIPMENT_OPERATING_SUCCESS": 0,
	"EQUIPMENT_OPERATING_FAILED":  1,
}

func (x EquipmentOperating) String() string {
	return proto.EnumName(EquipmentOperating_name, int32(x))
}

func (EquipmentOperating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{11}
}

type EquipmentContainerOperating int32

const (
	EquipmentContainerOperating_EQUIPMENT_CONTAINER_OPERATING_SUCCESS EquipmentContainerOperating = 0
	EquipmentContainerOperating_EQUIPMENT_CONTAINER_OPERATING_FAILED  EquipmentContainerOperating = 1
)

var EquipmentContainerOperating_name = map[int32]string{
	0: "EQUIPMENT_CONTAINER_OPERATING_SUCCESS",
	1: "EQUIPMENT_CONTAINER_OPERATING_FAILED",
}

var EquipmentContainerOperating_value = map[string]int32{
	"EQUIPMENT_CONTAINER_OPERATING_SUCCESS": 0,
	"EQUIPMENT_CONTAINER_OPERATING_FAILED":  1,
}

func (x EquipmentContainerOperating) String() string {
	return proto.EnumName(EquipmentContainerOperating_name, int32(x))
}

func (EquipmentContainerOperating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{12}
}

type ContainerMaterialOperating int32

const (
	ContainerMaterialOperating_CONTAINER_MATERIAL_OPERATING_SUCCESS ContainerMaterialOperating = 0
	ContainerMaterialOperating_CONTAINER_MATERIAL_OPERATING_FAILED  ContainerMaterialOperating = 1
)

var ContainerMaterialOperating_name = map[int32]string{
	0: "CONTAINER_MATERIAL_OPERATING_SUCCESS",
	1: "CONTAINER_MATERIAL_OPERATING_FAILED",
}

var ContainerMaterialOperating_value = map[string]int32{
	"CONTAINER_MATERIAL_OPERATING_SUCCESS": 0,
	"CONTAINER_MATERIAL_OPERATING_FAILED":  1,
}

func (x ContainerMaterialOperating) String() string {
	return proto.EnumName(ContainerMaterialOperating_name, int32(x))
}

func (ContainerMaterialOperating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{13}
}

type CarrierOperating int32

const (
	CarrierOperating_CARRIER_OPERATING_SUCCESS               CarrierOperating = 0
	CarrierOperating_CARRIER_OPERATING_UNDEFINED_ACTION_TYPE CarrierOperating = 1
	CarrierOperating_CARRIER_OPERATING_CARRIER_ID_REPEAT     CarrierOperating = 2
	CarrierOperating_CARRIER_OPERATING_NOT_FOUND_CARRIER_ID  CarrierOperating = 3
)

var CarrierOperating_name = map[int32]string{
	0: "CARRIER_OPERATING_SUCCESS",
	1: "CARRIER_OPERATING_UNDEFINED_ACTION_TYPE",
	2: "CARRIER_OPERATING_CARRIER_ID_REPEAT",
	3: "CARRIER_OPERATING_NOT_FOUND_CARRIER_ID",
}

var CarrierOperating_value = map[string]int32{
	"CARRIER_OPERATING_SUCCESS":               0,
	"CARRIER_OPERATING_UNDEFINED_ACTION_TYPE": 1,
	"CARRIER_OPERATING_CARRIER_ID_REPEAT":     2,
	"CARRIER_OPERATING_NOT_FOUND_CARRIER_ID":  3,
}

func (x CarrierOperating) String() string {
	return proto.EnumName(CarrierOperating_name, int32(x))
}

func (CarrierOperating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{14}
}

type MaterialTransactionOperating int32

const (
	MaterialTransactionOperating_MATERIAL_TRANSACTION_OPERATING_SUCCESS      MaterialTransactionOperating = 0
	MaterialTransactionOperating_MATERIAL_TRANSACTION_OPERATING_TX_NOT_FOUND MaterialTransactionOperating = 1
)

var MaterialTransactionOperating_name = map[int32]string{
	0: "MATERIAL_TRANSACTION_OPERATING_SUCCESS",
	1: "MATERIAL_TRANSACTION_OPERATING_TX_NOT_FOUND",
}

var MaterialTransactionOperating_value = map[string]int32{
	"MATERIAL_TRANSACTION_OPERATING_SUCCESS":      0,
	"MATERIAL_TRANSACTION_OPERATING_TX_NOT_FOUND": 1,
}

func (x MaterialTransactionOperating) String() string {
	return proto.EnumName(MaterialTransactionOperating_name, int32(x))
}

func (MaterialTransactionOperating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{15}
}

type TransactionOperating int32

const (
	TransactionOperating_TRANSACTION_OPERATING_SUCCESS              TransactionOperating = 0
	TransactionOperating_TRANSACTION_OPERATING_TX_NOT_FOUND         TransactionOperating = 1
	TransactionOperating_TRANSACTION_OPERATING_TX_CANNOT_DELETE     TransactionOperating = 2
	TransactionOperating_TRANSACTION_OPERATING_INSUFFICIENT_REQUEST TransactionOperating = 3
)

var TransactionOperating_name = map[int32]string{
	0: "TRANSACTION_OPERATING_SUCCESS",
	1: "TRANSACTION_OPERATING_TX_NOT_FOUND",
	2: "TRANSACTION_OPERATING_TX_CANNOT_DELETE",
	3: "TRANSACTION_OPERATING_INSUFFICIENT_REQUEST",
}

var TransactionOperating_value = map[string]int32{
	"TRANSACTION_OPERATING_SUCCESS":              0,
	"TRANSACTION_OPERATING_TX_NOT_FOUND":         1,
	"TRANSACTION_OPERATING_TX_CANNOT_DELETE":     2,
	"TRANSACTION_OPERATING_INSUFFICIENT_REQUEST": 3,
}

func (x TransactionOperating) String() string {
	return proto.EnumName(TransactionOperating_name, int32(x))
}

func (TransactionOperating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{16}
}

type MtxShipListOperating int32

const (
	MtxShipListOperating_MTXSHIPLIST_OPERATING_SUCCESS                   MtxShipListOperating = 0
	MtxShipListOperating_MTXSHIPLIST_OPERATING_TX_NOT_FOUND              MtxShipListOperating = 1
	MtxShipListOperating_MTXSHIPLIST_OPERATING_MATERIAL_LOT_ID_NOT_FOUND MtxShipListOperating = 2
	MtxShipListOperating_MTXSHIPLIST_OPERATING_MATERIAL_EXCEEDED         MtxShipListOperating = 3
	MtxShipListOperating_MTXSHIPLIST_OPERATING_MATERIAL_LOT_ID_NOT_IN_TX MtxShipListOperating = 4
	MtxShipListOperating_MTXSHIPLIST_OPERATING_ALREADY_BEEN_RECEIVED     MtxShipListOperating = 5
	MtxShipListOperating_MTXSHIPLIST_OPERATING_INSUFFICIENT_INFO         MtxShipListOperating = 6
	MtxShipListOperating_MTXSHIPLIST_OPERATING_MATERIAL_NOT_MATCH        MtxShipListOperating = 7
	MtxShipListOperating_MTXSHIPLIST_OPERATING_SCAN_MULTIPLE_TIMES       MtxShipListOperating = 8
)

var MtxShipListOperating_name = map[int32]string{
	0: "MTXSHIPLIST_OPERATING_SUCCESS",
	1: "MTXSHIPLIST_OPERATING_TX_NOT_FOUND",
	2: "MTXSHIPLIST_OPERATING_MATERIAL_LOT_ID_NOT_FOUND",
	3: "MTXSHIPLIST_OPERATING_MATERIAL_EXCEEDED",
	4: "MTXSHIPLIST_OPERATING_MATERIAL_LOT_ID_NOT_IN_TX",
	5: "MTXSHIPLIST_OPERATING_ALREADY_BEEN_RECEIVED",
	6: "MTXSHIPLIST_OPERATING_INSUFFICIENT_INFO",
	7: "MTXSHIPLIST_OPERATING_MATERIAL_NOT_MATCH",
	8: "MTXSHIPLIST_OPERATING_SCAN_MULTIPLE_TIMES",
}

var MtxShipListOperating_value = map[string]int32{
	"MTXSHIPLIST_OPERATING_SUCCESS":                   0,
	"MTXSHIPLIST_OPERATING_TX_NOT_FOUND":              1,
	"MTXSHIPLIST_OPERATING_MATERIAL_LOT_ID_NOT_FOUND": 2,
	"MTXSHIPLIST_OPERATING_MATERIAL_EXCEEDED":         3,
	"MTXSHIPLIST_OPERATING_MATERIAL_LOT_ID_NOT_IN_TX": 4,
	"MTXSHIPLIST_OPERATING_ALREADY_BEEN_RECEIVED":     5,
	"MTXSHIPLIST_OPERATING_INSUFFICIENT_INFO":         6,
	"MTXSHIPLIST_OPERATING_MATERIAL_NOT_MATCH":        7,
	"MTXSHIPLIST_OPERATING_SCAN_MULTIPLE_TIMES":       8,
}

func (x MtxShipListOperating) String() string {
	return proto.EnumName(MtxShipListOperating_name, int32(x))
}

func (MtxShipListOperating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{17}
}

type MtxPda int32

const (
	MtxPda_MTXPDA_OPERATING_SUCCESS                          MtxPda = 0
	MtxPda_MTXPDA_OPERATING_MATERIAL_LOT_ID_NOT_IN_ANY_TX    MtxPda = 1
	MtxPda_MTXPDA_OPERATING_MATERIAL_LOT_ID_NOT_FOUND        MtxPda = 2
	MtxPda_MTXPDA_OPERATING_ALREADY_BEEN_RECEIVED            MtxPda = 3
	MtxPda_MTXPDA_OPERATING_MATERIAL_EXCEED_REQUIREMENT      MtxPda = 4
	MtxPda_MTXPDA_OPERATING_MATERIAL_NOT_MATCH               MtxPda = 5
	MtxPda_MTXPDA_OPERATING_SCAN_MULTIPLE_TIMES              MtxPda = 6
	MtxPda_MTXPDA_OPERATING_ACTION_TYPE                      MtxPda = 7
	MtxPda_MTXPDA_OPERATING_MATERIAL_LOT_ID_NOT_MATCH_ANY_TX MtxPda = 8
	MtxPda_MTXPDA_OPERATING_MATERIAL_LOT_ID_NOT_BEEN_USED    MtxPda = 9
	MtxPda_MTXPDA_OPERATING_INSUFFICIENT_REQUEST             MtxPda = 10
)

var MtxPda_name = map[int32]string{
	0:  "MTXPDA_OPERATING_SUCCESS",
	1:  "MTXPDA_OPERATING_MATERIAL_LOT_ID_NOT_IN_ANY_TX",
	2:  "MTXPDA_OPERATING_MATERIAL_LOT_ID_NOT_FOUND",
	3:  "MTXPDA_OPERATING_ALREADY_BEEN_RECEIVED",
	4:  "MTXPDA_OPERATING_MATERIAL_EXCEED_REQUIREMENT",
	5:  "MTXPDA_OPERATING_MATERIAL_NOT_MATCH",
	6:  "MTXPDA_OPERATING_SCAN_MULTIPLE_TIMES",
	7:  "MTXPDA_OPERATING_ACTION_TYPE",
	8:  "MTXPDA_OPERATING_MATERIAL_LOT_ID_NOT_MATCH_ANY_TX",
	9:  "MTXPDA_OPERATING_MATERIAL_LOT_ID_NOT_BEEN_USED",
	10: "MTXPDA_OPERATING_INSUFFICIENT_REQUEST",
}

var MtxPda_value = map[string]int32{
	"MTXPDA_OPERATING_SUCCESS":                          0,
	"MTXPDA_OPERATING_MATERIAL_LOT_ID_NOT_IN_ANY_TX":    1,
	"MTXPDA_OPERATING_MATERIAL_LOT_ID_NOT_FOUND":        2,
	"MTXPDA_OPERATING_ALREADY_BEEN_RECEIVED":            3,
	"MTXPDA_OPERATING_MATERIAL_EXCEED_REQUIREMENT":      4,
	"MTXPDA_OPERATING_MATERIAL_NOT_MATCH":               5,
	"MTXPDA_OPERATING_SCAN_MULTIPLE_TIMES":              6,
	"MTXPDA_OPERATING_ACTION_TYPE":                      7,
	"MTXPDA_OPERATING_MATERIAL_LOT_ID_NOT_MATCH_ANY_TX": 8,
	"MTXPDA_OPERATING_MATERIAL_LOT_ID_NOT_BEEN_USED":    9,
	"MTXPDA_OPERATING_INSUFFICIENT_REQUEST":             10,
}

func (x MtxPda) String() string {
	return proto.EnumName(MtxPda_name, int32(x))
}

func (MtxPda) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{18}
}

type CheckMaterialLotID int32

const (
	CheckMaterialLotID_CHECK_MATERIAL_LOT_ID_SUCCESS                         CheckMaterialLotID = 0
	CheckMaterialLotID_CHECK_MATERIAL_LOT_ID_MATERIAL_LOT_ID_DOES_NOT_EXIST  CheckMaterialLotID = 1
	CheckMaterialLotID_CHECK_MATERIAL_LOT_ID_INSUFFICIENT_INFO               CheckMaterialLotID = 2
	CheckMaterialLotID_CHECK_MATERIAL_LOT_ID_MATERIAL_LOT_IO_ALREADY_EXISTED CheckMaterialLotID = 3
	CheckMaterialLotID_CHECK_MATERIAL_LOT_ID_EXPIRED                         CheckMaterialLotID = 4
)

var CheckMaterialLotID_name = map[int32]string{
	0: "CHECK_MATERIAL_LOT_ID_SUCCESS",
	1: "CHECK_MATERIAL_LOT_ID_MATERIAL_LOT_ID_DOES_NOT_EXIST",
	2: "CHECK_MATERIAL_LOT_ID_INSUFFICIENT_INFO",
	3: "CHECK_MATERIAL_LOT_ID_MATERIAL_LOT_IO_ALREADY_EXISTED",
	4: "CHECK_MATERIAL_LOT_ID_EXPIRED",
}

var CheckMaterialLotID_value = map[string]int32{
	"CHECK_MATERIAL_LOT_ID_SUCCESS":                         0,
	"CHECK_MATERIAL_LOT_ID_MATERIAL_LOT_ID_DOES_NOT_EXIST":  1,
	"CHECK_MATERIAL_LOT_ID_INSUFFICIENT_INFO":               2,
	"CHECK_MATERIAL_LOT_ID_MATERIAL_LOT_IO_ALREADY_EXISTED": 3,
	"CHECK_MATERIAL_LOT_ID_EXPIRED":                         4,
}

func (x CheckMaterialLotID) String() string {
	return proto.EnumName(CheckMaterialLotID_name, int32(x))
}

func (CheckMaterialLotID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{19}
}

type EquipmentMaterialOperating int32

const (
	EquipmentMaterialOperating_EQUIPMENT_MATERIAL_OPERATING_SUCCESS          EquipmentMaterialOperating = 0
	EquipmentMaterialOperating_EQUIPMENT_MATERIAL_OPERATING_NOT_FOUND_LOT_ID EquipmentMaterialOperating = 1
)

var EquipmentMaterialOperating_name = map[int32]string{
	0: "EQUIPMENT_MATERIAL_OPERATING_SUCCESS",
	1: "EQUIPMENT_MATERIAL_OPERATING_NOT_FOUND_LOT_ID",
}

var EquipmentMaterialOperating_value = map[string]int32{
	"EQUIPMENT_MATERIAL_OPERATING_SUCCESS":          0,
	"EQUIPMENT_MATERIAL_OPERATING_NOT_FOUND_LOT_ID": 1,
}

func (x EquipmentMaterialOperating) String() string {
	return proto.EnumName(EquipmentMaterialOperating_name, int32(x))
}

func (EquipmentMaterialOperating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{20}
}

type CheckProdTools int32

const (
	CheckProdTools_CHECK_PRODUCT_TOOLS_SUCCESS           CheckProdTools = 0
	CheckProdTools_CHECK_PRODUCT_TOOLS_NOT_MATCH         CheckProdTools = 1
	CheckProdTools_CHECK_PRODUCT_TOOLS_NOT_ENOUGH        CheckProdTools = 2
	CheckProdTools_CHECK_PRODUCT_TOOLS_NOT_FOUND_LOT_ID  CheckProdTools = 3
	CheckProdTools_CHECK_PRODUCT_TOOLS_REPEAT            CheckProdTools = 5
	CheckProdTools_CHECK_PRODUCT_TOOLS_NOT_NEED_TO_CHECK CheckProdTools = 6
)

var CheckProdTools_name = map[int32]string{
	0: "CHECK_PRODUCT_TOOLS_SUCCESS",
	1: "CHECK_PRODUCT_TOOLS_NOT_MATCH",
	2: "CHECK_PRODUCT_TOOLS_NOT_ENOUGH",
	3: "CHECK_PRODUCT_TOOLS_NOT_FOUND_LOT_ID",
	5: "CHECK_PRODUCT_TOOLS_REPEAT",
	6: "CHECK_PRODUCT_TOOLS_NOT_NEED_TO_CHECK",
}

var CheckProdTools_value = map[string]int32{
	"CHECK_PRODUCT_TOOLS_SUCCESS":           0,
	"CHECK_PRODUCT_TOOLS_NOT_MATCH":         1,
	"CHECK_PRODUCT_TOOLS_NOT_ENOUGH":        2,
	"CHECK_PRODUCT_TOOLS_NOT_FOUND_LOT_ID":  3,
	"CHECK_PRODUCT_TOOLS_REPEAT":            5,
	"CHECK_PRODUCT_TOOLS_NOT_NEED_TO_CHECK": 6,
}

func (x CheckProdTools) String() string {
	return proto.EnumName(CheckProdTools_name, int32(x))
}

func (CheckProdTools) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{21}
}

type MaterialInventoryTalking int32

const (
	MaterialInventoryTalking_MATERIAL_INVENTORY_SUCCESS           MaterialInventoryTalking = 0
	MaterialInventoryTalking_MATERIAL_INVENTORY_NOT_FOUND_BARCODE MaterialInventoryTalking = 1
)

var MaterialInventoryTalking_name = map[int32]string{
	0: "MATERIAL_INVENTORY_SUCCESS",
	1: "MATERIAL_INVENTORY_NOT_FOUND_BARCODE",
}

var MaterialInventoryTalking_value = map[string]int32{
	"MATERIAL_INVENTORY_SUCCESS":           0,
	"MATERIAL_INVENTORY_NOT_FOUND_BARCODE": 1,
}

func (x MaterialInventoryTalking) String() string {
	return proto.EnumName(MaterialInventoryTalking_name, int32(x))
}

func (MaterialInventoryTalking) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{22}
}

type GetMaterialInventoryList int32

const (
	GetMaterialInventoryList_GET_MATERIAL_INVENTORY_LIST_SUCCESS        GetMaterialInventoryList = 0
	GetMaterialInventoryList_GET_MATERIAL_INVENTORY_LIST_NOT_FOUND_DATA GetMaterialInventoryList = 1
)

var GetMaterialInventoryList_name = map[int32]string{
	0: "GET_MATERIAL_INVENTORY_LIST_SUCCESS",
	1: "GET_MATERIAL_INVENTORY_LIST_NOT_FOUND_DATA",
}

var GetMaterialInventoryList_value = map[string]int32{
	"GET_MATERIAL_INVENTORY_LIST_SUCCESS":        0,
	"GET_MATERIAL_INVENTORY_LIST_NOT_FOUND_DATA": 1,
}

func (x GetMaterialInventoryList) String() string {
	return proto.EnumName(GetMaterialInventoryList_name, int32(x))
}

func (GetMaterialInventoryList) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f7722bef195efe9, []int{23}
}

func init() {
	proto.RegisterEnum("proto.mes.code.error.LoginAndLogout", LoginAndLogout_name, LoginAndLogout_value)
	proto.RegisterEnum("proto.mes.code.error.LoadRecipe", LoadRecipe_name, LoadRecipe_value)
	proto.RegisterEnum("proto.mes.code.error.Material", Material_name, Material_value)
	proto.RegisterEnum("proto.mes.code.error.MoveIn", MoveIn_name, MoveIn_value)
	proto.RegisterEnum("proto.mes.code.error.MoveOut", MoveOut_name, MoveOut_value)
	proto.RegisterEnum("proto.mes.code.error.MoveEnd", MoveEnd_name, MoveEnd_value)
	proto.RegisterEnum("proto.mes.code.error.WorkOrderOperating", WorkOrderOperating_name, WorkOrderOperating_value)
	proto.RegisterEnum("proto.mes.code.error.SetInitialProcess", SetInitialProcess_name, SetInitialProcess_value)
	proto.RegisterEnum("proto.mes.code.error.MaterialOperating", MaterialOperating_name, MaterialOperating_value)
	proto.RegisterEnum("proto.mes.code.error.RapidCheckOperating", RapidCheckOperating_name, RapidCheckOperating_value)
	proto.RegisterEnum("proto.mes.code.error.ContainerIdOperating", ContainerIdOperating_name, ContainerIdOperating_value)
	proto.RegisterEnum("proto.mes.code.error.EquipmentOperating", EquipmentOperating_name, EquipmentOperating_value)
	proto.RegisterEnum("proto.mes.code.error.EquipmentContainerOperating", EquipmentContainerOperating_name, EquipmentContainerOperating_value)
	proto.RegisterEnum("proto.mes.code.error.ContainerMaterialOperating", ContainerMaterialOperating_name, ContainerMaterialOperating_value)
	proto.RegisterEnum("proto.mes.code.error.CarrierOperating", CarrierOperating_name, CarrierOperating_value)
	proto.RegisterEnum("proto.mes.code.error.MaterialTransactionOperating", MaterialTransactionOperating_name, MaterialTransactionOperating_value)
	proto.RegisterEnum("proto.mes.code.error.TransactionOperating", TransactionOperating_name, TransactionOperating_value)
	proto.RegisterEnum("proto.mes.code.error.MtxShipListOperating", MtxShipListOperating_name, MtxShipListOperating_value)
	proto.RegisterEnum("proto.mes.code.error.MtxPda", MtxPda_name, MtxPda_value)
	proto.RegisterEnum("proto.mes.code.error.CheckMaterialLotID", CheckMaterialLotID_name, CheckMaterialLotID_value)
	proto.RegisterEnum("proto.mes.code.error.EquipmentMaterialOperating", EquipmentMaterialOperating_name, EquipmentMaterialOperating_value)
	proto.RegisterEnum("proto.mes.code.error.CheckProdTools", CheckProdTools_name, CheckProdTools_value)
	proto.RegisterEnum("proto.mes.code.error.MaterialInventoryTalking", MaterialInventoryTalking_name, MaterialInventoryTalking_value)
	proto.RegisterEnum("proto.mes.code.error.GetMaterialInventoryList", GetMaterialInventoryList_name, GetMaterialInventoryList_value)
}

func init() { proto.RegisterFile("code/error/enums.proto", fileDescriptor_8f7722bef195efe9) }

var fileDescriptor_8f7722bef195efe9 = []byte{
	// 1657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0x4b, 0x6f, 0xe3, 0xc6,
	0x1d, 0x2f, 0x25, 0xc5, 0xeb, 0xfe, 0x0f, 0xdb, 0xd9, 0x59, 0xc7, 0xf1, 0xfa, 0xb1, 0xf6, 0x3e,
	0xba, 0x76, 0x98, 0x44, 0xca, 0xa3, 0x0b, 0xb4, 0xb7, 0x1d, 0x93, 0x23, 0x69, 0x10, 0x6a, 0xc8,
	0x90, 0x43, 0x5b, 0x2e, 0x50, 0x10, 0x8a, 0x45, 0x38, 0x82, 0x2d, 0xd2, 0xa5, 0xe8, 0x6d, 0x82,
	0x5e, 0x7c, 0xe8, 0xbd, 0x1f, 0xa4, 0xa7, 0x62, 0x8f, 0x45, 0x3f, 0x43, 0x3f, 0x49, 0x0f, 0x45,
	0xaf, 0x3d, 0x14, 0x43, 0x89, 0xa4, 0x24, 0x8e, 0x6c, 0xe7, 0x64, 0x78, 0xfe, 0xbf, 0xff, 0xfb,
	0x49, 0xc1, 0xe6, 0x79, 0x3c, 0x0c, 0x5b, 0x61, 0x92, 0xc4, 0x49, 0x2b, 0x8c, 0x6e, 0xc6, 0x93,
	0xe6, 0x75, 0x12, 0xa7, 0x31, 0xde, 0xc8, 0xfe, 0x34, 0xc7, 0xe1, 0xa4, 0x29, 0x11, 0xcd, 0x0c,
	0xa1, 0x33, 0x78, 0x6c, 0xc5, 0x17, 0xa3, 0x88, 0x44, 0x43, 0x2b, 0xbe, 0x88, 0x6f, 0x52, 0xbc,
	0x0b, 0x5b, 0x96, 0xdd, 0x61, 0x3c, 0x20, 0xdc, 0x0c, 0x2c, 0xbb, 0x63, 0xfb, 0x22, 0xf0, 0x7c,
	0xc3, 0xa0, 0x9e, 0x87, 0x7e, 0x81, 0x9f, 0xc1, 0xc7, 0x15, 0x6a, 0x9b, 0x30, 0x0b, 0x69, 0xfa,
	0x5f, 0x34, 0x00, 0x2b, 0x1e, 0x0c, 0xdd, 0xf0, 0x7c, 0x74, 0x1d, 0xe2, 0x4f, 0xe0, 0xa9, 0x65,
	0x13, 0x33, 0x70, 0xa9, 0xc1, 0x1c, 0x3a, 0x27, 0x62, 0x13, 0xf0, 0x3c, 0x41, 0x72, 0x53, 0x13,
	0x69, 0xf8, 0x00, 0x76, 0xe7, 0xdf, 0xb9, 0x2d, 0x82, 0xb6, 0xed, 0x67, 0x6a, 0x44, 0xc0, 0x4c,
	0x54, 0xc3, 0xaf, 0x60, 0x5f, 0x8d, 0x98, 0x3d, 0x30, 0x13, 0x35, 0xf4, 0x7f, 0xd4, 0x61, 0xbd,
	0x37, 0x48, 0xc3, 0x64, 0x34, 0xb8, 0xc2, 0xdb, 0xb0, 0x69, 0x74, 0xa9, 0xf1, 0x6d, 0xd0, 0x23,
	0x82, 0xba, 0x8c, 0x58, 0x8b, 0xae, 0x2c, 0xd1, 0x0a, 0x53, 0x5e, 0xc1, 0xfe, 0x12, 0x49, 0x61,
	0xcd, 0xc7, 0xf0, 0xe4, 0x98, 0xb8, 0x86, 0x6d, 0xd2, 0xc0, 0xf4, 0x1d, 0x8b, 0x19, 0x44, 0x50,
	0xd4, 0xc0, 0x5b, 0xb0, 0x51, 0x70, 0xf9, 0x9c, 0x9c, 0x10, 0x66, 0x91, 0x63, 0x8b, 0xa2, 0x75,
	0xbc, 0x01, 0xa8, 0xa0, 0xd0, 0xbe, 0xc3, 0x5c, 0x6a, 0x22, 0x24, 0xc5, 0x94, 0xc2, 0x67, 0x02,
	0xd1, 0x81, 0x0c, 0xdf, 0x82, 0x72, 0xca, 0x6d, 0xbf, 0xd3, 0x45, 0xef, 0xf0, 0x27, 0x80, 0x17,
	0x08, 0x3d, 0x22, 0x8c, 0x2e, 0xba, 0xd5, 0xf0, 0x21, 0xbc, 0x34, 0x28, 0x17, 0x6e, 0xe6, 0xa4,
	0xe3, 0x58, 0x67, 0x81, 0x4a, 0xc0, 0x6d, 0x0d, 0xef, 0xc0, 0x66, 0xa9, 0xd1, 0x71, 0x6d, 0xd3,
	0x37, 0x44, 0x20, 0xce, 0x1c, 0x8a, 0x6e, 0x1b, 0xf8, 0x0d, 0xbc, 0x60, 0xfc, 0x84, 0x72, 0x61,
	0xbb, 0x67, 0x01, 0xf3, 0x02, 0x8b, 0x7a, 0x5e, 0x20, 0xba, 0x84, 0x07, 0x3d, 0xc6, 0x03, 0xd3,
	0xf6, 0x48, 0x87, 0xa2, 0xdb, 0x75, 0xfc, 0x1c, 0x9e, 0x89, 0x2e, 0xf3, 0xe6, 0x74, 0x50, 0x6a,
	0x06, 0xc2, 0x0e, 0x0c, 0x5f, 0xa0, 0x5b, 0x84, 0xdf, 0xc2, 0x97, 0xab, 0xac, 0x31, 0x6d, 0xea,
	0x65, 0x26, 0xe5, 0x2c, 0x9e, 0x41, 0x38, 0xa7, 0x26, 0xba, 0x3d, 0xd0, 0xff, 0xaa, 0xc1, 0x5a,
	0x2f, 0x7e, 0x1f, 0xb2, 0x08, 0x3f, 0x85, 0x5f, 0xf5, 0xec, 0x13, 0x1a, 0x30, 0x3e, 0x97, 0x34,
	0x0c, 0x8f, 0xf3, 0xc7, 0x22, 0x5b, 0xbb, 0xb0, 0x95, 0xbf, 0x29, 0xd2, 0xf4, 0x1c, 0xb6, 0xab,
	0x54, 0xaf, 0x4b, 0x69, 0x46, 0x6f, 0xcc, 0xd3, 0x4f, 0x5d, 0x9b, 0x77, 0x66, 0x34, 0x4f, 0x10,
	0xe1, 0x7b, 0x68, 0x5d, 0xff, 0x7b, 0x0d, 0x1e, 0x49, 0x8b, 0xec, 0x9b, 0x34, 0xcb, 0xa0, 0xc4,
	0x2e, 0xf6, 0x44, 0x6e, 0x68, 0xde, 0x0b, 0x99, 0x51, 0x7b, 0xf0, 0xac, 0x78, 0x54, 0x58, 0xb5,
	0x0f, 0x3b, 0x0a, 0xf2, 0x9c, 0x59, 0x47, 0xf0, 0x5a, 0x01, 0xe0, 0xb4, 0x2f, 0x64, 0xca, 0xa4,
	0xe6, 0x80, 0x93, 0x9e, 0x2c, 0xab, 0x37, 0xf0, 0x72, 0x31, 0x13, 0x53, 0x25, 0x41, 0x97, 0x78,
	0xc1, 0x31, 0xa5, 0x3c, 0xf0, 0xbd, 0xac, 0xd0, 0xe6, 0x55, 0x2a, 0x3c, 0x3d, 0xc0, 0xaf, 0xe1,
	0xa0, 0x00, 0x30, 0x7e, 0x42, 0x2c, 0x66, 0x2e, 0x0b, 0x45, 0xef, 0xf0, 0x4b, 0xd8, 0x53, 0x18,
	0x66, 0x10, 0xd7, 0x65, 0xd4, 0x95, 0x90, 0x5b, 0x4d, 0xff, 0x97, 0x36, 0x8d, 0x19, 0x8d, 0x86,
	0x45, 0xcc, 0xa8, 0xf4, 0xaf, 0x12, 0x33, 0xf9, 0x5a, 0x89, 0x99, 0x7c, 0x54, 0xc4, 0xec, 0x00,
	0x76, 0xb9, 0x3d, 0x33, 0x3a, 0x4f, 0x99, 0x41, 0xf8, 0xac, 0xba, 0x65, 0xd0, 0x3e, 0x83, 0x43,
	0x83, 0xf0, 0x19, 0x55, 0x1a, 0x28, 0x25, 0x1d, 0xd3, 0xb6, 0xed, 0xd2, 0x82, 0xa3, 0xcd, 0x38,
	0xf3, 0xba, 0x68, 0x5d, 0x82, 0xbb, 0xe4, 0x84, 0xce, 0x0b, 0xcc, 0x7d, 0x3a, 0xa3, 0x62, 0x41,
	0x32, 0xd2, 0xc7, 0x80, 0x4f, 0xe3, 0xe4, 0xd2, 0x4e, 0x86, 0x61, 0x62, 0x5f, 0x87, 0xc9, 0x20,
	0x1d, 0x45, 0x17, 0xd2, 0xa2, 0x53, 0xdb, 0xfd, 0x36, 0xb0, 0x5d, 0x93, 0xba, 0x81, 0xed, 0x50,
	0x97, 0x08, 0x26, 0x03, 0x5b, 0xf8, 0xb9, 0x0f, 0x3b, 0x4a, 0x44, 0xe1, 0xf3, 0x06, 0xa0, 0xaa,
	0xab, 0xfa, 0x1f, 0xe0, 0x89, 0x17, 0xa6, 0x2c, 0x1a, 0xa5, 0xa3, 0xc1, 0x95, 0x93, 0xc4, 0xe7,
	0xe1, 0x64, 0x22, 0x65, 0x79, 0xb2, 0x3c, 0x38, 0x13, 0x32, 0x23, 0x79, 0x19, 0x94, 0xca, 0x0e,
	0xe1, 0x95, 0x0a, 0xd0, 0x63, 0x9e, 0x27, 0x75, 0xba, 0xf4, 0x3b, 0x9f, 0x7a, 0x02, 0x69, 0xfa,
	0xdf, 0x6a, 0xf0, 0x24, 0x9f, 0x91, 0xa5, 0x37, 0xb2, 0x13, 0xf2, 0x74, 0xab, 0x7c, 0xd9, 0x86,
	0xcd, 0xe5, 0x1a, 0x73, 0xa9, 0x43, 0x89, 0x98, 0xa6, 0xae, 0x74, 0x63, 0xb9, 0x68, 0x6a, 0x59,
	0x35, 0x57, 0x45, 0x33, 0xee, 0xf9, 0xed, 0x36, 0x33, 0x18, 0xe5, 0xd2, 0xea, 0xb6, 0x8d, 0xea,
	0xf8, 0x6b, 0x68, 0x2a, 0x90, 0xf3, 0x53, 0x4a, 0x4e, 0x25, 0xa9, 0xcb, 0xa4, 0x6d, 0x26, 0xa7,
	0x46, 0x03, 0x7f, 0x03, 0x2d, 0x05, 0xcf, 0xdc, 0x14, 0x66, 0x62, 0x99, 0xe9, 0x23, 0x69, 0xd2,
	0x62, 0xdb, 0xe4, 0x09, 0x77, 0x6c, 0x4f, 0x38, 0x36, 0xa7, 0x01, 0xe9, 0x10, 0xc6, 0xd1, 0x9a,
	0xfe, 0x1f, 0x0d, 0x9e, 0xba, 0x83, 0xeb, 0xd1, 0xd0, 0xf8, 0x21, 0x3c, 0xbf, 0x2c, 0xe3, 0xf5,
	0x02, 0xf6, 0x5c, 0xe2, 0x30, 0x33, 0x98, 0xee, 0x0a, 0x55, 0xc8, 0x3e, 0x87, 0x23, 0x35, 0x44,
	0xd1, 0xf3, 0x9a, 0xec, 0x64, 0x35, 0x7a, 0xd6, 0xae, 0xd3, 0x46, 0xad, 0xe1, 0xb7, 0xf0, 0xd5,
	0x7d, 0x52, 0x0b, 0xaf, 0x8e, 0xcf, 0xa6, 0x1a, 0x50, 0x1d, 0xeb, 0xf0, 0xe6, 0x3e, 0xb6, 0x59,
	0xc2, 0x1a, 0xfa, 0x29, 0x6c, 0x18, 0x71, 0x94, 0x0e, 0x46, 0x51, 0x98, 0xb0, 0x61, 0xe9, 0xf3,
	0x3e, 0xec, 0x18, 0x36, 0x17, 0x84, 0xf1, 0x15, 0x05, 0xff, 0x1c, 0xb6, 0x55, 0x80, 0xbc, 0xde,
	0x75, 0x1f, 0x30, 0xfd, 0xe3, 0xcd, 0xe8, 0x7a, 0x1c, 0x46, 0xe9, 0x82, 0x58, 0xfa, 0x9d, 0xcf,
	0x9c, 0x9e, 0xac, 0x84, 0x15, 0x62, 0x55, 0x80, 0x42, 0x6c, 0x02, 0x3b, 0x85, 0xd8, 0xc2, 0xf0,
	0x52, 0xfe, 0xa7, 0xf0, 0xeb, 0x92, 0xfd, 0x6e, 0x07, 0x8e, 0xe0, 0xf5, 0xdd, 0xd0, 0x42, 0x67,
	0x0c, 0xdb, 0x85, 0xaa, 0x6a, 0x37, 0x1d, 0xc1, 0xeb, 0x92, 0xfb, 0xce, 0xbe, 0x3a, 0x84, 0x57,
	0x77, 0x22, 0x0b, 0x85, 0x1f, 0x34, 0x40, 0xc6, 0x20, 0x49, 0x46, 0xf3, 0xae, 0xed, 0xc1, 0xb3,
	0x7c, 0xf8, 0xaa, 0x84, 0x67, 0x23, 0x71, 0x99, 0xec, 0xf3, 0x59, 0x1f, 0x04, 0xc4, 0x10, 0xcc,
	0xe6, 0xd3, 0xed, 0xaf, 0x65, 0x96, 0x54, 0xc0, 0xe5, 0x68, 0xcf, 0xdb, 0xbd, 0x26, 0x4b, 0xa9,
	0x0a, 0x54, 0x6e, 0x83, 0xba, 0xfe, 0x67, 0xd8, 0xcd, 0xa3, 0x23, 0x92, 0x41, 0x34, 0x19, 0x9c,
	0xa7, 0xa3, 0x38, 0x2a, 0x1d, 0xd0, 0xe1, 0x4d, 0xe1, 0xb4, 0x70, 0x09, 0xf7, 0x66, 0x36, 0xa9,
	0xbc, 0x69, 0xc1, 0x67, 0xf7, 0x60, 0x45, 0xbf, 0xb4, 0x03, 0x69, 0xfa, 0x3f, 0x35, 0xd8, 0x50,
	0x6a, 0x7d, 0x01, 0x7b, 0xf7, 0x29, 0x93, 0x8b, 0xf5, 0x01, 0x3a, 0xa4, 0x03, 0x2b, 0x71, 0xf2,
	0xb2, 0xc9, 0xc6, 0x8e, 0x45, 0x05, 0x45, 0x35, 0xdc, 0x04, 0x5d, 0x8d, 0x5d, 0x98, 0x85, 0xf9,
	0xa4, 0xae, 0xeb, 0x1f, 0xea, 0xb0, 0xd1, 0x4b, 0x7f, 0xf4, 0x7e, 0x18, 0x5d, 0x5b, 0xa3, 0x49,
	0xba, 0x60, 0x7f, 0x4f, 0xf4, 0xbd, 0x2e, 0x73, 0x2c, 0xe6, 0x89, 0x55, 0xf6, 0xab, 0x21, 0x4b,
	0xf6, 0xcb, 0xf1, 0xa9, 0xc4, 0x2d, 0x4f, 0xfb, 0x92, 0xa9, 0x26, 0xeb, 0xea, 0x1e, 0x26, 0xda,
	0x37, 0x28, 0x35, 0xa9, 0x89, 0xea, 0x3f, 0x4f, 0x03, 0xe3, 0x81, 0xe8, 0xa3, 0x46, 0x96, 0x6b,
	0x25, 0x13, 0xb1, 0x5c, 0x4a, 0xcc, 0xb3, 0xe9, 0x71, 0xe3, 0x52, 0x83, 0xb2, 0x93, 0x6c, 0xa2,
	0xaf, 0x34, 0xa9, 0xba, 0x67, 0xd6, 0xe4, 0x64, 0xbe, 0xc7, 0xa4, 0xf2, 0xb8, 0x7e, 0x84, 0xbf,
	0x80, 0x4f, 0x57, 0x44, 0x5b, 0x6e, 0x8d, 0x9e, 0x6f, 0x09, 0xe6, 0x58, 0x34, 0x10, 0xac, 0x47,
	0xe5, 0xcd, 0xf8, 0xdf, 0x3a, 0xac, 0xf5, 0xd2, 0x1f, 0x9d, 0xe1, 0x20, 0x3b, 0x4e, 0x45, 0xdf,
	0x31, 0x89, 0x32, 0x45, 0x72, 0xdb, 0x2d, 0x53, 0x57, 0xc4, 0x84, 0xf0, 0x33, 0x19, 0x17, 0x4d,
	0x96, 0xd0, 0x83, 0x78, 0xf2, 0x4c, 0xc9, 0xfe, 0x5a, 0xc6, 0xab, 0x43, 0x58, 0xc7, 0x5f, 0xc2,
	0xe7, 0xab, 0x65, 0x4f, 0x13, 0x9a, 0x15, 0x27, 0x73, 0xa9, 0x9c, 0x8f, 0xa8, 0x21, 0x47, 0xc6,
	0x6a, 0x8e, 0x32, 0x84, 0xd9, 0xbe, 0xad, 0x06, 0x42, 0x11, 0xbd, 0x35, 0x79, 0x55, 0x55, 0x0d,
	0x9e, 0x9b, 0x53, 0x8f, 0xe4, 0x02, 0x7c, 0x50, 0x08, 0x32, 0xdd, 0x79, 0xe4, 0xd6, 0x1f, 0x1c,
	0xed, 0xf2, 0x6a, 0xfe, 0xa5, 0xdc, 0x1c, 0x15, 0x1e, 0x65, 0xaf, 0x82, 0xfe, 0x3f, 0x0d, 0x70,
	0x76, 0x22, 0xe4, 0xe3, 0xce, 0x8a, 0x53, 0x66, 0xca, 0x4e, 0x5d, 0xfa, 0x98, 0x9c, 0xa9, 0x2a,
	0xcb, 0xe0, 0xb7, 0xf0, 0x1b, 0x35, 0x64, 0xf9, 0xff, 0xe2, 0xd3, 0x89, 0xf6, 0x99, 0xbc, 0xe4,
	0xb2, 0xf1, 0xae, 0xe4, 0xac, 0xd6, 0x7c, 0x0d, 0xff, 0x0e, 0xde, 0x3e, 0x44, 0x8d, 0x5d, 0x94,
	0x47, 0xa6, 0x25, 0x2b, 0x8c, 0x95, 0x4e, 0xe4, 0x1f, 0xb2, 0x0d, 0xfd, 0x27, 0xd8, 0x2e, 0x56,
	0xb0, 0x72, 0x1d, 0x96, 0x6b, 0xf5, 0xce, 0x75, 0xf8, 0x15, 0x7c, 0x71, 0x27, 0xb2, 0x72, 0xad,
	0x68, 0xfa, 0xbf, 0x35, 0x78, 0x9c, 0x45, 0xde, 0x49, 0xe2, 0xa1, 0x88, 0xe3, 0xab, 0xec, 0x58,
	0x9e, 0x1a, 0x5c, 0x9c, 0x8e, 0xb6, 0x6d, 0xcd, 0x1f, 0xcb, 0x85, 0x47, 0x8b, 0x80, 0xb2, 0x64,
	0x35, 0xfc, 0x12, 0x9e, 0xaf, 0x82, 0xcc, 0xbe, 0xa6, 0xb3, 0xcb, 0x76, 0x15, 0x66, 0xc1, 0xc8,
	0x7a, 0x76, 0x19, 0x29, 0x90, 0xb3, 0x9d, 0xfa, 0x91, 0xac, 0xb4, 0x55, 0x92, 0x8a, 0x6f, 0x6b,
	0x49, 0x47, 0x6b, 0xfa, 0x10, 0xb6, 0xf2, 0x08, 0xb3, 0xe8, 0x7d, 0x18, 0xa5, 0x71, 0xf2, 0x93,
	0x18, 0x5c, 0x5d, 0x2e, 0x5f, 0xf1, 0xe5, 0x97, 0xfc, 0xc2, 0x7d, 0xa3, 0xa0, 0x57, 0x7f, 0x82,
	0xd0, 0xf4, 0x09, 0x6c, 0x75, 0xc2, 0xb4, 0xa2, 0x48, 0xee, 0x21, 0xd9, 0xf6, 0x1d, 0x3a, 0x97,
	0x9e, 0x52, 0x52, 0x36, 0x20, 0x4b, 0x75, 0x4d, 0xd0, 0xef, 0x02, 0x96, 0x7a, 0x4d, 0x22, 0x08,
	0xd2, 0x8e, 0x8f, 0x7f, 0xff, 0xee, 0x62, 0x94, 0x5e, 0x0d, 0xbe, 0x6f, 0x5e, 0x86, 0xd1, 0x70,
	0xd0, 0x3c, 0x8f, 0xc7, 0xcd, 0xf4, 0x4f, 0xad, 0xec, 0x9f, 0xd6, 0x79, 0x3c, 0x1e, 0xc7, 0xd1,
	0xa4, 0xf5, 0xfe, 0xeb, 0x56, 0xf6, 0x6b, 0x56, 0xeb, 0x22, 0xbe, 0x1a, 0x44, 0x17, 0xad, 0x71,
	0x38, 0x69, 0x95, 0x3f, 0x7b, 0x7d, 0xbf, 0x96, 0x11, 0xbf, 0xf9, 0x7f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x4f, 0xf3, 0x05, 0x1a, 0x0b, 0x13, 0x00, 0x00,
}
