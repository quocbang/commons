// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services.proto

package mes

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("services.proto", fileDescriptor_8e16ccb8c5307b32) }

var fileDescriptor_8e16ccb8c5307b32 = []byte{
	// 1809 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x99, 0x5d, 0x6f, 0xdc, 0x44,
	0x17, 0xc7, 0xe5, 0xe7, 0x91, 0xfa, 0x28, 0xd6, 0xa3, 0xd2, 0xba, 0x90, 0x92, 0xa4, 0x34, 0x8d,
	0x9b, 0xf7, 0x97, 0xdd, 0x34, 0x69, 0x9b, 0xb6, 0x17, 0xa0, 0xbc, 0x35, 0x5a, 0x29, 0x69, 0x96,
	0x34, 0xa8, 0x12, 0x37, 0x66, 0x62, 0x4f, 0xb7, 0x26, 0xbb, 0x1e, 0xd7, 0x9e, 0x4d, 0xba, 0x5c,
	0x01, 0xe2, 0x02, 0x09, 0x10, 0x20, 0xb8, 0x41, 0x42, 0x02, 0x09, 0x71, 0xc7, 0x05, 0x48, 0x7c,
	0x04, 0xbe, 0x01, 0x5f, 0xa1, 0xdf, 0x03, 0x74, 0x66, 0x3d, 0xf6, 0xd8, 0x3e, 0x7e, 0x81, 0xab,
	0x68, 0x7d, 0xfe, 0x7f, 0x9f, 0xdf, 0x8c, 0xc7, 0x67, 0xe6, 0x38, 0xfa, 0xc5, 0x90, 0x06, 0x67,
	0xae, 0x4d, 0xc3, 0x86, 0x1f, 0x30, 0xce, 0x8c, 0x11, 0xf1, 0xa7, 0xd1, 0xa3, 0xe1, 0xf8, 0xb5,
	0x0e, 0x63, 0x9d, 0x2e, 0x6d, 0x12, 0xdf, 0x6d, 0x12, 0xcf, 0x63, 0x9c, 0x70, 0x97, 0x79, 0x91,
	0x70, 0x7c, 0x22, 0x8a, 0x8a, 0x5f, 0x27, 0xfd, 0xa7, 0x4d, 0xda, 0xf3, 0xf9, 0x20, 0x0a, 0xae,
	0x8a, 0x3f, 0xcd, 0x1e, 0x0d, 0x21, 0xee, 0xf4, 0x6d, 0x70, 0x36, 0xed, 0x67, 0xd4, 0x3e, 0xb5,
	0x7a, 0x84, 0xd3, 0xc0, 0x25, 0x5d, 0xab, 0xcb, 0xb8, 0xe5, 0x3a, 0x91, 0xa3, 0x51, 0xe2, 0x88,
	0x2e, 0x58, 0x9c, 0xb1, 0x6e, 0x58, 0x43, 0x1f, 0xda, 0xc4, 0x8b, 0xd3, 0x44, 0xfa, 0x0d, 0x54,
	0x4f, 0x9f, 0xf7, 0x5d, 0xbf, 0x47, 0x3d, 0x9e, 0x50, 0x31, 0x9f, 0x06, 0x84, 0xbb, 0x5e, 0x27,
	0x32, 0xae, 0xa0, 0xc6, 0x42, 0xf9, 0x0c, 0x2e, 0xf7, 0xad, 0x68, 0x9e, 0x23, 0xd9, 0x24, 0x2a,
	0x3b, 0x67, 0xc1, 0x69, 0xe9, 0x7d, 0x40, 0x60, 0xb1, 0xc0, 0xa1, 0x41, 0x24, 0x9b, 0x2a, 0x94,
	0xc5, 0x92, 0x8a, 0x01, 0xb8, 0xde, 0x19, 0xf5, 0x38, 0x0b, 0xe4, 0xa3, 0x5b, 0x4a, 0xe4, 0xd1,
	0xd8, 0x60, 0x5e, 0x49, 0x10, 0xb8, 0x34, 0xc8, 0x8d, 0xf6, 0x2e, 0x2a, 0x66, 0x1e, 0x27, 0xae,
	0x47, 0x83, 0x5a, 0x93, 0x8a, 0xf9, 0xb2, 0xf2, 0x0d, 0x4c, 0x9e, 0x3c, 0xbb, 0x62, 0xe3, 0x4a,
	0xb9, 0x31, 0x2b, 0x47, 0xc7, 0xde, 0xa1, 0xdc, 0x3a, 0x61, 0xbd, 0x78, 0x30, 0x72, 0x05, 0xde,
	0xc2, 0xc4, 0x5d, 0x37, 0xe4, 0x56, 0x40, 0x6d, 0xd7, 0xa7, 0x16, 0xe9, 0x76, 0x61, 0xe9, 0xda,
	0x34, 0x94, 0x96, 0xe9, 0x42, 0x8b, 0xcd, 0x1c, 0xf9, 0x0a, 0x8e, 0x2f, 0x16, 0xaa, 0x1c, 0xea,
	0x93, 0x80, 0x03, 0xba, 0xd4, 0x2e, 0x17, 0x6a, 0x93, 0x51, 0xba, 0x4e, 0xf5, 0x9d, 0x9f, 0x12,
	0x1b, 0xd6, 0x80, 0xa2, 0xdd, 0x2b, 0xd4, 0xc6, 0x13, 0x61, 0xd9, 0x84, 0xd3, 0x0e, 0x0b, 0x5c,
	0x1a, 0x5a, 0x27, 0x03, 0x8b, 0x9d, 0x7b, 0xd4, 0x51, 0x18, 0x2b, 0xe7, 0xa9, 0x47, 0x49, 0xd8,
	0x0f, 0xa8, 0x80, 0xf4, 0x49, 0x40, 0x7a, 0xd5, 0x53, 0x1b, 0xcd, 0x67, 0x32, 0x3a, 0x69, 0x59,
	0x28, 0xb3, 0x88, 0xea, 0x11, 0x97, 0x9a, 0xe5, 0x4a, 0x29, 0x1f, 0xf8, 0x35, 0x9e, 0x46, 0x72,
	0x63, 0xa9, 0xbd, 0x8d, 0x69, 0x79, 0x40, 0xbc, 0x90, 0x88, 0xb7, 0xce, 0x12, 0xbe, 0xec, 0xaa,
	0x6b, 0x56, 0xb9, 0xb2, 0x86, 0xf5, 0xda, 0x06, 0xcb, 0x77, 0x48, 0x64, 0xba, 0x57, 0x65, 0x0a,
	0x9f, 0xb9, 0xbe, 0x0f, 0x9e, 0x5a, 0x7c, 0x01, 0xf1, 0x5d, 0xc7, 0x1a, 0xd6, 0xdb, 0x5a, 0x6f,
	0x5d, 0x48, 0xb9, 0xe5, 0x7a, 0x2e, 0x87, 0x72, 0x90, 0x7a, 0x2b, 0xd6, 0xfe, 0x5a, 0xd5, 0xff,
	0xbb, 0xd9, 0x6e, 0x19, 0x3f, 0x68, 0xfa, 0xe8, 0x13, 0x16, 0x9c, 0x1e, 0x42, 0x7d, 0x3b, 0x8c,
	0x87, 0xd0, 0xde, 0xdf, 0x36, 0xe6, 0x1a, 0xf1, 0xb6, 0xd4, 0xc8, 0x4b, 0xda, 0x5d, 0xfb, 0x88,
	0x3e, 0xef, 0xd3, 0x90, 0x8f, 0xcf, 0x54, 0x0b, 0xfd, 0xee, 0xc0, 0xbc, 0xf3, 0xf1, 0x9f, 0x2f,
	0xbf, 0xf9, 0x4f, 0xd3, 0x5c, 0x14, 0x90, 0xb0, 0xc1, 0x29, 0xa5, 0x11, 0x67, 0x78, 0xa0, 0x2d,
	0x1a, 0x5f, 0x69, 0xba, 0x91, 0x8f, 0x1a, 0xd3, 0xa5, 0x49, 0x25, 0x9a, 0x59, 0xa1, 0x02, 0xae,
	0x55, 0xc1, 0xb5, 0x68, 0xce, 0xc4, 0x5c, 0xc9, 0x04, 0xe6, 0x3d, 0x80, 0xf4, 0xa5, 0xa6, 0x5f,
	0xd9, 0x0e, 0x28, 0xe1, 0x34, 0x8e, 0x5b, 0x8f, 0x76, 0x9f, 0xa4, 0x98, 0x32, 0xf1, 0x47, 0xf4,
	0x1c, 0x63, 0xc2, 0x54, 0xc0, 0xd4, 0x10, 0x4c, 0xf3, 0xe6, 0x4d, 0x84, 0x09, 0x36, 0x1a, 0xb1,
	0x1d, 0x35, 0x6d, 0xe1, 0x96, 0x44, 0xef, 0xf8, 0x4e, 0x29, 0x51, 0x26, 0x5e, 0x40, 0x84, 0xa9,
	0xea, 0x13, 0xf5, 0x85, 0x1b, 0x88, 0x3e, 0xd3, 0x74, 0xe3, 0xed, 0x3e, 0x0d, 0x06, 0x69, 0xa0,
	0x9b, 0x4a, 0xaa, 0x74, 0x58, 0xe1, 0x99, 0x2a, 0x17, 0x01, 0xce, 0x8a, 0xc0, 0x99, 0x33, 0xcd,
	0x52, 0x9c, 0xe7, 0x60, 0x06, 0x9a, 0x4f, 0x34, 0xfd, 0x95, 0xcc, 0x5c, 0x1b, 0x53, 0xc5, 0xcf,
	0x41, 0x82, 0x4c, 0x96, 0x49, 0xaa, 0x30, 0x32, 0x06, 0xc0, 0xf8, 0x42, 0xd3, 0x2f, 0x6f, 0xc3,
	0xeb, 0xfb, 0xd8, 0x26, 0xde, 0x41, 0x54, 0xd2, 0x53, 0x73, 0x92, 0x8b, 0x62, 0x73, 0x82, 0x88,
	0xf0, 0x85, 0xac, 0xbc, 0x60, 0x39, 0x0f, 0xf0, 0x10, 0xfd, 0xc2, 0x01, 0x3b, 0xa3, 0x2d, 0xcf,
	0x78, 0x5d, 0xb9, 0xfd, 0xf0, 0x92, 0x4c, 0x3c, 0x8a, 0x44, 0x20, 0xdb, 0x8c, 0xc8, 0x36, 0x69,
	0x8e, 0x63, 0xd9, 0x86, 0x42, 0x48, 0x41, 0xf5, 0xff, 0xc1, 0x8f, 0xc3, 0x3e, 0x37, 0xc6, 0x32,
	0x77, 0x3a, 0xec, 0x73, 0x99, 0xe4, 0x2a, 0x16, 0x82, 0x2c, 0xb3, 0x22, 0xcb, 0x0d, 0x73, 0xa2,
	0x28, 0xcb, 0x61, 0x9f, 0x43, 0x9a, 0x73, 0x7d, 0x64, 0x9f, 0x75, 0x5c, 0xef, 0x11, 0xeb, 0x73,
	0xe3, 0x86, 0x72, 0x37, 0x71, 0x75, 0xd3, 0x73, 0xf6, 0x59, 0x87, 0x25, 0xf9, 0xae, 0x97, 0x28,
	0x20, 0xed, 0xbc, 0x48, 0x6b, 0x9a, 0x6f, 0x60, 0x69, 0xe3, 0x44, 0xca, 0xf8, 0x76, 0x3d, 0x27,
	0x37, 0xbe, 0x5d, 0xcf, 0x29, 0x1a, 0x9f, 0x08, 0xd5, 0x1a, 0xdf, 0xae, 0xe7, 0x40, 0x9a, 0x33,
	0xfd, 0xe2, 0xbe, 0x1b, 0xf2, 0x87, 0xc3, 0x23, 0x43, 0x6b, 0x27, 0x34, 0x46, 0x1b, 0xc3, 0x66,
	0xa0, 0x21, 0x9b, 0x81, 0xc6, 0x2e, 0x34, 0x03, 0xe9, 0xa1, 0xa5, 0x2c, 0xc3, 0x8c, 0xcb, 0x22,
	0xe3, 0xac, 0x39, 0x85, 0x2c, 0xd9, 0xb4, 0x1e, 0xf2, 0x7e, 0xaa, 0xe9, 0x97, 0xe0, 0x6a, 0x7b,
	0x48, 0x75, 0x0c, 0x9b, 0xb4, 0x61, 0x66, 0x52, 0xa8, 0x41, 0x39, 0xe2, 0x1b, 0xa5, 0x9a, 0xaa,
	0x8a, 0x92, 0x75, 0xa8, 0x28, 0xbb, 0xf2, 0x18, 0x02, 0xb3, 0x90, 0x45, 0x51, 0x83, 0x45, 0x28,
	0x69, 0x4d, 0x1d, 0x14, 0xd5, 0x01, 0x28, 0x1f, 0x6a, 0xc3, 0xc7, 0x11, 0x21, 0x02, 0x48, 0xc1,
	0x78, 0x15, 0x8c, 0xeb, 0x25, 0x8a, 0x3a, 0x0f, 0x26, 0xd1, 0x03, 0xc2, 0x8f, 0x9a, 0x3e, 0x0a,
	0x57, 0xe5, 0xeb, 0xac, 0xa0, 0xcc, 0x67, 0x12, 0xe5, 0x25, 0x12, 0x69, 0xb6, 0x86, 0x12, 0xd0,
	0x6e, 0x0b, 0xb4, 0x86, 0xb9, 0x50, 0x80, 0x96, 0xf7, 0xc9, 0x6a, 0x27, 0x23, 0xc9, 0xc6, 0xad,
	0x56, 0xbb, 0x5c, 0x14, 0xab, 0x76, 0x88, 0xa8, 0xb2, 0xda, 0xe5, 0x3c, 0x72, 0x13, 0x00, 0xda,
	0x9d, 0xe4, 0x44, 0x9f, 0xda, 0x04, 0x32, 0x31, 0x6c, 0x13, 0xc8, 0x49, 0xaa, 0x36, 0x81, 0x8c,
	0x01, 0x30, 0xba, 0xfa, 0x08, 0x5c, 0xdd, 0x86, 0xee, 0xc3, 0x98, 0xc8, 0xdc, 0x5c, 0x5c, 0x95,
	0x99, 0xc7, 0xf0, 0x20, 0xe4, 0x9c, 0x13, 0x39, 0xa7, 0xcc, 0x6b, 0x05, 0x39, 0x85, 0x54, 0x1e,
	0x9f, 0xb6, 0x65, 0xaf, 0x86, 0x1f, 0x9f, 0xf2, 0x61, 0xf4, 0xa8, 0x82, 0xa8, 0xaa, 0x8e, 0x4f,
	0x79, 0x0f, 0x20, 0xfd, 0xaa, 0xe9, 0xe3, 0x71, 0x24, 0xbf, 0x40, 0x96, 0xb1, 0xa4, 0x85, 0x2b,
	0x65, 0xb1, 0xa6, 0x1a, 0x50, 0xef, 0x09, 0xd4, 0x35, 0x73, 0xa5, 0x0c, 0x15, 0x5d, 0x3a, 0xbf,
	0x6b, 0xfa, 0x44, 0x5c, 0x04, 0x90, 0xe9, 0x5c, 0x51, 0x28, 0x4a, 0x74, 0x12, 0x7a, 0xa9, 0xae,
	0x1c, 0xa8, 0xef, 0x0b, 0xea, 0x75, 0xb3, 0x81, 0x50, 0x97, 0x98, 0xe5, 0xc3, 0x8f, 0x25, 0xf8,
	0xc3, 0xcf, 0x87, 0xb1, 0x87, 0x8f, 0xa9, 0xaa, 0x1e, 0x7e, 0xde, 0x03, 0x48, 0x9f, 0x6b, 0xfa,
	0xe5, 0xc7, 0x94, 0xb7, 0x86, 0x5d, 0x49, 0x7b, 0xd8, 0x94, 0xa4, 0x8a, 0x42, 0x2e, 0x8a, 0x15,
	0x05, 0x44, 0x04, 0x3c, 0x4d, 0xc1, 0xb3, 0x60, 0x4e, 0x23, 0x3c, 0x39, 0x0b, 0xe0, 0x7c, 0xab,
	0xe9, 0x57, 0x8e, 0xa0, 0xad, 0x12, 0xe7, 0xa3, 0x64, 0x8a, 0xd4, 0x9e, 0x06, 0x89, 0x4b, 0xa4,
	0x9b, 0x55, 0x32, 0x80, 0xba, 0x25, 0xa0, 0x96, 0xcc, 0x59, 0x04, 0x0a, 0x31, 0xc9, 0xbd, 0x6e,
	0x7b, 0xf8, 0xfd, 0x27, 0x61, 0x4a, 0xbd, 0x8d, 0x99, 0x20, 0xb6, 0xd7, 0xe5, 0x35, 0x55, 0x7b,
	0x5d, 0xd6, 0x01, 0x28, 0x7f, 0x68, 0xfa, 0x35, 0xf9, 0x4e, 0x1c, 0x27, 0xad, 0x6b, 0x82, 0xb5,
	0x86, 0xd4, 0x6a, 0x45, 0x08, 0xd5, 0x28, 0x87, 0xb9, 0xfa, 0x8f, 0x3c, 0x80, 0xfd, 0xa6, 0xc0,
	0xbe, 0x67, 0xae, 0x23, 0xd8, 0x55, 0x77, 0x80, 0x61, 0xfc, 0xa2, 0xe9, 0x63, 0x62, 0xab, 0x4a,
	0xbe, 0x7f, 0xb4, 0x49, 0x40, 0x7a, 0x94, 0xd3, 0x20, 0x34, 0x96, 0xb2, 0x1b, 0x21, 0xa6, 0x92,
	0xf0, 0x0b, 0xf5, 0xc4, 0x40, 0xbd, 0x21, 0xa8, 0x6f, 0x99, 0xcb, 0x45, 0x1b, 0x27, 0x66, 0x55,
	0xb7, 0xf7, 0x23, 0xf1, 0x59, 0x6b, 0xb3, 0x2b, 0xd7, 0x2c, 0xcd, 0x6f, 0xef, 0x79, 0x49, 0xd1,
	0xf6, 0x8e, 0x29, 0xeb, 0x6c, 0xef, 0x79, 0x1f, 0x20, 0xbe, 0xa7, 0x5f, 0xd8, 0xa3, 0x7c, 0x8b,
	0xf5, 0x52, 0xcd, 0xc3, 0xf0, 0x12, 0xd6, 0x3c, 0xc8, 0x08, 0x64, 0x9c, 0x16, 0x19, 0xaf, 0x9b,
	0x63, 0x48, 0xc6, 0xa1, 0x2e, 0x2a, 0x5f, 0xff, 0x3f, 0x38, 0x7e, 0x91, 0x2c, 0x35, 0xb5, 0xd8,
	0x57, 0x2d, 0xb1, 0xf9, 0x5a, 0x5a, 0x80, 0x59, 0x14, 0x30, 0xd3, 0xe6, 0x24, 0xb6, 0xb4, 0x94,
	0xf4, 0x11, 0xd2, 0xa5, 0x83, 0xe3, 0x17, 0x8f, 0x9f, 0xb9, 0x7e, 0x82, 0xa5, 0xce, 0x73, 0x14,
	0x44, 0x91, 0xa6, 0x2b, 0x75, 0x55, 0x2f, 0x68, 0x36, 0x35, 0x20, 0xbd, 0xd4, 0xf4, 0x39, 0xf5,
	0x10, 0xb6, 0x1d, 0x7f, 0x20, 0xdc, 0x1a, 0x1c, 0x9e, 0x7b, 0xd4, 0x49, 0xce, 0x1f, 0xc6, 0xfd,
	0x82, 0x03, 0x5f, 0x89, 0x47, 0xc2, 0x6f, 0xfc, 0x1b, 0x2b, 0x8c, 0x67, 0x57, 0x8c, 0xe7, 0x2d,
	0xf3, 0x41, 0xc5, 0xe1, 0xb1, 0xe4, 0x46, 0x30, 0xcc, 0x0f, 0xf4, 0x2b, 0x07, 0x3c, 0x3d, 0xfa,
	0xf6, 0xce, 0x66, 0xba, 0x71, 0xe5, 0x2f, 0xda, 0x0e, 0x41, 0x1b, 0xd7, 0x28, 0x52, 0x55, 0x8e,
	0x91, 0x0c, 0x90, 0xfb, 0x6b, 0x38, 0x44, 0x41, 0x91, 0x96, 0xac, 0xfb, 0x8c, 0xb7, 0x76, 0xd2,
	0x87, 0xa8, 0x5c, 0x18, 0x3d, 0x44, 0x21, 0x2a, 0x9c, 0x29, 0xdb, 0xba, 0xa7, 0x4c, 0xc0, 0xf4,
	0x9b, 0xa6, 0x8f, 0xc7, 0x5b, 0x6c, 0xf9, 0x29, 0xaa, 0x58, 0x86, 0x9d, 0xa2, 0xca, 0xd4, 0xf8,
	0x79, 0x44, 0x61, 0x2d, 0x36, 0xa7, 0xbe, 0x7f, 0xc8, 0xde, 0x8e, 0xb1, 0x6e, 0x98, 0xff, 0xfe,
	0xa1, 0x46, 0x0b, 0xbf, 0x7f, 0xa4, 0x45, 0xf5, 0xbe, 0x7f, 0xa8, 0x1e, 0xe0, 0xf9, 0x5e, 0xd3,
	0x5f, 0x8b, 0x5a, 0x2b, 0xa8, 0x6b, 0x31, 0x7c, 0x98, 0xfa, 0xf8, 0x89, 0x2a, 0xb0, 0x8f, 0x9f,
	0x05, 0x42, 0x60, 0x5b, 0x17, 0x6c, 0x2b, 0xe6, 0x7c, 0x71, 0x73, 0x97, 0xb6, 0x01, 0xde, 0x77,
	0x9a, 0xfe, 0xea, 0x1e, 0x8d, 0xca, 0x6f, 0xcb, 0xd9, 0x1a, 0x6c, 0x91, 0xc0, 0x66, 0x0e, 0x4d,
	0x15, 0x9c, 0x44, 0xb0, 0x13, 0x0b, 0xb0, 0x82, 0x83, 0xeb, 0x70, 0x36, 0x65, 0xde, 0x30, 0x1b,
	0xb0, 0x7d, 0xa4, 0xe9, 0x17, 0xe3, 0xd8, 0x43, 0x16, 0x1c, 0xf8, 0xa9, 0x16, 0x38, 0x1d, 0xc2,
	0x5a, 0xe0, 0xac, 0x02, 0xef, 0xa4, 0x30, 0x12, 0x61, 0x00, 0x86, 0x9e, 0x3e, 0xd2, 0x0a, 0x8f,
	0xe8, 0xfb, 0xd4, 0xe6, 0xe9, 0x4e, 0x2a, 0xbe, 0x8a, 0x75, 0x52, 0x4a, 0xb0, 0xf2, 0x53, 0x8f,
	0x2b, 0xb5, 0x90, 0xee, 0x67, 0x4d, 0xbf, 0x2a, 0x97, 0x75, 0x4b, 0xfe, 0x07, 0xef, 0x98, 0x9c,
	0xc2, 0xeb, 0xb6, 0x80, 0x1c, 0x68, 0x32, 0x1a, 0xc9, 0x32, 0x57, 0x47, 0x0a, 0x64, 0x77, 0x05,
	0xd9, 0xaa, 0xb9, 0x54, 0xd6, 0xe1, 0x66, 0x9c, 0xc0, 0xf9, 0x53, 0xb4, 0xaa, 0x73, 0x92, 0xd4,
	0xfe, 0xb9, 0x47, 0xf3, 0x82, 0xe1, 0x66, 0x9f, 0xdf, 0x3f, 0x8b, 0xb5, 0xf8, 0xf1, 0x41, 0xfd,
	0x58, 0x86, 0x81, 0x3c, 0xd0, 0x16, 0xb7, 0x36, 0xde, 0xbd, 0xd3, 0x71, 0x79, 0x97, 0x9c, 0x34,
	0x4e, 0xa9, 0xe7, 0x90, 0x86, 0xcd, 0x7a, 0x0d, 0x7e, 0xde, 0x14, 0x3f, 0x9a, 0x36, 0xeb, 0xf5,
	0x98, 0x17, 0x36, 0xcf, 0xd6, 0xa2, 0x7f, 0x84, 0x74, 0x58, 0x97, 0x78, 0x1d, 0x48, 0x70, 0x72,
	0x41, 0x5c, 0x59, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xda, 0x85, 0xc7, 0xb0, 0x46, 0x1f, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// 取得可投料/收料工單資訊 (包含BOM, Tool List, Configs)
	WorkOrderOperating_PLC(ctx context.Context, in *WorkOrderOperatingPlcRequest, opts ...grpc.CallOption) (*WorkOrderOperatingPlcReply, error)
	//工單操作 for UI
	WorkOrderOperating(ctx context.Context, in *WorkOrderOperatingRequest, opts ...grpc.CallOption) (*WorkOrderOperatingReply, error)
	// 建工單
	CreateWorkOrder_NEW(ctx context.Context, in *CreateWorkOrderNewRequest, opts ...grpc.CallOption) (*CreateWorkOrderNewReply, error)
	// 更新工單
	UpdateWorkOrder_NEW(ctx context.Context, in *UpdateWorkOrderNewRequest, opts ...grpc.CallOption) (*UpdateWorkOrderNewReply, error)
	// 查詢工單
	QueryWorkOrder_NEW(ctx context.Context, in *QueryWorkOrderNewRequest, opts ...grpc.CallOption) (*QueryWorkOrderNewReply, error)
	//建立工單
	CreateWorkOrder(ctx context.Context, in *CreateWorkOrderRequest, opts ...grpc.CallOption) (*CreateWorkOrderReply, error)
	//材料檢核
	CheckScanMaterial(ctx context.Context, in *CheckScanMaterialRequest, opts ...grpc.CallOption) (*CheckScanMaterialReply, error)
	//投料 by Sheet
	MoveIn(ctx context.Context, in *MoveInRequest, opts ...grpc.CallOption) (*MoveInReply, error)
	//收料 by Sheet
	MoveOut(ctx context.Context, in *MoveOutRequest, opts ...grpc.CallOption) (*MoveOutReply, error)
	//登入登出驗證
	LoginNout(ctx context.Context, in *LoginAndLogoutRequest, opts ...grpc.CallOption) (*LoginAndLogoutReply, error)
	//投料,收料 結束
	MoveEnd(ctx context.Context, in *MoveEndRequest, opts ...grpc.CallOption) (*MoveEndReply, error)
	//載入廠別資訊
	ListFactoryIDs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListFactoryIDsReply, error)
	//載入製程識別碼
	ListProductTypes(ctx context.Context, in *ListProductTypesRequest, opts ...grpc.CallOption) (*ListProductTypesReply, error)
	//載入機台資訊
	ListEquipmentIDs(ctx context.Context, in *ListEquipmentIDsRequest, opts ...grpc.CallOption) (*ListEquipmentIDsReply, error)
	//載入生產製品識別碼
	ListProductIDs(ctx context.Context, in *ListProductIDsRequest, opts ...grpc.CallOption) (*ListProductIDsReply, error)
	//載入材料庫製品識別碼
	ListMaterialProductIDs(ctx context.Context, in *ListMaterialProductIDsRequest, opts ...grpc.CallOption) (*ListMaterialProductIDsReply, error)
	//材料操作
	MaterialOperating(ctx context.Context, in *MaterialOperatingRequest, opts ...grpc.CallOption) (*MaterialOperatingReply, error)
	//取得部門資訊
	ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsReply, error)
	//取得代號資料
	ListCodes(ctx context.Context, in *ListCodesRequest, opts ...grpc.CallOption) (*ListCodesReply, error)
	//桶槽操作
	ContainerOperating(ctx context.Context, in *ContainerOperatingRequest, opts ...grpc.CallOption) (*ContainerOperatingReply, error)
	//桶槽材料操作
	ContainerMaterialOperating(ctx context.Context, in *ContainerMaterialOperatingRequest, opts ...grpc.CallOption) (*ContainerMaterialOperatingReply, error)
	//設備桶槽操作
	EquipmentContainerOperating(ctx context.Context, in *EquipmentContainerOperatingRequest, opts ...grpc.CallOption) (*EquipmentContainerOperatingReply, error)
	//設備操作
	EquipmentOperating(ctx context.Context, in *EquipmentOperatingRequest, opts ...grpc.CallOption) (*EquipmentOperatingReply, error)
	//設定工單初始階段
	SetInitialProcess(ctx context.Context, in *SetInitialProcessRequest, opts ...grpc.CallOption) (*SetInitialProcessReply, error)
	//快檢作業
	RapidCheckOperating(ctx context.Context, in *RapidCheckOperatingRequest, opts ...grpc.CallOption) (*RapidCheckOperatingReply, error)
	//載具操作
	CarrierOperating(ctx context.Context, in *CarrierOperatingRequest, opts ...grpc.CallOption) (*CarrierOperatingReply, error)
	//材料移轉作業
	MaterialTransactionOperating(ctx context.Context, in *MaterialTransactionListOperatingRequest, opts ...grpc.CallOption) (*MaterialTransactionListOperatingReply, error)
	//載入指定配合表之指定量測參數
	ListMeasurementParameters(ctx context.Context, in *ListMeasurementParametersRequest, opts ...grpc.CallOption) (*ListMeasurementParametersReply, error)
	// 取得配合表所有階段
	ListRecipeAllProcesses(ctx context.Context, in *ListRecipeAllProcessesRequest, opts ...grpc.CallOption) (*ListRecipeAllProcessesReply, error)
	// 依階段取得材料
	GetBom(ctx context.Context, in *GetBomRequest, opts ...grpc.CallOption) (*GetBomReply, error)
	// 移轉單操作
	MTxOperating(ctx context.Context, in *TransactionListOperatingRequest, opts ...grpc.CallOption) (*TransactionListOperatingReply, error)
	// 材料移轉作業 for UI
	MTxShipOperating(ctx context.Context, in *MTxShipListOperatingRequest, opts ...grpc.CallOption) (*MTxShipListOperatingReply, error)
	// 取得材料類別 (依所屬部門)
	ListMaterialCategoriesByOwnedDepartment(ctx context.Context, in *ListMaterialCategoriesByOwnedDepartmentRequest, opts ...grpc.CallOption) (*ListMaterialCategoriesByOwnedDepartmentReply, error)
	// 材料移轉作業 (for PDA)
	MtxShipOperatingPDA(ctx context.Context, in *MtxPdaRequest, opts ...grpc.CallOption) (*MtxPdaReply, error)
	// 檢查收料標示卡資訊 (check information form erp, only for pre-print process)
	CheckMaterialLotID(ctx context.Context, in *CheckMaterialLotIDRequest, opts ...grpc.CallOption) (*CheckMaterialLotIDReply, error)
	//設備材料操作
	EquipmentMaterialOperating(ctx context.Context, in *EquipmentMaterialOperatingRequest, opts ...grpc.CallOption) (*EquipmentMaterialOperatingReply, error)
	// 檢核工具
	CheckProductTools(ctx context.Context, in *CheckProductToolsRequest, opts ...grpc.CallOption) (*CheckProductToolsReply, error)
	// 取得階段可生產設備清單
	ListProcessEquipments(ctx context.Context, in *ListProcessEquipmentsRequest, opts ...grpc.CallOption) (*ListProcessEquipmentsReply, error)
	// only for mp : 透過條碼取得配方號
	GetRecipeIdByBarcode(ctx context.Context, in *GetRecipeIDByBarcodeRequest, opts ...grpc.CallOption) (*GetRecipeIDByBarcodeReply, error)
	// only for mp : 取得MP配方明細
	GetRecipeForMp(ctx context.Context, in *GetRecipeForMpRequest, opts ...grpc.CallOption) (*GetRecipeForMpReply, error)
	// only for mp : 透過條碼確認是否為不良品
	IsRejects(ctx context.Context, in *IsRejectsRequest, opts ...grpc.CallOption) (*IsRejectsReply, error)
	// 材料盤點
	MaterialInventoryTaking(ctx context.Context, in *MaterialInventoryTakingRequest, opts ...grpc.CallOption) (*MaterialInventoryTakingReply, error)
	// 取得材料庫存清單
	ListMaterialInventory(ctx context.Context, in *GetMaterialInventoryListRequest, opts ...grpc.CallOption) (*GetMaterialInventoryListReply, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) WorkOrderOperating_PLC(ctx context.Context, in *WorkOrderOperatingPlcRequest, opts ...grpc.CallOption) (*WorkOrderOperatingPlcReply, error) {
	out := new(WorkOrderOperatingPlcReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/WorkOrderOperating_PLC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) WorkOrderOperating(ctx context.Context, in *WorkOrderOperatingRequest, opts ...grpc.CallOption) (*WorkOrderOperatingReply, error) {
	out := new(WorkOrderOperatingReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/WorkOrderOperating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateWorkOrder_NEW(ctx context.Context, in *CreateWorkOrderNewRequest, opts ...grpc.CallOption) (*CreateWorkOrderNewReply, error) {
	out := new(CreateWorkOrderNewReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/CreateWorkOrder_NEW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateWorkOrder_NEW(ctx context.Context, in *UpdateWorkOrderNewRequest, opts ...grpc.CallOption) (*UpdateWorkOrderNewReply, error) {
	out := new(UpdateWorkOrderNewReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/UpdateWorkOrder_NEW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) QueryWorkOrder_NEW(ctx context.Context, in *QueryWorkOrderNewRequest, opts ...grpc.CallOption) (*QueryWorkOrderNewReply, error) {
	out := new(QueryWorkOrderNewReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/QueryWorkOrder_NEW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateWorkOrder(ctx context.Context, in *CreateWorkOrderRequest, opts ...grpc.CallOption) (*CreateWorkOrderReply, error) {
	out := new(CreateWorkOrderReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/CreateWorkOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CheckScanMaterial(ctx context.Context, in *CheckScanMaterialRequest, opts ...grpc.CallOption) (*CheckScanMaterialReply, error) {
	out := new(CheckScanMaterialReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/CheckScanMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MoveIn(ctx context.Context, in *MoveInRequest, opts ...grpc.CallOption) (*MoveInReply, error) {
	out := new(MoveInReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/MoveIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MoveOut(ctx context.Context, in *MoveOutRequest, opts ...grpc.CallOption) (*MoveOutReply, error) {
	out := new(MoveOutReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/MoveOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) LoginNout(ctx context.Context, in *LoginAndLogoutRequest, opts ...grpc.CallOption) (*LoginAndLogoutReply, error) {
	out := new(LoginAndLogoutReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/LoginNout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MoveEnd(ctx context.Context, in *MoveEndRequest, opts ...grpc.CallOption) (*MoveEndReply, error) {
	out := new(MoveEndReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/MoveEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListFactoryIDs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListFactoryIDsReply, error) {
	out := new(ListFactoryIDsReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/ListFactoryIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListProductTypes(ctx context.Context, in *ListProductTypesRequest, opts ...grpc.CallOption) (*ListProductTypesReply, error) {
	out := new(ListProductTypesReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/ListProductTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListEquipmentIDs(ctx context.Context, in *ListEquipmentIDsRequest, opts ...grpc.CallOption) (*ListEquipmentIDsReply, error) {
	out := new(ListEquipmentIDsReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/ListEquipmentIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListProductIDs(ctx context.Context, in *ListProductIDsRequest, opts ...grpc.CallOption) (*ListProductIDsReply, error) {
	out := new(ListProductIDsReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/ListProductIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListMaterialProductIDs(ctx context.Context, in *ListMaterialProductIDsRequest, opts ...grpc.CallOption) (*ListMaterialProductIDsReply, error) {
	out := new(ListMaterialProductIDsReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/ListMaterialProductIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MaterialOperating(ctx context.Context, in *MaterialOperatingRequest, opts ...grpc.CallOption) (*MaterialOperatingReply, error) {
	out := new(MaterialOperatingReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/MaterialOperating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsReply, error) {
	out := new(ListDepartmentsReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/ListDepartments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListCodes(ctx context.Context, in *ListCodesRequest, opts ...grpc.CallOption) (*ListCodesReply, error) {
	out := new(ListCodesReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/ListCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ContainerOperating(ctx context.Context, in *ContainerOperatingRequest, opts ...grpc.CallOption) (*ContainerOperatingReply, error) {
	out := new(ContainerOperatingReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/ContainerOperating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ContainerMaterialOperating(ctx context.Context, in *ContainerMaterialOperatingRequest, opts ...grpc.CallOption) (*ContainerMaterialOperatingReply, error) {
	out := new(ContainerMaterialOperatingReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/ContainerMaterialOperating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) EquipmentContainerOperating(ctx context.Context, in *EquipmentContainerOperatingRequest, opts ...grpc.CallOption) (*EquipmentContainerOperatingReply, error) {
	out := new(EquipmentContainerOperatingReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/EquipmentContainerOperating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) EquipmentOperating(ctx context.Context, in *EquipmentOperatingRequest, opts ...grpc.CallOption) (*EquipmentOperatingReply, error) {
	out := new(EquipmentOperatingReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/EquipmentOperating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetInitialProcess(ctx context.Context, in *SetInitialProcessRequest, opts ...grpc.CallOption) (*SetInitialProcessReply, error) {
	out := new(SetInitialProcessReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/SetInitialProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) RapidCheckOperating(ctx context.Context, in *RapidCheckOperatingRequest, opts ...grpc.CallOption) (*RapidCheckOperatingReply, error) {
	out := new(RapidCheckOperatingReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/RapidCheckOperating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CarrierOperating(ctx context.Context, in *CarrierOperatingRequest, opts ...grpc.CallOption) (*CarrierOperatingReply, error) {
	out := new(CarrierOperatingReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/CarrierOperating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MaterialTransactionOperating(ctx context.Context, in *MaterialTransactionListOperatingRequest, opts ...grpc.CallOption) (*MaterialTransactionListOperatingReply, error) {
	out := new(MaterialTransactionListOperatingReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/MaterialTransactionOperating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListMeasurementParameters(ctx context.Context, in *ListMeasurementParametersRequest, opts ...grpc.CallOption) (*ListMeasurementParametersReply, error) {
	out := new(ListMeasurementParametersReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/ListMeasurementParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListRecipeAllProcesses(ctx context.Context, in *ListRecipeAllProcessesRequest, opts ...grpc.CallOption) (*ListRecipeAllProcessesReply, error) {
	out := new(ListRecipeAllProcessesReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/ListRecipeAllProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetBom(ctx context.Context, in *GetBomRequest, opts ...grpc.CallOption) (*GetBomReply, error) {
	out := new(GetBomReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/GetBom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MTxOperating(ctx context.Context, in *TransactionListOperatingRequest, opts ...grpc.CallOption) (*TransactionListOperatingReply, error) {
	out := new(TransactionListOperatingReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/MTxOperating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MTxShipOperating(ctx context.Context, in *MTxShipListOperatingRequest, opts ...grpc.CallOption) (*MTxShipListOperatingReply, error) {
	out := new(MTxShipListOperatingReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/MTxShipOperating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListMaterialCategoriesByOwnedDepartment(ctx context.Context, in *ListMaterialCategoriesByOwnedDepartmentRequest, opts ...grpc.CallOption) (*ListMaterialCategoriesByOwnedDepartmentReply, error) {
	out := new(ListMaterialCategoriesByOwnedDepartmentReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/ListMaterialCategoriesByOwnedDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MtxShipOperatingPDA(ctx context.Context, in *MtxPdaRequest, opts ...grpc.CallOption) (*MtxPdaReply, error) {
	out := new(MtxPdaReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/MtxShipOperatingPDA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CheckMaterialLotID(ctx context.Context, in *CheckMaterialLotIDRequest, opts ...grpc.CallOption) (*CheckMaterialLotIDReply, error) {
	out := new(CheckMaterialLotIDReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/CheckMaterialLotID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) EquipmentMaterialOperating(ctx context.Context, in *EquipmentMaterialOperatingRequest, opts ...grpc.CallOption) (*EquipmentMaterialOperatingReply, error) {
	out := new(EquipmentMaterialOperatingReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/EquipmentMaterialOperating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CheckProductTools(ctx context.Context, in *CheckProductToolsRequest, opts ...grpc.CallOption) (*CheckProductToolsReply, error) {
	out := new(CheckProductToolsReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/CheckProductTools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListProcessEquipments(ctx context.Context, in *ListProcessEquipmentsRequest, opts ...grpc.CallOption) (*ListProcessEquipmentsReply, error) {
	out := new(ListProcessEquipmentsReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/ListProcessEquipments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetRecipeIdByBarcode(ctx context.Context, in *GetRecipeIDByBarcodeRequest, opts ...grpc.CallOption) (*GetRecipeIDByBarcodeReply, error) {
	out := new(GetRecipeIDByBarcodeReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/GetRecipeIdByBarcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetRecipeForMp(ctx context.Context, in *GetRecipeForMpRequest, opts ...grpc.CallOption) (*GetRecipeForMpReply, error) {
	out := new(GetRecipeForMpReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/GetRecipeForMp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) IsRejects(ctx context.Context, in *IsRejectsRequest, opts ...grpc.CallOption) (*IsRejectsReply, error) {
	out := new(IsRejectsReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/IsRejects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MaterialInventoryTaking(ctx context.Context, in *MaterialInventoryTakingRequest, opts ...grpc.CallOption) (*MaterialInventoryTakingReply, error) {
	out := new(MaterialInventoryTakingReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/MaterialInventoryTaking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListMaterialInventory(ctx context.Context, in *GetMaterialInventoryListRequest, opts ...grpc.CallOption) (*GetMaterialInventoryListReply, error) {
	out := new(GetMaterialInventoryListReply)
	err := c.cc.Invoke(ctx, "/proto.mes.API/ListMaterialInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// 取得可投料/收料工單資訊 (包含BOM, Tool List, Configs)
	WorkOrderOperating_PLC(context.Context, *WorkOrderOperatingPlcRequest) (*WorkOrderOperatingPlcReply, error)
	//工單操作 for UI
	WorkOrderOperating(context.Context, *WorkOrderOperatingRequest) (*WorkOrderOperatingReply, error)
	// 建工單
	CreateWorkOrder_NEW(context.Context, *CreateWorkOrderNewRequest) (*CreateWorkOrderNewReply, error)
	// 更新工單
	UpdateWorkOrder_NEW(context.Context, *UpdateWorkOrderNewRequest) (*UpdateWorkOrderNewReply, error)
	// 查詢工單
	QueryWorkOrder_NEW(context.Context, *QueryWorkOrderNewRequest) (*QueryWorkOrderNewReply, error)
	//建立工單
	CreateWorkOrder(context.Context, *CreateWorkOrderRequest) (*CreateWorkOrderReply, error)
	//材料檢核
	CheckScanMaterial(context.Context, *CheckScanMaterialRequest) (*CheckScanMaterialReply, error)
	//投料 by Sheet
	MoveIn(context.Context, *MoveInRequest) (*MoveInReply, error)
	//收料 by Sheet
	MoveOut(context.Context, *MoveOutRequest) (*MoveOutReply, error)
	//登入登出驗證
	LoginNout(context.Context, *LoginAndLogoutRequest) (*LoginAndLogoutReply, error)
	//投料,收料 結束
	MoveEnd(context.Context, *MoveEndRequest) (*MoveEndReply, error)
	//載入廠別資訊
	ListFactoryIDs(context.Context, *empty.Empty) (*ListFactoryIDsReply, error)
	//載入製程識別碼
	ListProductTypes(context.Context, *ListProductTypesRequest) (*ListProductTypesReply, error)
	//載入機台資訊
	ListEquipmentIDs(context.Context, *ListEquipmentIDsRequest) (*ListEquipmentIDsReply, error)
	//載入生產製品識別碼
	ListProductIDs(context.Context, *ListProductIDsRequest) (*ListProductIDsReply, error)
	//載入材料庫製品識別碼
	ListMaterialProductIDs(context.Context, *ListMaterialProductIDsRequest) (*ListMaterialProductIDsReply, error)
	//材料操作
	MaterialOperating(context.Context, *MaterialOperatingRequest) (*MaterialOperatingReply, error)
	//取得部門資訊
	ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsReply, error)
	//取得代號資料
	ListCodes(context.Context, *ListCodesRequest) (*ListCodesReply, error)
	//桶槽操作
	ContainerOperating(context.Context, *ContainerOperatingRequest) (*ContainerOperatingReply, error)
	//桶槽材料操作
	ContainerMaterialOperating(context.Context, *ContainerMaterialOperatingRequest) (*ContainerMaterialOperatingReply, error)
	//設備桶槽操作
	EquipmentContainerOperating(context.Context, *EquipmentContainerOperatingRequest) (*EquipmentContainerOperatingReply, error)
	//設備操作
	EquipmentOperating(context.Context, *EquipmentOperatingRequest) (*EquipmentOperatingReply, error)
	//設定工單初始階段
	SetInitialProcess(context.Context, *SetInitialProcessRequest) (*SetInitialProcessReply, error)
	//快檢作業
	RapidCheckOperating(context.Context, *RapidCheckOperatingRequest) (*RapidCheckOperatingReply, error)
	//載具操作
	CarrierOperating(context.Context, *CarrierOperatingRequest) (*CarrierOperatingReply, error)
	//材料移轉作業
	MaterialTransactionOperating(context.Context, *MaterialTransactionListOperatingRequest) (*MaterialTransactionListOperatingReply, error)
	//載入指定配合表之指定量測參數
	ListMeasurementParameters(context.Context, *ListMeasurementParametersRequest) (*ListMeasurementParametersReply, error)
	// 取得配合表所有階段
	ListRecipeAllProcesses(context.Context, *ListRecipeAllProcessesRequest) (*ListRecipeAllProcessesReply, error)
	// 依階段取得材料
	GetBom(context.Context, *GetBomRequest) (*GetBomReply, error)
	// 移轉單操作
	MTxOperating(context.Context, *TransactionListOperatingRequest) (*TransactionListOperatingReply, error)
	// 材料移轉作業 for UI
	MTxShipOperating(context.Context, *MTxShipListOperatingRequest) (*MTxShipListOperatingReply, error)
	// 取得材料類別 (依所屬部門)
	ListMaterialCategoriesByOwnedDepartment(context.Context, *ListMaterialCategoriesByOwnedDepartmentRequest) (*ListMaterialCategoriesByOwnedDepartmentReply, error)
	// 材料移轉作業 (for PDA)
	MtxShipOperatingPDA(context.Context, *MtxPdaRequest) (*MtxPdaReply, error)
	// 檢查收料標示卡資訊 (check information form erp, only for pre-print process)
	CheckMaterialLotID(context.Context, *CheckMaterialLotIDRequest) (*CheckMaterialLotIDReply, error)
	//設備材料操作
	EquipmentMaterialOperating(context.Context, *EquipmentMaterialOperatingRequest) (*EquipmentMaterialOperatingReply, error)
	// 檢核工具
	CheckProductTools(context.Context, *CheckProductToolsRequest) (*CheckProductToolsReply, error)
	// 取得階段可生產設備清單
	ListProcessEquipments(context.Context, *ListProcessEquipmentsRequest) (*ListProcessEquipmentsReply, error)
	// only for mp : 透過條碼取得配方號
	GetRecipeIdByBarcode(context.Context, *GetRecipeIDByBarcodeRequest) (*GetRecipeIDByBarcodeReply, error)
	// only for mp : 取得MP配方明細
	GetRecipeForMp(context.Context, *GetRecipeForMpRequest) (*GetRecipeForMpReply, error)
	// only for mp : 透過條碼確認是否為不良品
	IsRejects(context.Context, *IsRejectsRequest) (*IsRejectsReply, error)
	// 材料盤點
	MaterialInventoryTaking(context.Context, *MaterialInventoryTakingRequest) (*MaterialInventoryTakingReply, error)
	// 取得材料庫存清單
	ListMaterialInventory(context.Context, *GetMaterialInventoryListRequest) (*GetMaterialInventoryListReply, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_WorkOrderOperating_PLC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkOrderOperatingPlcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).WorkOrderOperating_PLC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/WorkOrderOperating_PLC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).WorkOrderOperating_PLC(ctx, req.(*WorkOrderOperatingPlcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_WorkOrderOperating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkOrderOperatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).WorkOrderOperating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/WorkOrderOperating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).WorkOrderOperating(ctx, req.(*WorkOrderOperatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateWorkOrder_NEW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkOrderNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateWorkOrder_NEW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/CreateWorkOrder_NEW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateWorkOrder_NEW(ctx, req.(*CreateWorkOrderNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateWorkOrder_NEW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkOrderNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateWorkOrder_NEW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/UpdateWorkOrder_NEW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateWorkOrder_NEW(ctx, req.(*UpdateWorkOrderNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_QueryWorkOrder_NEW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkOrderNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).QueryWorkOrder_NEW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/QueryWorkOrder_NEW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).QueryWorkOrder_NEW(ctx, req.(*QueryWorkOrderNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateWorkOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateWorkOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/CreateWorkOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateWorkOrder(ctx, req.(*CreateWorkOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CheckScanMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckScanMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CheckScanMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/CheckScanMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CheckScanMaterial(ctx, req.(*CheckScanMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MoveIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MoveIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/MoveIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MoveIn(ctx, req.(*MoveInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MoveOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MoveOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/MoveOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MoveOut(ctx, req.(*MoveOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_LoginNout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAndLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).LoginNout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/LoginNout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).LoginNout(ctx, req.(*LoginAndLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MoveEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MoveEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/MoveEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MoveEnd(ctx, req.(*MoveEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListFactoryIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListFactoryIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/ListFactoryIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListFactoryIDs(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListProductTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListProductTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/ListProductTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListProductTypes(ctx, req.(*ListProductTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListEquipmentIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEquipmentIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListEquipmentIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/ListEquipmentIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListEquipmentIDs(ctx, req.(*ListEquipmentIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListProductIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListProductIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/ListProductIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListProductIDs(ctx, req.(*ListProductIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListMaterialProductIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMaterialProductIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListMaterialProductIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/ListMaterialProductIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListMaterialProductIDs(ctx, req.(*ListMaterialProductIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MaterialOperating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialOperatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MaterialOperating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/MaterialOperating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MaterialOperating(ctx, req.(*MaterialOperatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/ListDepartments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListDepartments(ctx, req.(*ListDepartmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/ListCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListCodes(ctx, req.(*ListCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ContainerOperating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerOperatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ContainerOperating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/ContainerOperating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ContainerOperating(ctx, req.(*ContainerOperatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ContainerMaterialOperating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerMaterialOperatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ContainerMaterialOperating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/ContainerMaterialOperating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ContainerMaterialOperating(ctx, req.(*ContainerMaterialOperatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_EquipmentContainerOperating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentContainerOperatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).EquipmentContainerOperating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/EquipmentContainerOperating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).EquipmentContainerOperating(ctx, req.(*EquipmentContainerOperatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_EquipmentOperating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentOperatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).EquipmentOperating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/EquipmentOperating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).EquipmentOperating(ctx, req.(*EquipmentOperatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetInitialProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInitialProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetInitialProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/SetInitialProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetInitialProcess(ctx, req.(*SetInitialProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_RapidCheckOperating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RapidCheckOperatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RapidCheckOperating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/RapidCheckOperating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RapidCheckOperating(ctx, req.(*RapidCheckOperatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CarrierOperating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarrierOperatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CarrierOperating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/CarrierOperating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CarrierOperating(ctx, req.(*CarrierOperatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MaterialTransactionOperating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialTransactionListOperatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MaterialTransactionOperating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/MaterialTransactionOperating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MaterialTransactionOperating(ctx, req.(*MaterialTransactionListOperatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListMeasurementParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeasurementParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListMeasurementParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/ListMeasurementParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListMeasurementParameters(ctx, req.(*ListMeasurementParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListRecipeAllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecipeAllProcessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListRecipeAllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/ListRecipeAllProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListRecipeAllProcesses(ctx, req.(*ListRecipeAllProcessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetBom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetBom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/GetBom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetBom(ctx, req.(*GetBomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MTxOperating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionListOperatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MTxOperating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/MTxOperating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MTxOperating(ctx, req.(*TransactionListOperatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MTxShipOperating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MTxShipListOperatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MTxShipOperating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/MTxShipOperating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MTxShipOperating(ctx, req.(*MTxShipListOperatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListMaterialCategoriesByOwnedDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMaterialCategoriesByOwnedDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListMaterialCategoriesByOwnedDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/ListMaterialCategoriesByOwnedDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListMaterialCategoriesByOwnedDepartment(ctx, req.(*ListMaterialCategoriesByOwnedDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MtxShipOperatingPDA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtxPdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MtxShipOperatingPDA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/MtxShipOperatingPDA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MtxShipOperatingPDA(ctx, req.(*MtxPdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CheckMaterialLotID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMaterialLotIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CheckMaterialLotID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/CheckMaterialLotID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CheckMaterialLotID(ctx, req.(*CheckMaterialLotIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_EquipmentMaterialOperating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentMaterialOperatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).EquipmentMaterialOperating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/EquipmentMaterialOperating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).EquipmentMaterialOperating(ctx, req.(*EquipmentMaterialOperatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CheckProductTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckProductToolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CheckProductTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/CheckProductTools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CheckProductTools(ctx, req.(*CheckProductToolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListProcessEquipments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessEquipmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListProcessEquipments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/ListProcessEquipments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListProcessEquipments(ctx, req.(*ListProcessEquipmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetRecipeIdByBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeIDByBarcodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetRecipeIdByBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/GetRecipeIdByBarcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetRecipeIdByBarcode(ctx, req.(*GetRecipeIDByBarcodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetRecipeForMp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeForMpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetRecipeForMp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/GetRecipeForMp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetRecipeForMp(ctx, req.(*GetRecipeForMpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_IsRejects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsRejectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).IsRejects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/IsRejects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).IsRejects(ctx, req.(*IsRejectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MaterialInventoryTaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialInventoryTakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MaterialInventoryTaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/MaterialInventoryTaking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MaterialInventoryTaking(ctx, req.(*MaterialInventoryTakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListMaterialInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialInventoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListMaterialInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mes.API/ListMaterialInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListMaterialInventory(ctx, req.(*GetMaterialInventoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.mes.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WorkOrderOperating_PLC",
			Handler:    _API_WorkOrderOperating_PLC_Handler,
		},
		{
			MethodName: "WorkOrderOperating",
			Handler:    _API_WorkOrderOperating_Handler,
		},
		{
			MethodName: "CreateWorkOrder_NEW",
			Handler:    _API_CreateWorkOrder_NEW_Handler,
		},
		{
			MethodName: "UpdateWorkOrder_NEW",
			Handler:    _API_UpdateWorkOrder_NEW_Handler,
		},
		{
			MethodName: "QueryWorkOrder_NEW",
			Handler:    _API_QueryWorkOrder_NEW_Handler,
		},
		{
			MethodName: "CreateWorkOrder",
			Handler:    _API_CreateWorkOrder_Handler,
		},
		{
			MethodName: "CheckScanMaterial",
			Handler:    _API_CheckScanMaterial_Handler,
		},
		{
			MethodName: "MoveIn",
			Handler:    _API_MoveIn_Handler,
		},
		{
			MethodName: "MoveOut",
			Handler:    _API_MoveOut_Handler,
		},
		{
			MethodName: "LoginNout",
			Handler:    _API_LoginNout_Handler,
		},
		{
			MethodName: "MoveEnd",
			Handler:    _API_MoveEnd_Handler,
		},
		{
			MethodName: "ListFactoryIDs",
			Handler:    _API_ListFactoryIDs_Handler,
		},
		{
			MethodName: "ListProductTypes",
			Handler:    _API_ListProductTypes_Handler,
		},
		{
			MethodName: "ListEquipmentIDs",
			Handler:    _API_ListEquipmentIDs_Handler,
		},
		{
			MethodName: "ListProductIDs",
			Handler:    _API_ListProductIDs_Handler,
		},
		{
			MethodName: "ListMaterialProductIDs",
			Handler:    _API_ListMaterialProductIDs_Handler,
		},
		{
			MethodName: "MaterialOperating",
			Handler:    _API_MaterialOperating_Handler,
		},
		{
			MethodName: "ListDepartments",
			Handler:    _API_ListDepartments_Handler,
		},
		{
			MethodName: "ListCodes",
			Handler:    _API_ListCodes_Handler,
		},
		{
			MethodName: "ContainerOperating",
			Handler:    _API_ContainerOperating_Handler,
		},
		{
			MethodName: "ContainerMaterialOperating",
			Handler:    _API_ContainerMaterialOperating_Handler,
		},
		{
			MethodName: "EquipmentContainerOperating",
			Handler:    _API_EquipmentContainerOperating_Handler,
		},
		{
			MethodName: "EquipmentOperating",
			Handler:    _API_EquipmentOperating_Handler,
		},
		{
			MethodName: "SetInitialProcess",
			Handler:    _API_SetInitialProcess_Handler,
		},
		{
			MethodName: "RapidCheckOperating",
			Handler:    _API_RapidCheckOperating_Handler,
		},
		{
			MethodName: "CarrierOperating",
			Handler:    _API_CarrierOperating_Handler,
		},
		{
			MethodName: "MaterialTransactionOperating",
			Handler:    _API_MaterialTransactionOperating_Handler,
		},
		{
			MethodName: "ListMeasurementParameters",
			Handler:    _API_ListMeasurementParameters_Handler,
		},
		{
			MethodName: "ListRecipeAllProcesses",
			Handler:    _API_ListRecipeAllProcesses_Handler,
		},
		{
			MethodName: "GetBom",
			Handler:    _API_GetBom_Handler,
		},
		{
			MethodName: "MTxOperating",
			Handler:    _API_MTxOperating_Handler,
		},
		{
			MethodName: "MTxShipOperating",
			Handler:    _API_MTxShipOperating_Handler,
		},
		{
			MethodName: "ListMaterialCategoriesByOwnedDepartment",
			Handler:    _API_ListMaterialCategoriesByOwnedDepartment_Handler,
		},
		{
			MethodName: "MtxShipOperatingPDA",
			Handler:    _API_MtxShipOperatingPDA_Handler,
		},
		{
			MethodName: "CheckMaterialLotID",
			Handler:    _API_CheckMaterialLotID_Handler,
		},
		{
			MethodName: "EquipmentMaterialOperating",
			Handler:    _API_EquipmentMaterialOperating_Handler,
		},
		{
			MethodName: "CheckProductTools",
			Handler:    _API_CheckProductTools_Handler,
		},
		{
			MethodName: "ListProcessEquipments",
			Handler:    _API_ListProcessEquipments_Handler,
		},
		{
			MethodName: "GetRecipeIdByBarcode",
			Handler:    _API_GetRecipeIdByBarcode_Handler,
		},
		{
			MethodName: "GetRecipeForMp",
			Handler:    _API_GetRecipeForMp_Handler,
		},
		{
			MethodName: "IsRejects",
			Handler:    _API_IsRejects_Handler,
		},
		{
			MethodName: "MaterialInventoryTaking",
			Handler:    _API_MaterialInventoryTaking_Handler,
		},
		{
			MethodName: "ListMaterialInventory",
			Handler:    _API_ListMaterialInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
