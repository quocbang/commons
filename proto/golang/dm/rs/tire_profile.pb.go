// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tire_profile.proto

package rs

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//胎別
type Profile_TireType int32

const (
	Profile_TIRE_TYPE_UNSPECIFIED Profile_TireType = 0
	Profile_RADIAL                Profile_TireType = 1
	Profile_BIAS                  Profile_TireType = 2
	Profile_BICYCLE               Profile_TireType = 3
)

var Profile_TireType_name = map[int32]string{
	0: "TIRE_TYPE_UNSPECIFIED",
	1: "RADIAL",
	2: "BIAS",
	3: "BICYCLE",
}

var Profile_TireType_value = map[string]int32{
	"TIRE_TYPE_UNSPECIFIED": 0,
	"RADIAL":                1,
	"BIAS":                  2,
	"BICYCLE":               3,
}

func (x Profile_TireType) String() string {
	return proto.EnumName(Profile_TireType_name, int32(x))
}

func (Profile_TireType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_770b44aaaf97aee8, []int{0, 0}
}

type Profile_Rate int32

const (
	Profile_RATE_UNSPECIFIED Profile_Rate = 0
	Profile_FULL_PROFILE     Profile_Rate = 1
	Profile_HALF_PROFILE     Profile_Rate = 2
)

var Profile_Rate_name = map[int32]string{
	0: "RATE_UNSPECIFIED",
	1: "FULL_PROFILE",
	2: "HALF_PROFILE",
}

var Profile_Rate_value = map[string]int32{
	"RATE_UNSPECIFIED": 0,
	"FULL_PROFILE":     1,
	"HALF_PROFILE":     2,
}

func (x Profile_Rate) String() string {
	return proto.EnumName(Profile_Rate_name, int32(x))
}

func (Profile_Rate) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_770b44aaaf97aee8, []int{0, 1}
}

type Profile_ProfileType int32

const (
	Profile_PROFILE_TYPE_UNSPECIFIED Profile_ProfileType = 0
	//胎面膠
	Profile_CAP_WING_N_UTC    Profile_ProfileType = 1
	Profile_CAP_WING_BASE_UTC Profile_ProfileType = 2
	Profile_CAP_N_N_UTC       Profile_ProfileType = 3
	Profile_BASE_N_N_N        Profile_ProfileType = 4
	//胎邊膠
	Profile_SW_GC_N_N_N       Profile_ProfileType = 11
	Profile_SW_GC_BASE_N_N    Profile_ProfileType = 12
	Profile_SW_GC_BASE_N_CAP  Profile_ProfileType = 13
	Profile_SW_GC_WSW_N_COVER Profile_ProfileType = 14
	Profile_CAP_N_N_N_N       Profile_ProfileType = 15
)

var Profile_ProfileType_name = map[int32]string{
	0:  "PROFILE_TYPE_UNSPECIFIED",
	1:  "CAP_WING_N_UTC",
	2:  "CAP_WING_BASE_UTC",
	3:  "CAP_N_N_UTC",
	4:  "BASE_N_N_N",
	11: "SW_GC_N_N_N",
	12: "SW_GC_BASE_N_N",
	13: "SW_GC_BASE_N_CAP",
	14: "SW_GC_WSW_N_COVER",
	15: "CAP_N_N_N_N",
}

var Profile_ProfileType_value = map[string]int32{
	"PROFILE_TYPE_UNSPECIFIED": 0,
	"CAP_WING_N_UTC":           1,
	"CAP_WING_BASE_UTC":        2,
	"CAP_N_N_UTC":              3,
	"BASE_N_N_N":               4,
	"SW_GC_N_N_N":              11,
	"SW_GC_BASE_N_N":           12,
	"SW_GC_BASE_N_CAP":         13,
	"SW_GC_WSW_N_COVER":        14,
	"CAP_N_N_N_N":              15,
}

func (x Profile_ProfileType) String() string {
	return proto.EnumName(Profile_ProfileType_name, int32(x))
}

func (Profile_ProfileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_770b44aaaf97aee8, []int{0, 2}
}

//胎邊,胎面profile
type Profile struct {
	Id          string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"id"`
	Factory     FactoryID           `protobuf:"varint,2,opt,name=factory,proto3,enum=proto.dm.rs.FactoryID" json:"factory,omitempty" bson:"factory"`
	TireType    Profile_TireType    `protobuf:"varint,3,opt,name=tire_type,json=tireType,proto3,enum=proto.dm.rs.Profile_TireType" json:"tire_type,omitempty" bson:"tireType"`
	ProductType string              `protobuf:"bytes,4,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty" bson:"productType"`
	MoldType    string              `protobuf:"bytes,5,opt,name=mold_type,json=moldType,proto3" json:"mold_type,omitempty" bson:"moldType"`
	Version     *Version            `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty" bson:"version"`
	Rate        Profile_Rate        `protobuf:"varint,7,opt,name=rate,proto3,enum=proto.dm.rs.Profile_Rate" json:"rate,omitempty" bson:"rate"`
	ProfileType Profile_ProfileType `protobuf:"varint,8,opt,name=profile_type,json=profileType,proto3,enum=proto.dm.rs.Profile_ProfileType" json:"profile_type,omitempty" bson:"profileType"`
	RubHeight   []*RubberHeights    `protobuf:"bytes,9,rep,name=rub_height,json=rubHeight,proto3" json:"rub_height,omitempty" bson:"rubHeight"`
	Width       []*Widths           `protobuf:"bytes,10,rep,name=width,proto3" json:"width,omitempty" bson:"width"`
	Properties  []*Property         `protobuf:"bytes,11,rep,name=properties,proto3" json:"properties,omitempty" bson:"properties"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_770b44aaaf97aee8, []int{0}
}
func (m *Profile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Profile.Unmarshal(m, b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return xxx_messageInfo_Profile.Size(m)
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Profile) GetFactory() FactoryID {
	if m != nil {
		return m.Factory
	}
	return FactoryID_FACTORY_UNSPECIFIED
}

func (m *Profile) GetTireType() Profile_TireType {
	if m != nil {
		return m.TireType
	}
	return Profile_TIRE_TYPE_UNSPECIFIED
}

func (m *Profile) GetProductType() string {
	if m != nil {
		return m.ProductType
	}
	return ""
}

func (m *Profile) GetMoldType() string {
	if m != nil {
		return m.MoldType
	}
	return ""
}

func (m *Profile) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Profile) GetRate() Profile_Rate {
	if m != nil {
		return m.Rate
	}
	return Profile_RATE_UNSPECIFIED
}

func (m *Profile) GetProfileType() Profile_ProfileType {
	if m != nil {
		return m.ProfileType
	}
	return Profile_PROFILE_TYPE_UNSPECIFIED
}

func (m *Profile) GetRubHeight() []*RubberHeights {
	if m != nil {
		return m.RubHeight
	}
	return nil
}

func (m *Profile) GetWidth() []*Widths {
	if m != nil {
		return m.Width
	}
	return nil
}

func (m *Profile) GetProperties() []*Property {
	if m != nil {
		return m.Properties
	}
	return nil
}

//profile各點厚度
type RubberHeights struct {
	HeightPoints []*Points `protobuf:"bytes,1,rep,name=height_points,json=heightPoints,proto3" json:"height_points,omitempty" bson:"heightPoints"`
	Unit         string    `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty" bson:"unit"`
}

func (m *RubberHeights) Reset()         { *m = RubberHeights{} }
func (m *RubberHeights) String() string { return proto.CompactTextString(m) }
func (*RubberHeights) ProtoMessage()    {}
func (*RubberHeights) Descriptor() ([]byte, []int) {
	return fileDescriptor_770b44aaaf97aee8, []int{1}
}
func (m *RubberHeights) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RubberHeights.Unmarshal(m, b)
}
func (m *RubberHeights) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RubberHeights.Marshal(b, m, deterministic)
}
func (m *RubberHeights) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RubberHeights.Merge(m, src)
}
func (m *RubberHeights) XXX_Size() int {
	return xxx_messageInfo_RubberHeights.Size(m)
}
func (m *RubberHeights) XXX_DiscardUnknown() {
	xxx_messageInfo_RubberHeights.DiscardUnknown(m)
}

var xxx_messageInfo_RubberHeights proto.InternalMessageInfo

func (m *RubberHeights) GetHeightPoints() []*Points {
	if m != nil {
		return m.HeightPoints
	}
	return nil
}

func (m *RubberHeights) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

//profile各點寬度
type Widths struct {
	WidthPoints []*Points `protobuf:"bytes,1,rep,name=width_points,json=widthPoints,proto3" json:"width_points,omitempty" bson:"widthPoints"`
	Unit        string    `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty" bson:"unit"`
}

func (m *Widths) Reset()         { *m = Widths{} }
func (m *Widths) String() string { return proto.CompactTextString(m) }
func (*Widths) ProtoMessage()    {}
func (*Widths) Descriptor() ([]byte, []int) {
	return fileDescriptor_770b44aaaf97aee8, []int{2}
}
func (m *Widths) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Widths.Unmarshal(m, b)
}
func (m *Widths) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Widths.Marshal(b, m, deterministic)
}
func (m *Widths) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Widths.Merge(m, src)
}
func (m *Widths) XXX_Size() int {
	return xxx_messageInfo_Widths.Size(m)
}
func (m *Widths) XXX_DiscardUnknown() {
	xxx_messageInfo_Widths.DiscardUnknown(m)
}

var xxx_messageInfo_Widths proto.InternalMessageInfo

func (m *Widths) GetWidthPoints() []*Points {
	if m != nil {
		return m.WidthPoints
	}
	return nil
}

func (m *Widths) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

type Points struct {
	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty" bson:"value"`
}

func (m *Points) Reset()         { *m = Points{} }
func (m *Points) String() string { return proto.CompactTextString(m) }
func (*Points) ProtoMessage()    {}
func (*Points) Descriptor() ([]byte, []int) {
	return fileDescriptor_770b44aaaf97aee8, []int{3}
}
func (m *Points) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Points.Unmarshal(m, b)
}
func (m *Points) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Points.Marshal(b, m, deterministic)
}
func (m *Points) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Points.Merge(m, src)
}
func (m *Points) XXX_Size() int {
	return xxx_messageInfo_Points.Size(m)
}
func (m *Points) XXX_DiscardUnknown() {
	xxx_messageInfo_Points.DiscardUnknown(m)
}

var xxx_messageInfo_Points proto.InternalMessageInfo

func (m *Points) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterEnum("proto.dm.rs.Profile_TireType", Profile_TireType_name, Profile_TireType_value)
	proto.RegisterEnum("proto.dm.rs.Profile_Rate", Profile_Rate_name, Profile_Rate_value)
	proto.RegisterEnum("proto.dm.rs.Profile_ProfileType", Profile_ProfileType_name, Profile_ProfileType_value)
	proto.RegisterType((*Profile)(nil), "proto.dm.rs.Profile")
	proto.RegisterType((*RubberHeights)(nil), "proto.dm.rs.RubberHeights")
	proto.RegisterType((*Widths)(nil), "proto.dm.rs.Widths")
	proto.RegisterType((*Points)(nil), "proto.dm.rs.Points")
}

func init() { proto.RegisterFile("tire_profile.proto", fileDescriptor_770b44aaaf97aee8) }

var fileDescriptor_770b44aaaf97aee8 = []byte{
	// 831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4f, 0x6f, 0xa3, 0x46,
	0x1c, 0x0d, 0x8e, 0xe3, 0x3f, 0x3f, 0x1c, 0x87, 0x9d, 0x24, 0xbb, 0x6c, 0xd4, 0x15, 0xd6, 0x54,
	0xaa, 0x72, 0xc2, 0x55, 0x7a, 0xa8, 0x76, 0x2b, 0xad, 0x0a, 0x0e, 0xde, 0x20, 0x59, 0x8e, 0x3b,
	0x76, 0xd6, 0xda, 0xf6, 0x80, 0x6c, 0x33, 0xeb, 0xa0, 0xda, 0x80, 0x00, 0x67, 0x95, 0xcf, 0xd0,
	0x4b, 0x2f, 0x95, 0x7a, 0xed, 0x7e, 0xa2, 0x9e, 0x7b, 0x40, 0xfd, 0x0c, 0x7c, 0x82, 0x6a, 0x66,
	0x20, 0x82, 0x28, 0x87, 0x6a, 0x4f, 0xcc, 0xbc, 0xf7, 0x7b, 0x6f, 0xde, 0x6f, 0x98, 0x01, 0x40,
	0x89, 0x17, 0x51, 0x27, 0x8c, 0x82, 0x8f, 0xde, 0x86, 0xea, 0x61, 0x14, 0x24, 0x01, 0x92, 0xf9,
	0x43, 0x77, 0xb7, 0x7a, 0x14, 0x9f, 0x9d, 0xac, 0x83, 0x75, 0xc0, 0x81, 0x3e, 0x1b, 0x89, 0x92,
	0xb3, 0x17, 0x02, 0x71, 0xb7, 0xfd, 0x28, 0xee, 0x53, 0x7f, 0xb7, 0x8d, 0x73, 0x42, 0x2d, 0x13,
	0x11, 0x5d, 0x79, 0x61, 0xee, 0x8a, 0xff, 0x6d, 0x41, 0x73, 0x22, 0xd6, 0x41, 0xaf, 0xa0, 0xe6,
	0xb9, 0xaa, 0xd4, 0x93, 0xce, 0xdb, 0xe6, 0x61, 0x96, 0x6a, 0xed, 0x65, 0x1c, 0xf8, 0x6f, 0xb0,
	0xe7, 0x62, 0x52, 0xf3, 0x5c, 0x74, 0x09, 0xcd, 0x8f, 0x8b, 0x55, 0x12, 0x44, 0xf7, 0x6a, 0xad,
	0x27, 0x9d, 0x77, 0x2f, 0x9e, 0xeb, 0xa5, 0x48, 0xfa, 0x50, 0x70, 0xf6, 0xa5, 0x89, 0xb2, 0x54,
	0xeb, 0x0a, 0x6d, 0x2e, 0xc0, 0xa4, 0x90, 0xa2, 0x6b, 0x68, 0xf3, 0xe6, 0x92, 0xfb, 0x90, 0xaa,
	0xfb, 0xdc, 0xe7, 0x55, 0xc5, 0x27, 0x4f, 0xa3, 0xcf, 0xbc, 0x88, 0xce, 0xee, 0x43, 0x6a, 0x1e,
	0x67, 0xa9, 0x76, 0x24, 0xec, 0x92, 0x1c, 0xc3, 0xa4, 0x55, 0x0c, 0xd1, 0x6b, 0xe8, 0x84, 0x51,
	0xe0, 0xee, 0x56, 0x89, 0xf0, 0xac, 0xf3, 0xfc, 0xcf, 0xb3, 0x54, 0x43, 0x42, 0x94, 0xb3, 0x42,
	0x27, 0x97, 0x66, 0xe8, 0x5b, 0x68, 0x6f, 0x83, 0x8d, 0x2b, 0x74, 0x07, 0x5c, 0x57, 0x5a, 0x8c,
	0x51, 0xf9, 0x62, 0xc5, 0x10, 0x99, 0xd0, 0xbc, 0xa3, 0x51, 0xec, 0x05, 0xbe, 0xda, 0xe8, 0x49,
	0xe7, 0xf2, 0xc5, 0x49, 0x25, 0xfb, 0x7b, 0xc1, 0x95, 0x77, 0x20, 0x2f, 0xc7, 0xa4, 0x10, 0xa2,
	0xb7, 0x50, 0x8f, 0x16, 0x09, 0x55, 0x9b, 0xbc, 0xf9, 0x97, 0x4f, 0x36, 0x4f, 0x16, 0x09, 0x35,
	0x8f, 0xb2, 0x54, 0x93, 0x85, 0x0b, 0x13, 0x60, 0xc2, 0x75, 0xe8, 0x17, 0xde, 0x30, 0x2b, 0x13,
	0xc1, 0x5b, 0xdc, 0xa7, 0xf7, 0xa4, 0x4f, 0xfe, 0xe4, 0xfb, 0x58, 0xdd, 0x92, 0x02, 0x16, 0x5b,
	0x52, 0xcc, 0xd0, 0x35, 0x40, 0xb4, 0x5b, 0x3a, 0xb7, 0xd4, 0x5b, 0xdf, 0x26, 0x6a, 0xbb, 0xb7,
	0x7f, 0x2e, 0x5f, 0x9c, 0x55, 0xac, 0xc9, 0x6e, 0xb9, 0xa4, 0xd1, 0x15, 0x2f, 0x88, 0xcd, 0x93,
	0x2c, 0xd5, 0x94, 0x3c, 0xe3, 0x6e, 0x29, 0x50, 0x4c, 0xda, 0x0f, 0x63, 0xf4, 0x03, 0x1c, 0x7c,
	0xf2, 0xdc, 0xe4, 0x56, 0x05, 0xee, 0x75, 0x5c, 0xf1, 0x9a, 0x33, 0x26, 0x36, 0x95, 0x2c, 0xd5,
	0x3a, 0xc2, 0x84, 0xd7, 0x62, 0x22, 0x34, 0x68, 0x04, 0x10, 0x46, 0x41, 0x48, 0xa3, 0xc4, 0xa3,
	0xb1, 0x2a, 0x73, 0x87, 0xd3, 0xc7, 0x8d, 0x32, 0xfa, 0xde, 0x3c, 0xcd, 0x52, 0xed, 0xd9, 0x43,
	0x77, 0xb9, 0x04, 0x93, 0x92, 0x1e, 0x5f, 0x41, 0xab, 0x38, 0x54, 0xe8, 0x25, 0x9c, 0xce, 0x6c,
	0x62, 0x39, 0xb3, 0x0f, 0x13, 0xcb, 0xb9, 0x19, 0x4f, 0x27, 0xd6, 0xc0, 0x1e, 0xda, 0xd6, 0xa5,
	0xb2, 0x87, 0x00, 0x1a, 0xc4, 0xb8, 0xb4, 0x8d, 0x91, 0x22, 0xa1, 0x16, 0xd4, 0x4d, 0xdb, 0x98,
	0x2a, 0x35, 0x24, 0x43, 0xd3, 0xb4, 0x07, 0x1f, 0x06, 0x23, 0x4b, 0xd9, 0xc7, 0x3f, 0x42, 0x9d,
	0xbd, 0x21, 0x74, 0x02, 0x0a, 0x31, 0x66, 0x8f, 0x0d, 0x14, 0xe8, 0x0c, 0x6f, 0x46, 0x23, 0x67,
	0x42, 0xae, 0x87, 0xf6, 0xc8, 0x52, 0x24, 0x86, 0x5c, 0x19, 0xa3, 0xe1, 0x03, 0x52, 0xc3, 0xff,
	0x48, 0x20, 0x97, 0x5e, 0x0e, 0xfa, 0x0a, 0xd4, 0x9c, 0x7c, 0x2a, 0x12, 0x82, 0xee, 0xc0, 0x98,
	0x38, 0x73, 0x7b, 0xfc, 0xce, 0x19, 0x3b, 0x37, 0xb3, 0x81, 0x22, 0xa1, 0x53, 0x78, 0xf6, 0x80,
	0x99, 0xc6, 0xd4, 0xe2, 0x70, 0x0d, 0x1d, 0x81, 0xcc, 0xe0, 0x71, 0x5e, 0xb7, 0x8f, 0xba, 0x00,
	0x9c, 0x66, 0xc8, 0x58, 0xa9, 0xb3, 0x82, 0xe9, 0xdc, 0x79, 0x37, 0xc8, 0x01, 0x99, 0x99, 0x0b,
	0xa0, 0x28, 0x53, 0x3a, 0xac, 0xb1, 0x0a, 0x36, 0x30, 0x26, 0xca, 0x21, 0x5b, 0x52, 0xa0, 0xf3,
	0xe9, 0x9c, 0x81, 0xd7, 0xef, 0x2d, 0xa2, 0x74, 0xcb, 0x4b, 0x32, 0xf5, 0xd1, 0x9b, 0xce, 0xdf,
	0x7f, 0x69, 0x7b, 0xbf, 0x7f, 0xd6, 0xf6, 0xfe, 0xfc, 0xac, 0xed, 0xe1, 0x3f, 0x24, 0x38, 0xac,
	0x1c, 0x1a, 0xf4, 0x13, 0x1c, 0x8a, 0x03, 0xe6, 0x84, 0x81, 0xe7, 0x27, 0xb1, 0x2a, 0x3d, 0x71,
	0x36, 0x26, 0x9c, 0x32, 0x5f, 0x64, 0xa9, 0x76, 0x2c, 0xde, 0xab, 0xd0, 0x08, 0x1c, 0x93, 0x4e,
	0x79, 0x8a, 0xbe, 0x86, 0xfa, 0xce, 0xf7, 0x12, 0xfe, 0x65, 0x6a, 0x97, 0x6f, 0x0e, 0x43, 0x31,
	0xe1, 0xe4, 0xa3, 0x5c, 0xbf, 0x49, 0xd0, 0x10, 0x07, 0x10, 0x8d, 0xa1, 0xc3, 0x0f, 0xdc, 0xff,
	0xc8, 0x53, 0xba, 0x45, 0x5c, 0x52, 0xc4, 0x91, 0x4b, 0xb3, 0x2f, 0x49, 0xf3, 0x16, 0x1a, 0xb9,
	0xf8, 0x1b, 0x38, 0xb8, 0x5b, 0x6c, 0x76, 0x94, 0x7f, 0x89, 0x6b, 0xe5, 0xcb, 0xc1, 0x61, 0x4c,
	0x04, 0x5d, 0xd5, 0x9b, 0xaf, 0x7f, 0xfe, 0x7e, 0xed, 0x25, 0x9b, 0xc5, 0x52, 0xff, 0x95, 0xfa,
	0xee, 0x42, 0x5f, 0x05, 0x5b, 0x3d, 0xf9, 0xd4, 0xe7, 0x93, 0xfe, 0x2a, 0xd8, 0x6e, 0x03, 0x3f,
	0xee, 0xdf, 0x5d, 0xf4, 0x8b, 0x9f, 0xc6, 0x66, 0xe1, 0xaf, 0xc5, 0x0f, 0x61, 0xd9, 0xe0, 0xd8,
	0x77, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x95, 0x82, 0x6e, 0xaf, 0x76, 0x06, 0x00, 0x00,
}
