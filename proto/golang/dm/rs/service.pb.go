// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package rs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	recipe "gitlab.kenda.com.tw/kenda/commons/v2/proto/golang/mes/v2/recipe"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 1338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcb, 0x6e, 0xdc, 0x36,
	0x14, 0xc5, 0x0c, 0xd0, 0xa6, 0x51, 0xec, 0x26, 0xa6, 0x1d, 0x3b, 0x1e, 0xbf, 0x65, 0x3b, 0x71,
	0x8d, 0x40, 0x02, 0xdc, 0x45, 0xd1, 0x2c, 0x8a, 0x38, 0x19, 0x67, 0x30, 0x40, 0xdc, 0x0e, 0xec,
	0x69, 0x16, 0xde, 0x14, 0xb2, 0x44, 0x8f, 0x85, 0xe8, 0x15, 0x92, 0xe3, 0xc4, 0x71, 0x8d, 0x02,
	0x59, 0x14, 0x28, 0xd0, 0xc7, 0x22, 0x8b, 0x02, 0xfd, 0x87, 0xfe, 0x42, 0x7f, 0xa2, 0xbf, 0x50,
	0xa0, 0xdb, 0xee, 0xba, 0x2d, 0x78, 0x29, 0x72, 0xf4, 0xa0, 0x34, 0x2e, 0x92, 0x8d, 0xe5, 0xd1,
	0x39, 0xe4, 0x39, 0xba, 0xbc, 0xf7, 0x92, 0x92, 0x31, 0x49, 0x31, 0x39, 0xf3, 0x5d, 0x6c, 0x25,
	0x24, 0x66, 0x31, 0xba, 0x01, 0x17, 0xcb, 0x0b, 0x2d, 0x42, 0x5b, 0x8b, 0x83, 0x38, 0x1e, 0x04,
	0xd8, 0x76, 0x12, 0xdf, 0x76, 0xa2, 0x28, 0x66, 0x0e, 0xf3, 0xe3, 0x88, 0x0a, 0x6a, 0x6b, 0x21,
	0x45, 0xe1, 0xd7, 0xf1, 0xf0, 0xc4, 0xc6, 0x61, 0xc2, 0xce, 0x53, 0xb0, 0x05, 0x17, 0xdb, 0x0b,
	0x6d, 0x42, 0xed, 0xd0, 0x61, 0x98, 0xf8, 0x4e, 0x90, 0x62, 0xf3, 0x59, 0x2c, 0x21, 0xb1, 0x8b,
	0x29, 0xd5, 0x0d, 0x4b, 0x48, 0x9c, 0x60, 0xa2, 0xa6, 0xbc, 0x93, 0xc5, 0x08, 0x76, 0xfd, 0x24,
	0x35, 0xdd, 0x5a, 0x2a, 0x23, 0xdf, 0x78, 0xc3, 0x30, 0xa9, 0x81, 0xfd, 0xe8, 0x24, 0x96, 0xcf,
	0x91, 0x85, 0x69, 0x82, 0xdd, 0x2c, 0xb8, 0x92, 0x05, 0x19, 0xf1, 0xc3, 0x22, 0x21, 0x37, 0xfa,
	0x84, 0x60, 0x7a, 0x1a, 0x8d, 0x1e, 0x67, 0x55, 0x80, 0x21, 0xa6, 0xf6, 0xd9, 0x4e, 0x2a, 0x9d,
	0xb3, 0xbe, 0xf3, 0xfb, 0xba, 0xd1, 0x3c, 0x38, 0x44, 0x6f, 0x1a, 0x06, 0x7a, 0x7c, 0x8a, 0xdd,
	0xe7, 0x3d, 0x11, 0x8e, 0xbd, 0x57, 0x3e, 0x65, 0x14, 0xad, 0x5b, 0x99, 0xe5, 0xb0, 0x14, 0x41,
	0xa0, 0x07, 0xf8, 0xc5, 0x10, 0x53, 0xd6, 0x5a, 0xab, 0x27, 0x25, 0xc1, 0xb9, 0xb9, 0xf1, 0xe6,
	0xcf, 0xbf, 0xde, 0x36, 0x97, 0xcd, 0x79, 0xe9, 0x21, 0xc9, 0xca, 0xd8, 0x03, 0xcc, 0x1e, 0x34,
	0xb6, 0xd1, 0x8f, 0x0d, 0x03, 0x75, 0x30, 0x3b, 0x00, 0xca, 0x7e, 0xba, 0x66, 0x14, 0xdd, 0xcd,
	0xcd, 0x5f, 0x26, 0x48, 0x1f, 0x1b, 0x63, 0x79, 0xdc, 0xca, 0x16, 0x58, 0x31, 0xcd, 0xa5, 0x82,
	0x15, 0x95, 0x24, 0xca, 0xce, 0xaf, 0x0d, 0xe3, 0xb6, 0x9a, 0x65, 0x37, 0x08, 0x46, 0x8e, 0x3e,
	0xd1, 0x2b, 0x65, 0x39, 0xd2, 0xd4, 0xbd, 0xab, 0x50, 0xb9, 0xaf, 0x6d, 0xf0, 0xb5, 0x61, 0xae,
	0x14, 0x7c, 0x61, 0x8d, 0xb3, 0x33, 0x63, 0xb2, 0x83, 0xd9, 0x63, 0x46, 0x82, 0x9e, 0x43, 0x9c,
	0x90, 0xa2, 0xb5, 0xa2, 0xca, 0x08, 0x93, 0x46, 0x56, 0xea, 0x28, 0xdc, 0xc0, 0x1a, 0x18, 0x58,
	0x30, 0x67, 0xa5, 0x01, 0x57, 0x11, 0xa4, 0xee, 0x29, 0xe8, 0xee, 0x63, 0x87, 0x56, 0xe9, 0x8e,
	0x30, 0xa9, 0x3b, 0x95, 0xa3, 0x1c, 0x32, 0x9c, 0x94, 0x95, 0x42, 0x35, 0x4a, 0x2a, 0x45, 0xc6,
	0x8d, 0x0e, 0x66, 0x3d, 0x12, 0x7b, 0xfd, 0xf3, 0x04, 0xa3, 0x92, 0x79, 0x89, 0x48, 0x95, 0xa5,
	0x6a, 0x02, 0x7f, 0xb6, 0x15, 0x50, 0x9c, 0x37, 0x67, 0x32, 0xc1, 0x05, 0x58, 0xea, 0x9d, 0x18,
	0xd7, 0xd3, 0x41, 0xdd, 0x36, 0xd2, 0x4e, 0xd6, 0x6d, 0x4b, 0xad, 0x85, 0x2a, 0x98, 0x2b, 0x2d,
	0x81, 0xd2, 0x9c, 0x89, 0xb2, 0x4a, 0xdd, 0xb6, 0xd4, 0x79, 0x6d, 0x4c, 0x77, 0x30, 0xdb, 0x0d,
	0x82, 0x67, 0x98, 0x50, 0x3f, 0x8e, 0xde, 0x83, 0xe2, 0x3d, 0x50, 0x5c, 0x33, 0x17, 0xa5, 0xa2,
	0x53, 0x98, 0x3d, 0x9f, 0x35, 0xfb, 0x7c, 0x55, 0x85, 0x6a, 0x79, 0xf5, 0x14, 0x56, 0x99, 0x35,
	0x59, 0x8a, 0x36, 0x6b, 0x42, 0x45, 0x90, 0xba, 0xc4, 0x98, 0x10, 0x96, 0xdd, 0x2f, 0x9d, 0x10,
	0x53, 0xb4, 0xaa, 0x79, 0x1a, 0x01, 0x49, 0xd5, 0xe5, 0x1a, 0x06, 0x17, 0x5d, 0x05, 0xd1, 0x96,
	0x79, 0x3b, 0x5b, 0x2b, 0x80, 0x97, 0xf2, 0x07, 0x6e, 0x6b, 0xf3, 0x07, 0x90, 0xba, 0xfc, 0x49,
	0x09, 0x55, 0xf9, 0x03, 0xb0, 0xd4, 0xfb, 0xa9, 0xd0, 0x2b, 0x7a, 0xb2, 0x78, 0x6b, 0x7a, 0x85,
	0xe2, 0x8c, 0xef, 0x15, 0x19, 0x6a, 0xe5, 0xf3, 0x8b, 0x5e, 0x91, 0xfa, 0x79, 0x69, 0x7c, 0xdc,
	0xc1, 0x6c, 0xef, 0x45, 0x02, 0xa9, 0x32, 0x74, 0x19, 0x32, 0x8b, 0x93, 0x67, 0x40, 0x69, 0x60,
	0xb5, 0x96, 0x53, 0x59, 0x48, 0x43, 0x97, 0x69, 0x02, 0xcf, 0xc7, 0xea, 0x03, 0xcf, 0x91, 0xda,
	0xc0, 0x0b, 0x42, 0x65, 0xe0, 0x39, 0x2c, 0xf5, 0xbe, 0x6f, 0x18, 0x53, 0x2a, 0x52, 0xaa, 0x5f,
	0x6c, 0xea, 0x23, 0x59, 0xec, 0x1a, 0xeb, 0xe3, 0x68, 0xdc, 0xc2, 0x26, 0x58, 0x58, 0x31, 0x5b,
	0xf9, 0xfd, 0xb3, 0x57, 0xe8, 0x20, 0xdf, 0x19, 0x37, 0x53, 0xf7, 0x98, 0x52, 0xde, 0xe6, 0x8a,
	0xbb, 0x67, 0x01, 0xd5, 0xef, 0x9e, 0x25, 0x52, 0xdd, 0xee, 0x69, 0x53, 0xce, 0xd1, 0x1a, 0xe8,
	0xc7, 0x71, 0x50, 0x6d, 0x00, 0xd0, 0x71, 0x06, 0x52, 0x52, 0xad, 0x01, 0xc6, 0x39, 0xd2, 0xc0,
	0x0f, 0x0d, 0x68, 0x6e, 0x2a, 0x69, 0xdb, 0x98, 0x39, 0x7e, 0x40, 0x51, 0x75, 0x5a, 0xa7, 0x0c,
	0xe9, 0x64, 0x73, 0x3c, 0x91, 0xbb, 0x31, 0xc1, 0xcd, 0xa2, 0x39, 0x97, 0x69, 0x78, 0xb6, 0x27,
	0x18, 0xd2, 0xcb, 0x2f, 0x0d, 0x63, 0xa6, 0x1b, 0x51, 0x4c, 0xd8, 0x57, 0xe4, 0xeb, 0xc4, 0x73,
	0x18, 0x16, 0x73, 0xa1, 0xad, 0x9c, 0x86, 0x8e, 0x22, 0xdd, 0xdc, 0xbd, 0x02, 0x53, 0x9b, 0x1f,
	0x7e, 0x8e, 0x6a, 0x3b, 0x9e, 0xc7, 0x1d, 0xfd, 0xdc, 0x30, 0xa6, 0xc5, 0x9d, 0x5d, 0x97, 0xf9,
	0x67, 0x38, 0x6d, 0xd1, 0x85, 0xe8, 0x68, 0x18, 0xfa, 0xe8, 0x68, 0x89, 0xfa, 0xed, 0x20, 0xcb,
	0xb1, 0x87, 0x30, 0x8e, 0x1b, 0xfa, 0xd6, 0xb8, 0xd5, 0xc1, 0xec, 0x30, 0xc1, 0xee, 0xe8, 0x60,
	0x53, 0x3a, 0x42, 0xe5, 0x60, 0xe9, 0xc4, 0x1c, 0xc3, 0xe2, 0x36, 0x96, 0xc1, 0xc6, 0x1d, 0x73,
	0x1a, 0x4e, 0xb4, 0xe5, 0x23, 0x0c, 0x11, 0xd9, 0xea, 0x10, 0x1c, 0xc1, 0xf0, 0xae, 0xa7, 0xc9,
	0xd6, 0x0c, 0x5a, 0x9d, 0xad, 0x39, 0x12, 0x97, 0x9e, 0x03, 0xe9, 0x29, 0x73, 0x42, 0x48, 0xfb,
	0x9e, 0xd4, 0x7c, 0x05, 0x9a, 0x9c, 0xca, 0x8b, 0xf7, 0xa9, 0x4f, 0x59, 0x59, 0x33, 0x8b, 0x56,
	0x6a, 0xe6, 0x49, 0xf9, 0x6d, 0x1f, 0x34, 0x8b, 0x5d, 0xf1, 0x75, 0x56, 0x19, 0xde, 0x29, 0x2a,
	0x95, 0x01, 0x1d, 0xa7, 0x9c, 0x92, 0xf2, 0x1d, 0x52, 0x2a, 0x73, 0xd0, 0xc7, 0xd9, 0x53, 0xf5,
	0x4c, 0x07, 0xb3, 0x3e, 0xf1, 0xc3, 0xfc, 0x62, 0x6f, 0x15, 0x27, 0x2f, 0x51, 0xf4, 0xa5, 0xa0,
	0x67, 0xe6, 0x2b, 0x53, 0xbe, 0xa9, 0x94, 0x17, 0x3e, 0x81, 0x0d, 0x42, 0x14, 0x50, 0xd7, 0x2b,
	0x6f, 0x10, 0x12, 0xa9, 0xdc, 0x20, 0x46, 0x84, 0xfc, 0xf9, 0x43, 0x49, 0x92, 0x94, 0x90, 0x39,
	0xc7, 0xcf, 0xe6, 0xcb, 0xb7, 0x9f, 0x52, 0xd1, 0x76, 0x4d, 0x8d, 0x4b, 0x92, 0x34, 0xb2, 0x75,
	0x25, 0x6e, 0xbe, 0x04, 0x95, 0x27, 0x7d, 0x4f, 0x10, 0x27, 0xa3, 0x27, 0xf2, 0xa5, 0xad, 0x7c,
	0x32, 0x52, 0x50, 0xf1, 0x64, 0x14, 0x62, 0x6a, 0x9d, 0xed, 0x58, 0xe9, 0xab, 0x9c, 0xa2, 0x95,
	0x4f, 0x06, 0xea, 0x8d, 0x50, 0x46, 0xe3, 0xef, 0xa6, 0x61, 0x88, 0xbc, 0x85, 0x7e, 0x98, 0x3f,
	0x6a, 0x8d, 0x00, 0x29, 0xb8, 0x58, 0x89, 0xf3, 0x27, 0xfd, 0xad, 0x09, 0x7a, 0x6f, 0x9b, 0xe8,
	0xa6, 0xea, 0x7e, 0x9e, 0x7d, 0xd1, 0x6d, 0x5f, 0x1e, 0xcd, 0x21, 0xe5, 0x01, 0x22, 0x70, 0xc1,
	0xff, 0x72, 0x60, 0x01, 0xa9, 0x6d, 0xe4, 0xc4, 0x71, 0x59, 0x4c, 0xce, 0xed, 0x8b, 0xf4, 0x9f,
	0xcb, 0x23, 0x0b, 0xdd, 0xaf, 0x04, 0x6d, 0xc6, 0xb7, 0xdb, 0x8b, 0xb4, 0xb6, 0xf8, 0xde, 0x7b,
	0x79, 0xf4, 0x08, 0x3d, 0xfc, 0x3f, 0x7c, 0x59, 0x98, 0xea, 0x2e, 0x37, 0xf4, 0x0c, 0xf5, 0xdf,
	0x75, 0x0e, 0x9b, 0x32, 0x67, 0x80, 0xed, 0x0b, 0xb8, 0x1c, 0x32, 0x87, 0x0d, 0xe9, 0x25, 0x7a,
	0x6a, 0x5c, 0xef, 0x0d, 0x65, 0x9c, 0xa7, 0x73, 0x71, 0x14, 0x37, 0x5b, 0xb3, 0x96, 0xf8, 0x84,
	0x61, 0xc9, 0x4f, 0x18, 0xd6, 0x5e, 0x98, 0xb0, 0x73, 0x13, 0x41, 0x54, 0x27, 0x5a, 0xd7, 0x52,
	0x5f, 0xaa, 0x5d, 0x47, 0x98, 0xa8, 0xdd, 0xa7, 0xdb, 0x2e, 0xb5, 0xeb, 0x3c, 0x5c, 0xd5, 0xae,
	0x8b, 0xac, 0x7c, 0xbb, 0x1e, 0x2d, 0xe3, 0x20, 0x65, 0x72, 0xf5, 0x3f, 0x9a, 0xc6, 0x47, 0x7c,
	0xf1, 0x79, 0xd1, 0xa3, 0x72, 0x4e, 0x1c, 0x66, 0xea, 0xa4, 0x55, 0x81, 0x72, 0x99, 0x7f, 0x1b,
	0xa0, 0xf3, 0x4f, 0x03, 0x4d, 0xaa, 0xe6, 0x0c, 0xd9, 0x32, 0x8f, 0xe6, 0xc4, 0x8d, 0x72, 0x4a,
	0xdc, 0x47, 0xdb, 0x15, 0x90, 0x2e, 0x21, 0x1e, 0xa2, 0x2f, 0xae, 0xce, 0xd6, 0xa6, 0x43, 0x1f,
	0x1d, 0xbc, 0xdb, 0x0c, 0xda, 0x64, 0x78, 0x62, 0x5c, 0xeb, 0x0d, 0x45, 0xf8, 0x0a, 0x6f, 0xc4,
	0x09, 0x76, 0x2b, 0x13, 0xe1, 0x16, 0x84, 0xcb, 0x68, 0x7d, 0x00, 0x8e, 0x1e, 0x34, 0xb6, 0x1f,
	0x7d, 0x7e, 0xf4, 0xd9, 0xc0, 0x67, 0x81, 0x73, 0x6c, 0x3d, 0xc7, 0x91, 0xe7, 0x58, 0x6e, 0x1c,
	0x5a, 0xec, 0xa5, 0x0d, 0x3f, 0x6c, 0x37, 0x0e, 0xc3, 0x38, 0x82, 0x6f, 0x3d, 0xe2, 0xc3, 0xcf,
	0x20, 0x0e, 0x9c, 0x68, 0x20, 0x3e, 0x0e, 0x1d, 0x7f, 0x08, 0xf7, 0x3e, 0xfd, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0x71, 0x7e, 0x38, 0xf1, 0x72, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RSClient is the client API for RS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RSClient interface {
	// ～*～*～*～*～*～　Recipe 配合表　～*～*～*～*～*～　//
	// CheckProcessExists 確認產品代號是否存在.
	CheckProcessExists(ctx context.Context, in *CheckProcExistsRequest, opts ...grpc.CallOption) (*CheckProcExistsReply, error)
	// GetRecipeMaterials 取得指定配合表使用材料(指定階段).
	GetRecipeMaterials(ctx context.Context, in *GetRecipeMaterialsRequest, opts ...grpc.CallOption) (*GetRecipeMaterialsReply, error)
	// GetRecipeAllMaterials 取得指定配合表所有使用材料(計算重量用).
	GetRecipeAllMaterials(ctx context.Context, in *GetRecipeAllMaterialsRequest, opts ...grpc.CallOption) (*GetRecipeAllMaterialsReply, error)
	// GetCtrlParams 取得指定配合表之指定控制參數.
	GetCtrlParams(ctx context.Context, in *GetCtrlParamsRequest, opts ...grpc.CallOption) (*GetCtrlParamsReply, error)
	// GetMeasParams 取得指定配合表之指定量測參數.
	GetMeasParams(ctx context.Context, in *GetMeasParamsRequest, opts ...grpc.CallOption) (*Step, error)
	// GetProdType 取得該廠的產品類別.
	GetProdType(ctx context.Context, in *GetProdTypeRequest, opts ...grpc.CallOption) (*GetProdTypeReply, error)
	// GetProdID 取得該類別的產品ID(最新版).
	GetProdID(ctx context.Context, in *GetProdIDRequest, opts ...grpc.CallOption) (*GetProdIDReply, error)
	// GetAllVersionProdID 取得該類別的產品ID(全部版本).
	GetAllVersionProdID(ctx context.Context, in *GetProdIDRequest, opts ...grpc.CallOption) (*GetProdIDReply, error)
	// GetMtrlProdID 取得該類別的產品ID(材料庫清單).
	GetMtrlProdID(ctx context.Context, in *GetMtrlProdIDRequest, opts ...grpc.CallOption) (*GetMtrlProdIDReply, error)
	// GetProcNames 取得該製程所有的Process name(生產站).
	GetProcNames(ctx context.Context, in *GetProcNamesRequest, opts ...grpc.CallOption) (*GetProcNamesReply, error)
	// GetProcName 取得該Process name關聯的Process(取得上一筆或下一筆).
	GetProcName(ctx context.Context, in *GetProcNameRequest, opts ...grpc.CallOption) (*GetProcNameReply, error)
	// GetRecipeAllProcesses 取得該製程所有的Process name(全部).
	GetRecipeAllProcesses(ctx context.Context, in *GetRecipeAllProcessesRequest, opts ...grpc.CallOption) (*GetRecipeAllProcessesReply, error)
	// GetEqptProduct 取得機台對應的所有ProcessName集合.
	GetEqptProduct(ctx context.Context, in *GetEqptProductRequest, opts ...grpc.CallOption) (*GetEqptProductReply, error)
	// GetProcEqpt 取得ProcessName對應的所有機台集合.
	GetProcEqpt(ctx context.Context, in *GetProcEqptRequest, opts ...grpc.CallOption) (*GetProcEqptReply, error)
	// GetRecipeProdType 取得該產品的生產類別.
	GetRecipeProdType(ctx context.Context, in *GetRecipeProdTypeRequest, opts ...grpc.CallOption) (*GetRecipeProdTypeReply, error)
	//取得階段Steps
	GetProcessSteps(ctx context.Context, in *GetProcessStepsRequest, opts ...grpc.CallOption) (*GetProcessStepsReply, error)
	//取得階段Tools
	GetProcessTools(ctx context.Context, in *GetProcessToolsRequest, opts ...grpc.CallOption) (*GetProcessToolsReply, error)
	//取得recipe資料表的所有資料
	GetRecipeAllDetails(ctx context.Context, in *GetRecipeAllDetailsRequest, opts ...grpc.CallOption) (*GetRecipeAllDetailsReply, error)
	//新增配合表資料
	InsertOrUpdateRecipe(ctx context.Context, in *InsertOrUpdateRecipeRequest, opts ...grpc.CallOption) (*InsertOrUpdateRecipeReply, error)
	// ～*～*～*～*～*～　ArouteActive 配合表最新版/月結版紀錄檔　～*～*～*～*～*～　//
	// UpdateActiveVersion 更新發行版本.
	UpdateActiveVersion(ctx context.Context, in *UpdateActiveVersionRequest, opts ...grpc.CallOption) (*UpdateActiveVersionReply, error)
	// ～*～*～*～*～*～　Spec　～*～*～*～*～*～　//
	//取得配方表的材料明細
	GetSpecMaterials(ctx context.Context, in *GetSpecMaterialsRequest, opts ...grpc.CallOption) (*GetSpecMaterialsReply, error)
	//取得來源spec ID
	GetParentSpecId(ctx context.Context, in *GetParentSpecIdRequest, opts ...grpc.CallOption) (*GetParentSpecIdReply, error)
	//取得配方表的產品清單(對應發布廠)
	GetSpecProdList(ctx context.Context, in *GetSpecProdListRequest, opts ...grpc.CallOption) (*GetSpecProdListReply, error)
	//取得配方表的物性
	GetSpecProperty(ctx context.Context, in *GetSpecPropertyRequest, opts ...grpc.CallOption) (*GetSpecPropertyReply, error)
	// ～*～*～*～*～*～　TrimSpec　微調配方表～*～*～*～*～*～　//
	//取得微調配方表的材料明細
	GetTrimSpecMaterials(ctx context.Context, in *GetTrimSpecMaterialsRequest, opts ...grpc.CallOption) (*GetTrimSpecMaterialsReply, error)
	//取得新增微調配方表的RecipeId (由程式依照固定格式產生)
	GetRecipeId(ctx context.Context, in *GetRecipeIdRequest, opts ...grpc.CallOption) (*GetRecipeIdReply, error)
	//新增微調配方表
	InsertOrUpdateTrimspec(ctx context.Context, in *InsertOrUpdateTrimspecRequest, opts ...grpc.CallOption) (*InsertOrUpdateTrimspecReply, error)
	// GetFreshness get freshness info since resource creation
	GetFreshness(ctx context.Context, in *GetFreshnessRequest, opts ...grpc.CallOption) (*recipe.Freshness, error)
	// 以下excel import/export用
	// ListRecipe get recipe by ID
	ListRecipe(ctx context.Context, in *ListRecipeRequest, opts ...grpc.CallOption) (*ListRecipeReply, error)
	// PutRecipe insert or replace recipe
	PutRecipe(ctx context.Context, in *Recipe, opts ...grpc.CallOption) (*empty.Empty, error)
	// GenerateRecipeID generate recipe ID
	GenerateRecipeID(ctx context.Context, in *GenerateRecipeIDRequest, opts ...grpc.CallOption) (*GenerateRecipeIDReply, error)
	// ListSpec get spec by ID
	ListSpec(ctx context.Context, in *ListSpecRequest, opts ...grpc.CallOption) (*ListSpecReply, error)
	// PutSpec insert or replace spec
	PutSpec(ctx context.Context, in *Spec, opts ...grpc.CallOption) (*empty.Empty, error)
}

type rSClient struct {
	cc *grpc.ClientConn
}

func NewRSClient(cc *grpc.ClientConn) RSClient {
	return &rSClient{cc}
}

func (c *rSClient) CheckProcessExists(ctx context.Context, in *CheckProcExistsRequest, opts ...grpc.CallOption) (*CheckProcExistsReply, error) {
	out := new(CheckProcExistsReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/CheckProcessExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetRecipeMaterials(ctx context.Context, in *GetRecipeMaterialsRequest, opts ...grpc.CallOption) (*GetRecipeMaterialsReply, error) {
	out := new(GetRecipeMaterialsReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetRecipeMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetRecipeAllMaterials(ctx context.Context, in *GetRecipeAllMaterialsRequest, opts ...grpc.CallOption) (*GetRecipeAllMaterialsReply, error) {
	out := new(GetRecipeAllMaterialsReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetRecipeAllMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetCtrlParams(ctx context.Context, in *GetCtrlParamsRequest, opts ...grpc.CallOption) (*GetCtrlParamsReply, error) {
	out := new(GetCtrlParamsReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetCtrlParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetMeasParams(ctx context.Context, in *GetMeasParamsRequest, opts ...grpc.CallOption) (*Step, error) {
	out := new(Step)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetMeasParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetProdType(ctx context.Context, in *GetProdTypeRequest, opts ...grpc.CallOption) (*GetProdTypeReply, error) {
	out := new(GetProdTypeReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetProdType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetProdID(ctx context.Context, in *GetProdIDRequest, opts ...grpc.CallOption) (*GetProdIDReply, error) {
	out := new(GetProdIDReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetProdID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetAllVersionProdID(ctx context.Context, in *GetProdIDRequest, opts ...grpc.CallOption) (*GetProdIDReply, error) {
	out := new(GetProdIDReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetAllVersionProdID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetMtrlProdID(ctx context.Context, in *GetMtrlProdIDRequest, opts ...grpc.CallOption) (*GetMtrlProdIDReply, error) {
	out := new(GetMtrlProdIDReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetMtrlProdID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetProcNames(ctx context.Context, in *GetProcNamesRequest, opts ...grpc.CallOption) (*GetProcNamesReply, error) {
	out := new(GetProcNamesReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetProcNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetProcName(ctx context.Context, in *GetProcNameRequest, opts ...grpc.CallOption) (*GetProcNameReply, error) {
	out := new(GetProcNameReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetProcName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetRecipeAllProcesses(ctx context.Context, in *GetRecipeAllProcessesRequest, opts ...grpc.CallOption) (*GetRecipeAllProcessesReply, error) {
	out := new(GetRecipeAllProcessesReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetRecipeAllProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetEqptProduct(ctx context.Context, in *GetEqptProductRequest, opts ...grpc.CallOption) (*GetEqptProductReply, error) {
	out := new(GetEqptProductReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetEqptProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetProcEqpt(ctx context.Context, in *GetProcEqptRequest, opts ...grpc.CallOption) (*GetProcEqptReply, error) {
	out := new(GetProcEqptReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetProcEqpt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetRecipeProdType(ctx context.Context, in *GetRecipeProdTypeRequest, opts ...grpc.CallOption) (*GetRecipeProdTypeReply, error) {
	out := new(GetRecipeProdTypeReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetRecipeProdType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetProcessSteps(ctx context.Context, in *GetProcessStepsRequest, opts ...grpc.CallOption) (*GetProcessStepsReply, error) {
	out := new(GetProcessStepsReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetProcessSteps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetProcessTools(ctx context.Context, in *GetProcessToolsRequest, opts ...grpc.CallOption) (*GetProcessToolsReply, error) {
	out := new(GetProcessToolsReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetProcessTools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetRecipeAllDetails(ctx context.Context, in *GetRecipeAllDetailsRequest, opts ...grpc.CallOption) (*GetRecipeAllDetailsReply, error) {
	out := new(GetRecipeAllDetailsReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetRecipeAllDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) InsertOrUpdateRecipe(ctx context.Context, in *InsertOrUpdateRecipeRequest, opts ...grpc.CallOption) (*InsertOrUpdateRecipeReply, error) {
	out := new(InsertOrUpdateRecipeReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/InsertOrUpdateRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) UpdateActiveVersion(ctx context.Context, in *UpdateActiveVersionRequest, opts ...grpc.CallOption) (*UpdateActiveVersionReply, error) {
	out := new(UpdateActiveVersionReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/UpdateActiveVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetSpecMaterials(ctx context.Context, in *GetSpecMaterialsRequest, opts ...grpc.CallOption) (*GetSpecMaterialsReply, error) {
	out := new(GetSpecMaterialsReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetSpecMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetParentSpecId(ctx context.Context, in *GetParentSpecIdRequest, opts ...grpc.CallOption) (*GetParentSpecIdReply, error) {
	out := new(GetParentSpecIdReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetParentSpecId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetSpecProdList(ctx context.Context, in *GetSpecProdListRequest, opts ...grpc.CallOption) (*GetSpecProdListReply, error) {
	out := new(GetSpecProdListReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetSpecProdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetSpecProperty(ctx context.Context, in *GetSpecPropertyRequest, opts ...grpc.CallOption) (*GetSpecPropertyReply, error) {
	out := new(GetSpecPropertyReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetSpecProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetTrimSpecMaterials(ctx context.Context, in *GetTrimSpecMaterialsRequest, opts ...grpc.CallOption) (*GetTrimSpecMaterialsReply, error) {
	out := new(GetTrimSpecMaterialsReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetTrimSpecMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetRecipeId(ctx context.Context, in *GetRecipeIdRequest, opts ...grpc.CallOption) (*GetRecipeIdReply, error) {
	out := new(GetRecipeIdReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetRecipeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) InsertOrUpdateTrimspec(ctx context.Context, in *InsertOrUpdateTrimspecRequest, opts ...grpc.CallOption) (*InsertOrUpdateTrimspecReply, error) {
	out := new(InsertOrUpdateTrimspecReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/InsertOrUpdateTrimspec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GetFreshness(ctx context.Context, in *GetFreshnessRequest, opts ...grpc.CallOption) (*recipe.Freshness, error) {
	out := new(recipe.Freshness)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GetFreshness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) ListRecipe(ctx context.Context, in *ListRecipeRequest, opts ...grpc.CallOption) (*ListRecipeReply, error) {
	out := new(ListRecipeReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/ListRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) PutRecipe(ctx context.Context, in *Recipe, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/PutRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) GenerateRecipeID(ctx context.Context, in *GenerateRecipeIDRequest, opts ...grpc.CallOption) (*GenerateRecipeIDReply, error) {
	out := new(GenerateRecipeIDReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/GenerateRecipeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) ListSpec(ctx context.Context, in *ListSpecRequest, opts ...grpc.CallOption) (*ListSpecReply, error) {
	out := new(ListSpecReply)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/ListSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rSClient) PutSpec(ctx context.Context, in *Spec, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.rs.RS/PutSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RSServer is the server API for RS service.
type RSServer interface {
	// ～*～*～*～*～*～　Recipe 配合表　～*～*～*～*～*～　//
	// CheckProcessExists 確認產品代號是否存在.
	CheckProcessExists(context.Context, *CheckProcExistsRequest) (*CheckProcExistsReply, error)
	// GetRecipeMaterials 取得指定配合表使用材料(指定階段).
	GetRecipeMaterials(context.Context, *GetRecipeMaterialsRequest) (*GetRecipeMaterialsReply, error)
	// GetRecipeAllMaterials 取得指定配合表所有使用材料(計算重量用).
	GetRecipeAllMaterials(context.Context, *GetRecipeAllMaterialsRequest) (*GetRecipeAllMaterialsReply, error)
	// GetCtrlParams 取得指定配合表之指定控制參數.
	GetCtrlParams(context.Context, *GetCtrlParamsRequest) (*GetCtrlParamsReply, error)
	// GetMeasParams 取得指定配合表之指定量測參數.
	GetMeasParams(context.Context, *GetMeasParamsRequest) (*Step, error)
	// GetProdType 取得該廠的產品類別.
	GetProdType(context.Context, *GetProdTypeRequest) (*GetProdTypeReply, error)
	// GetProdID 取得該類別的產品ID(最新版).
	GetProdID(context.Context, *GetProdIDRequest) (*GetProdIDReply, error)
	// GetAllVersionProdID 取得該類別的產品ID(全部版本).
	GetAllVersionProdID(context.Context, *GetProdIDRequest) (*GetProdIDReply, error)
	// GetMtrlProdID 取得該類別的產品ID(材料庫清單).
	GetMtrlProdID(context.Context, *GetMtrlProdIDRequest) (*GetMtrlProdIDReply, error)
	// GetProcNames 取得該製程所有的Process name(生產站).
	GetProcNames(context.Context, *GetProcNamesRequest) (*GetProcNamesReply, error)
	// GetProcName 取得該Process name關聯的Process(取得上一筆或下一筆).
	GetProcName(context.Context, *GetProcNameRequest) (*GetProcNameReply, error)
	// GetRecipeAllProcesses 取得該製程所有的Process name(全部).
	GetRecipeAllProcesses(context.Context, *GetRecipeAllProcessesRequest) (*GetRecipeAllProcessesReply, error)
	// GetEqptProduct 取得機台對應的所有ProcessName集合.
	GetEqptProduct(context.Context, *GetEqptProductRequest) (*GetEqptProductReply, error)
	// GetProcEqpt 取得ProcessName對應的所有機台集合.
	GetProcEqpt(context.Context, *GetProcEqptRequest) (*GetProcEqptReply, error)
	// GetRecipeProdType 取得該產品的生產類別.
	GetRecipeProdType(context.Context, *GetRecipeProdTypeRequest) (*GetRecipeProdTypeReply, error)
	//取得階段Steps
	GetProcessSteps(context.Context, *GetProcessStepsRequest) (*GetProcessStepsReply, error)
	//取得階段Tools
	GetProcessTools(context.Context, *GetProcessToolsRequest) (*GetProcessToolsReply, error)
	//取得recipe資料表的所有資料
	GetRecipeAllDetails(context.Context, *GetRecipeAllDetailsRequest) (*GetRecipeAllDetailsReply, error)
	//新增配合表資料
	InsertOrUpdateRecipe(context.Context, *InsertOrUpdateRecipeRequest) (*InsertOrUpdateRecipeReply, error)
	// ～*～*～*～*～*～　ArouteActive 配合表最新版/月結版紀錄檔　～*～*～*～*～*～　//
	// UpdateActiveVersion 更新發行版本.
	UpdateActiveVersion(context.Context, *UpdateActiveVersionRequest) (*UpdateActiveVersionReply, error)
	// ～*～*～*～*～*～　Spec　～*～*～*～*～*～　//
	//取得配方表的材料明細
	GetSpecMaterials(context.Context, *GetSpecMaterialsRequest) (*GetSpecMaterialsReply, error)
	//取得來源spec ID
	GetParentSpecId(context.Context, *GetParentSpecIdRequest) (*GetParentSpecIdReply, error)
	//取得配方表的產品清單(對應發布廠)
	GetSpecProdList(context.Context, *GetSpecProdListRequest) (*GetSpecProdListReply, error)
	//取得配方表的物性
	GetSpecProperty(context.Context, *GetSpecPropertyRequest) (*GetSpecPropertyReply, error)
	// ～*～*～*～*～*～　TrimSpec　微調配方表～*～*～*～*～*～　//
	//取得微調配方表的材料明細
	GetTrimSpecMaterials(context.Context, *GetTrimSpecMaterialsRequest) (*GetTrimSpecMaterialsReply, error)
	//取得新增微調配方表的RecipeId (由程式依照固定格式產生)
	GetRecipeId(context.Context, *GetRecipeIdRequest) (*GetRecipeIdReply, error)
	//新增微調配方表
	InsertOrUpdateTrimspec(context.Context, *InsertOrUpdateTrimspecRequest) (*InsertOrUpdateTrimspecReply, error)
	// GetFreshness get freshness info since resource creation
	GetFreshness(context.Context, *GetFreshnessRequest) (*recipe.Freshness, error)
	// 以下excel import/export用
	// ListRecipe get recipe by ID
	ListRecipe(context.Context, *ListRecipeRequest) (*ListRecipeReply, error)
	// PutRecipe insert or replace recipe
	PutRecipe(context.Context, *Recipe) (*empty.Empty, error)
	// GenerateRecipeID generate recipe ID
	GenerateRecipeID(context.Context, *GenerateRecipeIDRequest) (*GenerateRecipeIDReply, error)
	// ListSpec get spec by ID
	ListSpec(context.Context, *ListSpecRequest) (*ListSpecReply, error)
	// PutSpec insert or replace spec
	PutSpec(context.Context, *Spec) (*empty.Empty, error)
}

func RegisterRSServer(s *grpc.Server, srv RSServer) {
	s.RegisterService(&_RS_serviceDesc, srv)
}

func _RS_CheckProcessExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckProcExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).CheckProcessExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/CheckProcessExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).CheckProcessExists(ctx, req.(*CheckProcExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetRecipeMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetRecipeMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetRecipeMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetRecipeMaterials(ctx, req.(*GetRecipeMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetRecipeAllMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeAllMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetRecipeAllMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetRecipeAllMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetRecipeAllMaterials(ctx, req.(*GetRecipeAllMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetCtrlParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCtrlParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetCtrlParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetCtrlParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetCtrlParams(ctx, req.(*GetCtrlParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetMeasParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeasParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetMeasParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetMeasParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetMeasParams(ctx, req.(*GetMeasParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetProdType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProdTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetProdType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetProdType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetProdType(ctx, req.(*GetProdTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetProdID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProdIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetProdID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetProdID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetProdID(ctx, req.(*GetProdIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetAllVersionProdID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProdIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetAllVersionProdID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetAllVersionProdID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetAllVersionProdID(ctx, req.(*GetProdIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetMtrlProdID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMtrlProdIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetMtrlProdID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetMtrlProdID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetMtrlProdID(ctx, req.(*GetMtrlProdIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetProcNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetProcNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetProcNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetProcNames(ctx, req.(*GetProcNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetProcName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetProcName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetProcName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetProcName(ctx, req.(*GetProcNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetRecipeAllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeAllProcessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetRecipeAllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetRecipeAllProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetRecipeAllProcesses(ctx, req.(*GetRecipeAllProcessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetEqptProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEqptProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetEqptProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetEqptProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetEqptProduct(ctx, req.(*GetEqptProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetProcEqpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcEqptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetProcEqpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetProcEqpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetProcEqpt(ctx, req.(*GetProcEqptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetRecipeProdType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeProdTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetRecipeProdType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetRecipeProdType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetRecipeProdType(ctx, req.(*GetRecipeProdTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetProcessSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessStepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetProcessSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetProcessSteps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetProcessSteps(ctx, req.(*GetProcessStepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetProcessTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessToolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetProcessTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetProcessTools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetProcessTools(ctx, req.(*GetProcessToolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetRecipeAllDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeAllDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetRecipeAllDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetRecipeAllDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetRecipeAllDetails(ctx, req.(*GetRecipeAllDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_InsertOrUpdateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertOrUpdateRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).InsertOrUpdateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/InsertOrUpdateRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).InsertOrUpdateRecipe(ctx, req.(*InsertOrUpdateRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_UpdateActiveVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActiveVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).UpdateActiveVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/UpdateActiveVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).UpdateActiveVersion(ctx, req.(*UpdateActiveVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetSpecMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetSpecMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetSpecMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetSpecMaterials(ctx, req.(*GetSpecMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetParentSpecId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParentSpecIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetParentSpecId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetParentSpecId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetParentSpecId(ctx, req.(*GetParentSpecIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetSpecProdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecProdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetSpecProdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetSpecProdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetSpecProdList(ctx, req.(*GetSpecProdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetSpecProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetSpecProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetSpecProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetSpecProperty(ctx, req.(*GetSpecPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetTrimSpecMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrimSpecMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetTrimSpecMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetTrimSpecMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetTrimSpecMaterials(ctx, req.(*GetTrimSpecMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetRecipeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetRecipeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetRecipeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetRecipeId(ctx, req.(*GetRecipeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_InsertOrUpdateTrimspec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertOrUpdateTrimspecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).InsertOrUpdateTrimspec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/InsertOrUpdateTrimspec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).InsertOrUpdateTrimspec(ctx, req.(*InsertOrUpdateTrimspecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GetFreshness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFreshnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GetFreshness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GetFreshness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GetFreshness(ctx, req.(*GetFreshnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_ListRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).ListRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/ListRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).ListRecipe(ctx, req.(*ListRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_PutRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Recipe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).PutRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/PutRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).PutRecipe(ctx, req.(*Recipe))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_GenerateRecipeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRecipeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).GenerateRecipeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/GenerateRecipeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).GenerateRecipeID(ctx, req.(*GenerateRecipeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_ListSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).ListSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/ListSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).ListSpec(ctx, req.(*ListSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RS_PutSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Spec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSServer).PutSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.rs.RS/PutSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSServer).PutSpec(ctx, req.(*Spec))
	}
	return interceptor(ctx, in, info, handler)
}

var _RS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.dm.rs.RS",
	HandlerType: (*RSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckProcessExists",
			Handler:    _RS_CheckProcessExists_Handler,
		},
		{
			MethodName: "GetRecipeMaterials",
			Handler:    _RS_GetRecipeMaterials_Handler,
		},
		{
			MethodName: "GetRecipeAllMaterials",
			Handler:    _RS_GetRecipeAllMaterials_Handler,
		},
		{
			MethodName: "GetCtrlParams",
			Handler:    _RS_GetCtrlParams_Handler,
		},
		{
			MethodName: "GetMeasParams",
			Handler:    _RS_GetMeasParams_Handler,
		},
		{
			MethodName: "GetProdType",
			Handler:    _RS_GetProdType_Handler,
		},
		{
			MethodName: "GetProdID",
			Handler:    _RS_GetProdID_Handler,
		},
		{
			MethodName: "GetAllVersionProdID",
			Handler:    _RS_GetAllVersionProdID_Handler,
		},
		{
			MethodName: "GetMtrlProdID",
			Handler:    _RS_GetMtrlProdID_Handler,
		},
		{
			MethodName: "GetProcNames",
			Handler:    _RS_GetProcNames_Handler,
		},
		{
			MethodName: "GetProcName",
			Handler:    _RS_GetProcName_Handler,
		},
		{
			MethodName: "GetRecipeAllProcesses",
			Handler:    _RS_GetRecipeAllProcesses_Handler,
		},
		{
			MethodName: "GetEqptProduct",
			Handler:    _RS_GetEqptProduct_Handler,
		},
		{
			MethodName: "GetProcEqpt",
			Handler:    _RS_GetProcEqpt_Handler,
		},
		{
			MethodName: "GetRecipeProdType",
			Handler:    _RS_GetRecipeProdType_Handler,
		},
		{
			MethodName: "GetProcessSteps",
			Handler:    _RS_GetProcessSteps_Handler,
		},
		{
			MethodName: "GetProcessTools",
			Handler:    _RS_GetProcessTools_Handler,
		},
		{
			MethodName: "GetRecipeAllDetails",
			Handler:    _RS_GetRecipeAllDetails_Handler,
		},
		{
			MethodName: "InsertOrUpdateRecipe",
			Handler:    _RS_InsertOrUpdateRecipe_Handler,
		},
		{
			MethodName: "UpdateActiveVersion",
			Handler:    _RS_UpdateActiveVersion_Handler,
		},
		{
			MethodName: "GetSpecMaterials",
			Handler:    _RS_GetSpecMaterials_Handler,
		},
		{
			MethodName: "GetParentSpecId",
			Handler:    _RS_GetParentSpecId_Handler,
		},
		{
			MethodName: "GetSpecProdList",
			Handler:    _RS_GetSpecProdList_Handler,
		},
		{
			MethodName: "GetSpecProperty",
			Handler:    _RS_GetSpecProperty_Handler,
		},
		{
			MethodName: "GetTrimSpecMaterials",
			Handler:    _RS_GetTrimSpecMaterials_Handler,
		},
		{
			MethodName: "GetRecipeId",
			Handler:    _RS_GetRecipeId_Handler,
		},
		{
			MethodName: "InsertOrUpdateTrimspec",
			Handler:    _RS_InsertOrUpdateTrimspec_Handler,
		},
		{
			MethodName: "GetFreshness",
			Handler:    _RS_GetFreshness_Handler,
		},
		{
			MethodName: "ListRecipe",
			Handler:    _RS_ListRecipe_Handler,
		},
		{
			MethodName: "PutRecipe",
			Handler:    _RS_PutRecipe_Handler,
		},
		{
			MethodName: "GenerateRecipeID",
			Handler:    _RS_GenerateRecipeID_Handler,
		},
		{
			MethodName: "ListSpec",
			Handler:    _RS_ListSpec_Handler,
		},
		{
			MethodName: "PutSpec",
			Handler:    _RS_PutSpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
