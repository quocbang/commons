// Code generated by protoc-gen-go. DO NOT EDIT.
// source: field.proto

package kendaql

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Logical int32

const (
	Logical_AND Logical = 0
	Logical_OR  Logical = 1
)

var Logical_name = map[int32]string{
	0: "AND",
	1: "OR",
}

var Logical_value = map[string]int32{
	"AND": 0,
	"OR":  1,
}

func (x Logical) String() string {
	return proto.EnumName(Logical_name, int32(x))
}

func (Logical) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04234ff7fdd53e6e, []int{0}
}

type Condition int32

const (
	Condition_CONDITION_UNSPECIFIED Condition = 0
	Condition_EQUAL                 Condition = 1
	Condition_NOT_EQUAL             Condition = 2
	Condition_LIKE                  Condition = 3
	Condition_NOT_LIKE              Condition = 4
	Condition_GREATER               Condition = 5
	Condition_GREATER_EQUAL         Condition = 6
	Condition_LESS                  Condition = 7
	Condition_LESS_EQUAL            Condition = 8
	Condition_BETWEEN               Condition = 9
	Condition_NOT_BETWEEN           Condition = 10
	Condition_IN                    Condition = 11
	Condition_NOT_IN                Condition = 12
)

var Condition_name = map[int32]string{
	0:  "CONDITION_UNSPECIFIED",
	1:  "EQUAL",
	2:  "NOT_EQUAL",
	3:  "LIKE",
	4:  "NOT_LIKE",
	5:  "GREATER",
	6:  "GREATER_EQUAL",
	7:  "LESS",
	8:  "LESS_EQUAL",
	9:  "BETWEEN",
	10: "NOT_BETWEEN",
	11: "IN",
	12: "NOT_IN",
}

var Condition_value = map[string]int32{
	"CONDITION_UNSPECIFIED": 0,
	"EQUAL":                 1,
	"NOT_EQUAL":             2,
	"LIKE":                  3,
	"NOT_LIKE":              4,
	"GREATER":               5,
	"GREATER_EQUAL":         6,
	"LESS":                  7,
	"LESS_EQUAL":            8,
	"BETWEEN":               9,
	"NOT_BETWEEN":           10,
	"IN":                    11,
	"NOT_IN":                12,
}

func (x Condition) String() string {
	return proto.EnumName(Condition_name, int32(x))
}

func (Condition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04234ff7fdd53e6e, []int{1}
}

type LogicalGroup struct {
	Logical              Logical             `protobuf:"varint,1,opt,name=logical,proto3,enum=proto.dm.kendaql.Logical" json:"logical,omitempty"`
	Fields               []*LogicalGroupNode `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *LogicalGroup) Reset()         { *m = LogicalGroup{} }
func (m *LogicalGroup) String() string { return proto.CompactTextString(m) }
func (*LogicalGroup) ProtoMessage()    {}
func (*LogicalGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_04234ff7fdd53e6e, []int{0}
}

func (m *LogicalGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalGroup.Unmarshal(m, b)
}
func (m *LogicalGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalGroup.Marshal(b, m, deterministic)
}
func (m *LogicalGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalGroup.Merge(m, src)
}
func (m *LogicalGroup) XXX_Size() int {
	return xxx_messageInfo_LogicalGroup.Size(m)
}
func (m *LogicalGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalGroup.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalGroup proto.InternalMessageInfo

func (m *LogicalGroup) GetLogical() Logical {
	if m != nil {
		return m.Logical
	}
	return Logical_AND
}

func (m *LogicalGroup) GetFields() []*LogicalGroupNode {
	if m != nil {
		return m.Fields
	}
	return nil
}

type LogicalGroupNode struct {
	// Types that are valid to be assigned to Field:
	//	*LogicalGroupNode_Condition
	//	*LogicalGroupNode_Group
	Field                isLogicalGroupNode_Field `protobuf_oneof:"field"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *LogicalGroupNode) Reset()         { *m = LogicalGroupNode{} }
func (m *LogicalGroupNode) String() string { return proto.CompactTextString(m) }
func (*LogicalGroupNode) ProtoMessage()    {}
func (*LogicalGroupNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_04234ff7fdd53e6e, []int{1}
}

func (m *LogicalGroupNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalGroupNode.Unmarshal(m, b)
}
func (m *LogicalGroupNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalGroupNode.Marshal(b, m, deterministic)
}
func (m *LogicalGroupNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalGroupNode.Merge(m, src)
}
func (m *LogicalGroupNode) XXX_Size() int {
	return xxx_messageInfo_LogicalGroupNode.Size(m)
}
func (m *LogicalGroupNode) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalGroupNode.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalGroupNode proto.InternalMessageInfo

type isLogicalGroupNode_Field interface {
	isLogicalGroupNode_Field()
}

type LogicalGroupNode_Condition struct {
	Condition *ConditionField `protobuf:"bytes,1,opt,name=condition,proto3,oneof"`
}

type LogicalGroupNode_Group struct {
	Group *LogicalGroup `protobuf:"bytes,2,opt,name=group,proto3,oneof"`
}

func (*LogicalGroupNode_Condition) isLogicalGroupNode_Field() {}

func (*LogicalGroupNode_Group) isLogicalGroupNode_Field() {}

func (m *LogicalGroupNode) GetField() isLogicalGroupNode_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *LogicalGroupNode) GetCondition() *ConditionField {
	if x, ok := m.GetField().(*LogicalGroupNode_Condition); ok {
		return x.Condition
	}
	return nil
}

func (m *LogicalGroupNode) GetGroup() *LogicalGroup {
	if x, ok := m.GetField().(*LogicalGroupNode_Group); ok {
		return x.Group
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LogicalGroupNode) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LogicalGroupNode_Condition)(nil),
		(*LogicalGroupNode_Group)(nil),
	}
}

type ConditionField struct {
	Condition            Condition `protobuf:"varint,1,opt,name=condition,proto3,enum=proto.dm.kendaql.Condition" json:"condition,omitempty"`
	Field                *Field    `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ConditionField) Reset()         { *m = ConditionField{} }
func (m *ConditionField) String() string { return proto.CompactTextString(m) }
func (*ConditionField) ProtoMessage()    {}
func (*ConditionField) Descriptor() ([]byte, []int) {
	return fileDescriptor_04234ff7fdd53e6e, []int{2}
}

func (m *ConditionField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConditionField.Unmarshal(m, b)
}
func (m *ConditionField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConditionField.Marshal(b, m, deterministic)
}
func (m *ConditionField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionField.Merge(m, src)
}
func (m *ConditionField) XXX_Size() int {
	return xxx_messageInfo_ConditionField.Size(m)
}
func (m *ConditionField) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionField.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionField proto.InternalMessageInfo

func (m *ConditionField) GetCondition() Condition {
	if m != nil {
		return m.Condition
	}
	return Condition_CONDITION_UNSPECIFIED
}

func (m *ConditionField) GetField() *Field {
	if m != nil {
		return m.Field
	}
	return nil
}

type Field struct {
	Column               *Col     `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Values               [][]byte `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Field) Reset()         { *m = Field{} }
func (m *Field) String() string { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()    {}
func (*Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_04234ff7fdd53e6e, []int{3}
}

func (m *Field) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Field.Unmarshal(m, b)
}
func (m *Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Field.Marshal(b, m, deterministic)
}
func (m *Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Field.Merge(m, src)
}
func (m *Field) XXX_Size() int {
	return xxx_messageInfo_Field.Size(m)
}
func (m *Field) XXX_DiscardUnknown() {
	xxx_messageInfo_Field.DiscardUnknown(m)
}

var xxx_messageInfo_Field proto.InternalMessageInfo

func (m *Field) GetColumn() *Col {
	if m != nil {
		return m.Column
	}
	return nil
}

func (m *Field) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.dm.kendaql.Logical", Logical_name, Logical_value)
	proto.RegisterEnum("proto.dm.kendaql.Condition", Condition_name, Condition_value)
	proto.RegisterType((*LogicalGroup)(nil), "proto.dm.kendaql.LogicalGroup")
	proto.RegisterType((*LogicalGroupNode)(nil), "proto.dm.kendaql.LogicalGroupNode")
	proto.RegisterType((*ConditionField)(nil), "proto.dm.kendaql.ConditionField")
	proto.RegisterType((*Field)(nil), "proto.dm.kendaql.Field")
}

func init() { proto.RegisterFile("field.proto", fileDescriptor_04234ff7fdd53e6e) }

var fileDescriptor_04234ff7fdd53e6e = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x6f, 0x6b, 0xd3, 0x40,
	0x1c, 0xc7, 0x9b, 0x76, 0x4d, 0x9a, 0x5f, 0xba, 0x7a, 0xfe, 0x60, 0xda, 0x4d, 0x91, 0xd2, 0x47,
	0x63, 0xb0, 0x04, 0x32, 0x10, 0x14, 0x11, 0xdb, 0xee, 0xb6, 0x05, 0xcb, 0x55, 0xaf, 0x1d, 0x82,
	0x4f, 0x46, 0x9a, 0xc4, 0x10, 0xbc, 0xe4, 0xe6, 0x96, 0x4e, 0xf0, 0x89, 0xaf, 0xc2, 0x77, 0xe4,
	0x0b, 0x93, 0x5c, 0xae, 0x3a, 0x3b, 0xdd, 0xa3, 0xf6, 0xf7, 0xe7, 0xfb, 0xfd, 0x7e, 0x72, 0xc9,
	0x81, 0xf3, 0x29, 0x4b, 0x44, 0xec, 0x5e, 0x5e, 0xc9, 0x52, 0x22, 0x51, 0x3f, 0x6e, 0x9c, 0xbb,
	0x9f, 0x93, 0x22, 0x0e, 0xbf, 0x88, 0xbd, 0xa7, 0xaa, 0xe3, 0xc5, 0xb9, 0xa7, 0x3b, 0x5e, 0x19,
	0x2e, 0x45, 0x52, 0xef, 0x0f, 0xbf, 0x43, 0x77, 0x2a, 0xd3, 0x2c, 0x0a, 0xc5, 0xe9, 0x95, 0x5c,
	0x5d, 0xe2, 0x11, 0x58, 0xa2, 0xae, 0xfb, 0xc6, 0xc0, 0xd8, 0xef, 0xf9, 0xbb, 0xee, 0xa6, 0xa3,
	0xab, 0x05, 0x7c, 0xbd, 0x89, 0x2f, 0xc1, 0x54, 0x0c, 0xd7, 0xfd, 0xe6, 0xa0, 0xb5, 0xef, 0xf8,
	0xc3, 0xff, 0x6a, 0x54, 0x08, 0x93, 0x71, 0xc2, 0xb5, 0x62, 0xf8, 0xc3, 0x00, 0xb2, 0x39, 0xc4,
	0x37, 0x60, 0x47, 0xb2, 0x88, 0xb3, 0x32, 0x93, 0x85, 0xe2, 0x70, 0xfc, 0xc1, 0x5d, 0xcf, 0xc9,
	0x7a, 0xe5, 0xa4, 0xb2, 0x3a, 0x6b, 0xf0, 0x3f, 0x22, 0x7c, 0x0e, 0xed, 0xb4, 0xb2, 0xeb, 0x37,
	0x95, 0xfa, 0xd9, 0xfd, 0x44, 0x67, 0x0d, 0x5e, 0xaf, 0x8f, 0x2d, 0x68, 0x2b, 0xb0, 0xe1, 0x37,
	0xe8, 0xfd, 0xed, 0x8f, 0x2f, 0x36, 0xa1, 0x7a, 0xfe, 0x93, 0x7b, 0xa0, 0x6e, 0xd3, 0x1c, 0x6a,
	0x57, 0x4d, 0xf3, 0xf8, 0xae, 0x4c, 0x45, 0x70, 0x9d, 0xcd, 0xa0, 0x5d, 0x47, 0x1e, 0x82, 0x19,
	0x49, 0xb1, 0xca, 0xd7, 0x87, 0xb0, 0xf3, 0xaf, 0x3c, 0xc1, 0xf5, 0x12, 0x3e, 0x02, 0xf3, 0x26,
	0x14, 0xab, 0xa4, 0x7e, 0x0f, 0x5d, 0xae, 0xab, 0x83, 0x3d, 0xb0, 0xf4, 0xd3, 0xa2, 0x05, 0xad,
	0x11, 0x3b, 0x26, 0x0d, 0x34, 0xa1, 0x39, 0xe3, 0xc4, 0x38, 0xf8, 0x69, 0x80, 0xfd, 0x9b, 0x19,
	0x77, 0x61, 0x67, 0x32, 0x63, 0xc7, 0xc1, 0x22, 0x98, 0xb1, 0x8b, 0x73, 0x36, 0x7f, 0x47, 0x27,
	0xc1, 0x49, 0x40, 0x2b, 0x81, 0x0d, 0x6d, 0xfa, 0xfe, 0x7c, 0x34, 0x25, 0x06, 0x6e, 0x83, 0xcd,
	0x66, 0x8b, 0x8b, 0xba, 0x6c, 0x62, 0x07, 0xb6, 0xa6, 0xc1, 0x5b, 0x4a, 0x5a, 0xd8, 0x85, 0x4e,
	0x35, 0x50, 0xd5, 0x16, 0x3a, 0x60, 0x9d, 0x72, 0x3a, 0x5a, 0x50, 0x4e, 0xda, 0xf8, 0x10, 0xb6,
	0x75, 0xa1, 0x75, 0xa6, 0xd2, 0xd1, 0xf9, 0x9c, 0x58, 0xd8, 0x03, 0xa8, 0xfe, 0xe9, 0x49, 0xa7,
	0x52, 0x8e, 0xe9, 0xe2, 0x03, 0xa5, 0x8c, 0xd8, 0xf8, 0x00, 0x9c, 0xca, 0x74, 0xdd, 0x80, 0x0a,
	0x3d, 0x60, 0xc4, 0x41, 0x00, 0xb3, 0x1a, 0x04, 0x8c, 0x74, 0xc7, 0xaf, 0x3f, 0xbe, 0x4a, 0xb3,
	0x52, 0x84, 0xcb, 0xfa, 0x60, 0xdc, 0x48, 0xe6, 0x6e, 0xf9, 0xb5, 0xfe, 0xe4, 0xbd, 0x48, 0xe6,
	0xb9, 0x2c, 0xae, 0xbd, 0x1b, 0xdf, 0xab, 0x2f, 0x43, 0x2a, 0x45, 0x58, 0xa4, 0xb7, 0xee, 0xc4,
	0xd2, 0x54, 0x83, 0xa3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x75, 0xef, 0xd6, 0x4d, 0x03,
	0x00, 0x00,
}
