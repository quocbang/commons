// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package kendaql

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x00, 0x53, 0x7a, 0x29, 0xb9,
	0x7a, 0xd9, 0xa9, 0x79, 0x29, 0x89, 0x85, 0x39, 0x52, 0x32, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9,
	0xfa, 0x89, 0x05, 0x99, 0xfa, 0x89, 0x79, 0x79, 0xf9, 0x25, 0x89, 0x25, 0x99, 0xf9, 0x79, 0xc5,
	0x10, 0xf5, 0x52, 0x32, 0x60, 0x4a, 0x3f, 0x25, 0x57, 0x1f, 0xaa, 0x5e, 0xbf, 0xb0, 0x34, 0xb5,
	0xa8, 0x12, 0x2a, 0x2b, 0x8f, 0x21, 0x9b, 0x5b, 0x0a, 0xd1, 0x0f, 0x51, 0x60, 0x74, 0x93, 0x91,
	0x8b, 0xdd, 0x1b, 0x24, 0x15, 0xe8, 0x23, 0x94, 0xc0, 0xc5, 0x1a, 0x08, 0xd2, 0x2b, 0x24, 0xa7,
	0x87, 0xee, 0x08, 0x3d, 0xb0, 0x44, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x94, 0x0c, 0x4e,
	0xf9, 0x82, 0x9c, 0x4a, 0x25, 0xc9, 0xa6, 0xcb, 0x4f, 0x26, 0x33, 0x09, 0x2b, 0xf1, 0xa1, 0xba,
	0xc8, 0x8a, 0x51, 0x4b, 0x28, 0x87, 0x8b, 0xc3, 0x17, 0x6a, 0xbf, 0x90, 0x22, 0xa6, 0x21, 0x30,
	0x39, 0x98, 0x3d, 0xf2, 0xf8, 0x94, 0x80, 0xac, 0x92, 0x01, 0x5b, 0x25, 0xa6, 0x24, 0x88, 0xe1,
	0x3d, 0x2b, 0x46, 0x2d, 0x27, 0xbb, 0x28, 0x9b, 0xf4, 0xcc, 0x92, 0x9c, 0xc4, 0x24, 0x88, 0x6e,
	0xbd, 0xe4, 0xfc, 0x5c, 0xbd, 0x92, 0x72, 0x88, 0x52, 0xfd, 0xe4, 0xfc, 0xdc, 0xdc, 0xfc, 0xbc,
	0x62, 0xfd, 0x32, 0x23, 0x7d, 0x48, 0x18, 0xa5, 0xe7, 0xe7, 0x24, 0xe6, 0xa5, 0x23, 0x05, 0x55,
	0x12, 0x1b, 0x58, 0xc2, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x69, 0xbd, 0x3b, 0xa2, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KendaQLClient is the client API for KendaQL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KendaQLClient interface {
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
	Mutation(ctx context.Context, in *MutationRequest, opts ...grpc.CallOption) (*MutationReply, error)
}

type kendaQLClient struct {
	cc *grpc.ClientConn
}

func NewKendaQLClient(cc *grpc.ClientConn) KendaQLClient {
	return &kendaQLClient{cc}
}

func (c *kendaQLClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, "/proto.dm.kendaql.KendaQL/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kendaQLClient) Mutation(ctx context.Context, in *MutationRequest, opts ...grpc.CallOption) (*MutationReply, error) {
	out := new(MutationReply)
	err := c.cc.Invoke(ctx, "/proto.dm.kendaql.KendaQL/Mutation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KendaQLServer is the server API for KendaQL service.
type KendaQLServer interface {
	Query(context.Context, *QueryRequest) (*QueryReply, error)
	Mutation(context.Context, *MutationRequest) (*MutationReply, error)
}

func RegisterKendaQLServer(s *grpc.Server, srv KendaQLServer) {
	s.RegisterService(&_KendaQL_serviceDesc, srv)
}

func _KendaQL_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KendaQLServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.kendaql.KendaQL/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KendaQLServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KendaQL_Mutation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KendaQLServer).Mutation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.kendaql.KendaQL/Mutation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KendaQLServer).Mutation(ctx, req.(*MutationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KendaQL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.dm.kendaql.KendaQL",
	HandlerType: (*KendaQLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _KendaQL_Query_Handler,
		},
		{
			MethodName: "Mutation",
			Handler:    _KendaQL_Mutation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
