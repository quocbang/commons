// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package accounting

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 異動資料數量
type AffectedReply struct {
	RowsAffected         int64    `protobuf:"varint,1,opt,name=rows_affected,json=rowsAffected,proto3" json:"rows_affected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AffectedReply) Reset()         { *m = AffectedReply{} }
func (m *AffectedReply) String() string { return proto.CompactTextString(m) }
func (*AffectedReply) ProtoMessage()    {}
func (*AffectedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *AffectedReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AffectedReply.Unmarshal(m, b)
}
func (m *AffectedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AffectedReply.Marshal(b, m, deterministic)
}
func (m *AffectedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffectedReply.Merge(m, src)
}
func (m *AffectedReply) XXX_Size() int {
	return xxx_messageInfo_AffectedReply.Size(m)
}
func (m *AffectedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AffectedReply.DiscardUnknown(m)
}

var xxx_messageInfo_AffectedReply proto.InternalMessageInfo

func (m *AffectedReply) GetRowsAffected() int64 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

func init() {
	proto.RegisterType((*AffectedReply)(nil), "proto.dm.accounting.AffectedReply")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x4d, 0x8b, 0xd4, 0x30,
	0x18, 0xc7, 0xa9, 0x82, 0x42, 0x70, 0x2e, 0x5d, 0x76, 0x5d, 0xeb, 0xe0, 0x4b, 0x45, 0xd4, 0x11,
	0x13, 0x5c, 0x3d, 0xed, 0x45, 0x2a, 0x2e, 0x5e, 0x14, 0x96, 0x8a, 0x20, 0x5e, 0x86, 0x34, 0x7d,
	0xa6, 0x94, 0x49, 0x93, 0xda, 0x24, 0xbb, 0x0c, 0xa5, 0x07, 0x3d, 0x78, 0xf5, 0xa0, 0x47, 0xaf,
	0x7e, 0x10, 0x3f, 0x83, 0x5f, 0xc1, 0x0f, 0x22, 0xc9, 0x74, 0xdc, 0xb1, 0x13, 0x61, 0x45, 0xf6,
	0xd4, 0xe6, 0x9f, 0x27, 0x79, 0x7e, 0xcf, 0x5b, 0xd0, 0x48, 0x41, 0x73, 0x54, 0x32, 0xc0, 0x75,
	0x23, 0xb5, 0x0c, 0xb7, 0xdc, 0x07, 0xe7, 0x15, 0xa6, 0x8c, 0x49, 0x23, 0x74, 0x29, 0x8a, 0x68,
	0xe2, 0x44, 0x92, 0x57, 0xe4, 0x44, 0x5c, 0xfb, 0x9d, 0x82, 0xd0, 0xcd, 0x62, 0x79, 0x41, 0x34,
	0x2e, 0xa4, 0x2c, 0x38, 0x10, 0x5a, 0x97, 0x84, 0x0a, 0x21, 0x35, 0xd5, 0xa5, 0x14, 0xaa, 0xdf,
	0xbd, 0xda, 0xef, 0xba, 0x55, 0x66, 0x66, 0x04, 0xaa, 0x5a, 0xf7, 0x47, 0xe3, 0xc7, 0x68, 0x94,
	0xcc, 0x66, 0xc0, 0x34, 0xe4, 0x29, 0xd4, 0x7c, 0x11, 0xde, 0x42, 0xa3, 0x46, 0x1e, 0xab, 0x29,
	0xed, 0xd5, 0xdd, 0xe0, 0x46, 0x70, 0xf7, 0x7c, 0x7a, 0xc9, 0x8a, 0x2b, 0xcb, 0xbd, 0x6f, 0x17,
	0x11, 0x4a, 0x7e, 0xb3, 0x84, 0x5f, 0x02, 0xb4, 0xf3, 0x1c, 0xf4, 0x89, 0x72, 0x60, 0xe1, 0x0e,
	0xa5, 0xd2, 0xe1, 0x7d, 0xec, 0x09, 0x0e, 0x0f, 0x2c, 0x53, 0x78, 0x67, 0x40, 0xe9, 0xe8, 0x9e,
	0xd7, 0xf8, 0xa5, 0xe1, 0xba, 0x1c, 0x9c, 0x88, 0xe3, 0x0f, 0x3f, 0x7e, 0x7e, 0x3e, 0x37, 0x8e,
	0x2f, 0xaf, 0xa7, 0xc7, 0xe6, 0xa4, 0x04, 0x45, 0x0a, 0xd0, 0xfb, 0xc1, 0x24, 0xfc, 0x14, 0xa0,
	0x30, 0xc9, 0xf3, 0xc1, 0xd1, 0x70, 0xe2, 0xf5, 0xf2, 0xaa, 0x14, 0x05, 0x87, 0x81, 0x6d, 0xf4,
	0xc0, 0x8f, 0xbf, 0x71, 0x69, 0x0a, 0xca, 0x70, 0x1d, 0x5f, 0x73, 0x54, 0xbb, 0xf1, 0x96, 0x87,
	0xca, 0x12, 0x7d, 0x0c, 0xd0, 0xf6, 0xeb, 0x3a, 0xa7, 0x7a, 0xe8, 0x28, 0x3c, 0x7d, 0xe8, 0x51,
	0xec, 0x67, 0x5a, 0xaf, 0xe2, 0x0a, 0x24, 0xfa, 0x1b, 0xc8, 0xf7, 0x00, 0x6d, 0x3f, 0x03, 0x0e,
	0x9b, 0x20, 0xff, 0x92, 0x9d, 0xd3, 0x90, 0xbc, 0x71, 0x24, 0xe9, 0xe4, 0xd0, 0x57, 0xa8, 0x56,
	0x99, 0x6c, 0xca, 0x64, 0x55, 0x53, 0xb1, 0xe8, 0x48, 0x6b, 0x13, 0xd3, 0x91, 0xb6, 0xcc, 0x3b,
	0xd2, 0xf6, 0xd6, 0x53, 0x61, 0xaa, 0x0c, 0x9a, 0x87, 0x1d, 0x69, 0x99, 0xb4, 0x3a, 0x33, 0x4d,
	0x03, 0x82, 0x2d, 0xba, 0xf0, 0x6b, 0x80, 0xae, 0x6c, 0x76, 0x5d, 0x22, 0xf2, 0x17, 0x92, 0xcd,
	0xcf, 0xac, 0xf1, 0xee, 0xb8, 0x78, 0x6e, 0xc6, 0x63, 0x5f, 0x3c, 0x5c, 0xb2, 0xf9, 0xaa, 0xfb,
	0xde, 0xdb, 0x5a, 0x0b, 0xab, 0xfc, 0x47, 0xad, 0x77, 0xf0, 0x72, 0x78, 0xf1, 0x6a, 0x78, 0xf1,
	0x81, 0x1d, 0xde, 0xf8, 0xb6, 0xa3, 0xb8, 0x1e, 0x45, 0x3e, 0x0a, 0xe3, 0xbc, 0xee, 0x07, 0x93,
	0xa7, 0xc9, 0xdb, 0x27, 0x45, 0xa9, 0x39, 0xcd, 0xf0, 0x1c, 0x44, 0x4e, 0x31, 0x93, 0x15, 0xd6,
	0xc7, 0xc4, 0x2d, 0x08, 0x93, 0x55, 0x25, 0x85, 0x22, 0x47, 0x7b, 0xcb, 0xa7, 0x81, 0x14, 0x92,
	0x53, 0x51, 0xfc, 0xf9, 0xe4, 0x64, 0x17, 0xdc, 0xde, 0xa3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x41, 0xae, 0x9e, 0x15, 0xb4, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountingClient is the client API for Accounting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountingClient interface {
	// 取得accounting_entry資料
	GetAccountingEntryPost(ctx context.Context, in *AccountingEntryRequest, opts ...grpc.CallOption) (*MultiAccountingEntry, error)
	// 新增accounting_entry資料
	// sub_id無必要傳入
	AddAccountingEntry(ctx context.Context, in *SingleAccountingEntry, opts ...grpc.CallOption) (*AddAccountingEntryResult, error)
	// 修改accounting _entry資料
	UpdateAccountingEntry(ctx context.Context, in *MultiAccountingEntry, opts ...grpc.CallOption) (*AffectedReply, error)
	// 刪除accounting _entry資料
	DeleteAccountingEntry(ctx context.Context, in *SingleAccountingEntry, opts ...grpc.CallOption) (*AffectedReply, error)
	// 取得accounting_entry內容並LOCK
	GetAccountingEntryAndLock(ctx context.Context, in *AccountingEntryRequest, opts ...grpc.CallOption) (*MultiAccountingEntry, error)
	// Unlock accounting_entry內容
	UnlockAccountingEntry(ctx context.Context, in *MultiAccountingEntry, opts ...grpc.CallOption) (*empty.Empty, error)
}

type accountingClient struct {
	cc *grpc.ClientConn
}

func NewAccountingClient(cc *grpc.ClientConn) AccountingClient {
	return &accountingClient{cc}
}

func (c *accountingClient) GetAccountingEntryPost(ctx context.Context, in *AccountingEntryRequest, opts ...grpc.CallOption) (*MultiAccountingEntry, error) {
	out := new(MultiAccountingEntry)
	err := c.cc.Invoke(ctx, "/proto.dm.accounting.Accounting/GetAccountingEntryPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) AddAccountingEntry(ctx context.Context, in *SingleAccountingEntry, opts ...grpc.CallOption) (*AddAccountingEntryResult, error) {
	out := new(AddAccountingEntryResult)
	err := c.cc.Invoke(ctx, "/proto.dm.accounting.Accounting/AddAccountingEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) UpdateAccountingEntry(ctx context.Context, in *MultiAccountingEntry, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.accounting.Accounting/UpdateAccountingEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) DeleteAccountingEntry(ctx context.Context, in *SingleAccountingEntry, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.accounting.Accounting/DeleteAccountingEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) GetAccountingEntryAndLock(ctx context.Context, in *AccountingEntryRequest, opts ...grpc.CallOption) (*MultiAccountingEntry, error) {
	out := new(MultiAccountingEntry)
	err := c.cc.Invoke(ctx, "/proto.dm.accounting.Accounting/GetAccountingEntryAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) UnlockAccountingEntry(ctx context.Context, in *MultiAccountingEntry, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.accounting.Accounting/UnlockAccountingEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountingServer is the server API for Accounting service.
type AccountingServer interface {
	// 取得accounting_entry資料
	GetAccountingEntryPost(context.Context, *AccountingEntryRequest) (*MultiAccountingEntry, error)
	// 新增accounting_entry資料
	// sub_id無必要傳入
	AddAccountingEntry(context.Context, *SingleAccountingEntry) (*AddAccountingEntryResult, error)
	// 修改accounting _entry資料
	UpdateAccountingEntry(context.Context, *MultiAccountingEntry) (*AffectedReply, error)
	// 刪除accounting _entry資料
	DeleteAccountingEntry(context.Context, *SingleAccountingEntry) (*AffectedReply, error)
	// 取得accounting_entry內容並LOCK
	GetAccountingEntryAndLock(context.Context, *AccountingEntryRequest) (*MultiAccountingEntry, error)
	// Unlock accounting_entry內容
	UnlockAccountingEntry(context.Context, *MultiAccountingEntry) (*empty.Empty, error)
}

func RegisterAccountingServer(s *grpc.Server, srv AccountingServer) {
	s.RegisterService(&_Accounting_serviceDesc, srv)
}

func _Accounting_GetAccountingEntryPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountingEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).GetAccountingEntryPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.accounting.Accounting/GetAccountingEntryPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).GetAccountingEntryPost(ctx, req.(*AccountingEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_AddAccountingEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleAccountingEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).AddAccountingEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.accounting.Accounting/AddAccountingEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).AddAccountingEntry(ctx, req.(*SingleAccountingEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_UpdateAccountingEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiAccountingEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).UpdateAccountingEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.accounting.Accounting/UpdateAccountingEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).UpdateAccountingEntry(ctx, req.(*MultiAccountingEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_DeleteAccountingEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleAccountingEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).DeleteAccountingEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.accounting.Accounting/DeleteAccountingEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).DeleteAccountingEntry(ctx, req.(*SingleAccountingEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_GetAccountingEntryAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountingEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).GetAccountingEntryAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.accounting.Accounting/GetAccountingEntryAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).GetAccountingEntryAndLock(ctx, req.(*AccountingEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_UnlockAccountingEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiAccountingEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).UnlockAccountingEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.accounting.Accounting/UnlockAccountingEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).UnlockAccountingEntry(ctx, req.(*MultiAccountingEntry))
	}
	return interceptor(ctx, in, info, handler)
}

var _Accounting_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.dm.accounting.Accounting",
	HandlerType: (*AccountingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountingEntryPost",
			Handler:    _Accounting_GetAccountingEntryPost_Handler,
		},
		{
			MethodName: "AddAccountingEntry",
			Handler:    _Accounting_AddAccountingEntry_Handler,
		},
		{
			MethodName: "UpdateAccountingEntry",
			Handler:    _Accounting_UpdateAccountingEntry_Handler,
		},
		{
			MethodName: "DeleteAccountingEntry",
			Handler:    _Accounting_DeleteAccountingEntry_Handler,
		},
		{
			MethodName: "GetAccountingEntryAndLock",
			Handler:    _Accounting_GetAccountingEntryAndLock_Handler,
		},
		{
			MethodName: "UnlockAccountingEntry",
			Handler:    _Accounting_UnlockAccountingEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
