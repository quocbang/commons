// Code generated by protoc-gen-go. DO NOT EDIT.
// source: list_plmmas.proto

package plm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListPlmmasRequest struct {
	Prjno                string   `protobuf:"bytes,1,opt,name=prjno,proto3" json:"prjno,omitempty"`
	Admin                string   `protobuf:"bytes,2,opt,name=admin,proto3" json:"admin,omitempty"`
	Kind                 string   `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Preend               string   `protobuf:"bytes,4,opt,name=preend,proto3" json:"preend,omitempty"`
	Prjtype              string   `protobuf:"bytes,5,opt,name=prjtype,proto3" json:"prjtype,omitempty"`
	Prjtypek             string   `protobuf:"bytes,6,opt,name=prjtypek,proto3" json:"prjtypek,omitempty"`
	Spdsc                string   `protobuf:"bytes,7,opt,name=spdsc,proto3" json:"spdsc,omitempty"`
	Patt                 string   `protobuf:"bytes,8,opt,name=patt,proto3" json:"patt,omitempty"`
	Testfac              string   `protobuf:"bytes,9,opt,name=testfac,proto3" json:"testfac,omitempty"`
	Manfac               string   `protobuf:"bytes,10,opt,name=manfac,proto3" json:"manfac,omitempty"`
	ItnschIndat          string   `protobuf:"bytes,11,opt,name=itnsch_indat,json=itnschIndat,proto3" json:"itnsch_indat,omitempty"`
	State                string   `protobuf:"bytes,12,opt,name=state,proto3" json:"state,omitempty"`
	Itnbr                string   `protobuf:"bytes,13,opt,name=itnbr,proto3" json:"itnbr,omitempty"`
	Extestdat            string   `protobuf:"bytes,14,opt,name=extestdat,proto3" json:"extestdat,omitempty"`
	Testdat              string   `protobuf:"bytes,15,opt,name=testdat,proto3" json:"testdat,omitempty"`
	Dfindat              string   `protobuf:"bytes,16,opt,name=dfindat,proto3" json:"dfindat,omitempty"`
	Mandat               string   `protobuf:"bytes,17,opt,name=mandat,proto3" json:"mandat,omitempty"`
	Fmoddat              string   `protobuf:"bytes,18,opt,name=fmoddat,proto3" json:"fmoddat,omitempty"`
	Picchkdat            string   `protobuf:"bytes,19,opt,name=picchkdat,proto3" json:"picchkdat,omitempty"`
	Okdat                string   `protobuf:"bytes,20,opt,name=okdat,proto3" json:"okdat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPlmmasRequest) Reset()         { *m = ListPlmmasRequest{} }
func (m *ListPlmmasRequest) String() string { return proto.CompactTextString(m) }
func (*ListPlmmasRequest) ProtoMessage()    {}
func (*ListPlmmasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3c38bb101912f60, []int{0}
}

func (m *ListPlmmasRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPlmmasRequest.Unmarshal(m, b)
}
func (m *ListPlmmasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPlmmasRequest.Marshal(b, m, deterministic)
}
func (m *ListPlmmasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPlmmasRequest.Merge(m, src)
}
func (m *ListPlmmasRequest) XXX_Size() int {
	return xxx_messageInfo_ListPlmmasRequest.Size(m)
}
func (m *ListPlmmasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPlmmasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPlmmasRequest proto.InternalMessageInfo

func (m *ListPlmmasRequest) GetPrjno() string {
	if m != nil {
		return m.Prjno
	}
	return ""
}

func (m *ListPlmmasRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *ListPlmmasRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ListPlmmasRequest) GetPreend() string {
	if m != nil {
		return m.Preend
	}
	return ""
}

func (m *ListPlmmasRequest) GetPrjtype() string {
	if m != nil {
		return m.Prjtype
	}
	return ""
}

func (m *ListPlmmasRequest) GetPrjtypek() string {
	if m != nil {
		return m.Prjtypek
	}
	return ""
}

func (m *ListPlmmasRequest) GetSpdsc() string {
	if m != nil {
		return m.Spdsc
	}
	return ""
}

func (m *ListPlmmasRequest) GetPatt() string {
	if m != nil {
		return m.Patt
	}
	return ""
}

func (m *ListPlmmasRequest) GetTestfac() string {
	if m != nil {
		return m.Testfac
	}
	return ""
}

func (m *ListPlmmasRequest) GetManfac() string {
	if m != nil {
		return m.Manfac
	}
	return ""
}

func (m *ListPlmmasRequest) GetItnschIndat() string {
	if m != nil {
		return m.ItnschIndat
	}
	return ""
}

func (m *ListPlmmasRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ListPlmmasRequest) GetItnbr() string {
	if m != nil {
		return m.Itnbr
	}
	return ""
}

func (m *ListPlmmasRequest) GetExtestdat() string {
	if m != nil {
		return m.Extestdat
	}
	return ""
}

func (m *ListPlmmasRequest) GetTestdat() string {
	if m != nil {
		return m.Testdat
	}
	return ""
}

func (m *ListPlmmasRequest) GetDfindat() string {
	if m != nil {
		return m.Dfindat
	}
	return ""
}

func (m *ListPlmmasRequest) GetMandat() string {
	if m != nil {
		return m.Mandat
	}
	return ""
}

func (m *ListPlmmasRequest) GetFmoddat() string {
	if m != nil {
		return m.Fmoddat
	}
	return ""
}

func (m *ListPlmmasRequest) GetPicchkdat() string {
	if m != nil {
		return m.Picchkdat
	}
	return ""
}

func (m *ListPlmmasRequest) GetOkdat() string {
	if m != nil {
		return m.Okdat
	}
	return ""
}

type ListPlmmasReply struct {
	Records              []*Plmmas `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListPlmmasReply) Reset()         { *m = ListPlmmasReply{} }
func (m *ListPlmmasReply) String() string { return proto.CompactTextString(m) }
func (*ListPlmmasReply) ProtoMessage()    {}
func (*ListPlmmasReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3c38bb101912f60, []int{1}
}

func (m *ListPlmmasReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPlmmasReply.Unmarshal(m, b)
}
func (m *ListPlmmasReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPlmmasReply.Marshal(b, m, deterministic)
}
func (m *ListPlmmasReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPlmmasReply.Merge(m, src)
}
func (m *ListPlmmasReply) XXX_Size() int {
	return xxx_messageInfo_ListPlmmasReply.Size(m)
}
func (m *ListPlmmasReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPlmmasReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListPlmmasReply proto.InternalMessageInfo

func (m *ListPlmmasReply) GetRecords() []*Plmmas {
	if m != nil {
		return m.Records
	}
	return nil
}

type Plmmas struct {
	No                   int32    `protobuf:"varint,1,opt,name=no,proto3" json:"no,omitempty"`
	Prjno                string   `protobuf:"bytes,2,opt,name=prjno,proto3" json:"prjno,omitempty"`
	Prjseq               string   `protobuf:"bytes,3,opt,name=prjseq,proto3" json:"prjseq,omitempty"`
	Kind                 string   `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Seq                  int32    `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`
	Admin                string   `protobuf:"bytes,6,opt,name=admin,proto3" json:"admin,omitempty"`
	Reladmin             string   `protobuf:"bytes,7,opt,name=reladmin,proto3" json:"reladmin,omitempty"`
	Prestart             string   `protobuf:"bytes,8,opt,name=prestart,proto3" json:"prestart,omitempty"`
	Preend               string   `protobuf:"bytes,9,opt,name=preend,proto3" json:"preend,omitempty"`
	Actstart             string   `protobuf:"bytes,10,opt,name=actstart,proto3" json:"actstart,omitempty"`
	Actend               string   `protobuf:"bytes,11,opt,name=actend,proto3" json:"actend,omitempty"`
	Prjtype              string   `protobuf:"bytes,12,opt,name=prjtype,proto3" json:"prjtype,omitempty"`
	Prjtypek             string   `protobuf:"bytes,13,opt,name=prjtypek,proto3" json:"prjtypek,omitempty"`
	Spdsc                string   `protobuf:"bytes,14,opt,name=spdsc,proto3" json:"spdsc,omitempty"`
	Patt                 string   `protobuf:"bytes,15,opt,name=patt,proto3" json:"patt,omitempty"`
	Feat                 string   `protobuf:"bytes,16,opt,name=feat,proto3" json:"feat,omitempty"`
	Logo                 string   `protobuf:"bytes,17,opt,name=logo,proto3" json:"logo,omitempty"`
	Valve                string   `protobuf:"bytes,18,opt,name=valve,proto3" json:"valve,omitempty"`
	Testfac              string   `protobuf:"bytes,19,opt,name=testfac,proto3" json:"testfac,omitempty"`
	Manfac               string   `protobuf:"bytes,20,opt,name=manfac,proto3" json:"manfac,omitempty"`
	Modcod               string   `protobuf:"bytes,21,opt,name=modcod,proto3" json:"modcod,omitempty"`
	ItnschIndat          string   `protobuf:"bytes,22,opt,name=itnsch_indat,json=itnschIndat,proto3" json:"itnsch_indat,omitempty"`
	State                string   `protobuf:"bytes,23,opt,name=state,proto3" json:"state,omitempty"`
	Qty                  string   `protobuf:"bytes,24,opt,name=qty,proto3" json:"qty,omitempty"`
	Itnbr                string   `protobuf:"bytes,25,opt,name=itnbr,proto3" json:"itnbr,omitempty"`
	Modno                string   `protobuf:"bytes,26,opt,name=modno,proto3" json:"modno,omitempty"`
	Spec                 string   `protobuf:"bytes,27,opt,name=spec,proto3" json:"spec,omitempty"`
	Slipno               string   `protobuf:"bytes,28,opt,name=slipno,proto3" json:"slipno,omitempty"`
	Buyok                string   `protobuf:"bytes,29,opt,name=buyok,proto3" json:"buyok,omitempty"`
	Extestdat            string   `protobuf:"bytes,30,opt,name=extestdat,proto3" json:"extestdat,omitempty"`
	Testdat              string   `protobuf:"bytes,31,opt,name=testdat,proto3" json:"testdat,omitempty"`
	Testday              string   `protobuf:"bytes,32,opt,name=testday,proto3" json:"testday,omitempty"`
	Dfindat              string   `protobuf:"bytes,33,opt,name=dfindat,proto3" json:"dfindat,omitempty"`
	Mandat               string   `protobuf:"bytes,34,opt,name=mandat,proto3" json:"mandat,omitempty"`
	Manday               string   `protobuf:"bytes,35,opt,name=manday,proto3" json:"manday,omitempty"`
	Fmoddat              string   `protobuf:"bytes,36,opt,name=fmoddat,proto3" json:"fmoddat,omitempty"`
	Sposnd               string   `protobuf:"bytes,37,opt,name=sposnd,proto3" json:"sposnd,omitempty"`
	Spocfm               string   `protobuf:"bytes,38,opt,name=spocfm,proto3" json:"spocfm,omitempty"`
	Sposnd2              string   `protobuf:"bytes,39,opt,name=sposnd2,proto3" json:"sposnd2,omitempty"`
	Spocfm2              string   `protobuf:"bytes,40,opt,name=spocfm2,proto3" json:"spocfm2,omitempty"`
	Sposnd3              string   `protobuf:"bytes,41,opt,name=sposnd3,proto3" json:"sposnd3,omitempty"`
	Spocfm3              string   `protobuf:"bytes,42,opt,name=spocfm3,proto3" json:"spocfm3,omitempty"`
	Moddat               string   `protobuf:"bytes,43,opt,name=moddat,proto3" json:"moddat,omitempty"`
	Precreddat           string   `protobuf:"bytes,44,opt,name=precreddat,proto3" json:"precreddat,omitempty"`
	Fincreddat           string   `protobuf:"bytes,45,opt,name=fincreddat,proto3" json:"fincreddat,omitempty"`
	Begincreddat         string   `protobuf:"bytes,46,opt,name=begincreddat,proto3" json:"begincreddat,omitempty"`
	Tpsdat               string   `protobuf:"bytes,47,opt,name=tpsdat,proto3" json:"tpsdat,omitempty"`
	Picchkdat            string   `protobuf:"bytes,48,opt,name=picchkdat,proto3" json:"picchkdat,omitempty"`
	Okdat                string   `protobuf:"bytes,49,opt,name=okdat,proto3" json:"okdat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Plmmas) Reset()         { *m = Plmmas{} }
func (m *Plmmas) String() string { return proto.CompactTextString(m) }
func (*Plmmas) ProtoMessage()    {}
func (*Plmmas) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3c38bb101912f60, []int{2}
}

func (m *Plmmas) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Plmmas.Unmarshal(m, b)
}
func (m *Plmmas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Plmmas.Marshal(b, m, deterministic)
}
func (m *Plmmas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plmmas.Merge(m, src)
}
func (m *Plmmas) XXX_Size() int {
	return xxx_messageInfo_Plmmas.Size(m)
}
func (m *Plmmas) XXX_DiscardUnknown() {
	xxx_messageInfo_Plmmas.DiscardUnknown(m)
}

var xxx_messageInfo_Plmmas proto.InternalMessageInfo

func (m *Plmmas) GetNo() int32 {
	if m != nil {
		return m.No
	}
	return 0
}

func (m *Plmmas) GetPrjno() string {
	if m != nil {
		return m.Prjno
	}
	return ""
}

func (m *Plmmas) GetPrjseq() string {
	if m != nil {
		return m.Prjseq
	}
	return ""
}

func (m *Plmmas) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Plmmas) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *Plmmas) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *Plmmas) GetReladmin() string {
	if m != nil {
		return m.Reladmin
	}
	return ""
}

func (m *Plmmas) GetPrestart() string {
	if m != nil {
		return m.Prestart
	}
	return ""
}

func (m *Plmmas) GetPreend() string {
	if m != nil {
		return m.Preend
	}
	return ""
}

func (m *Plmmas) GetActstart() string {
	if m != nil {
		return m.Actstart
	}
	return ""
}

func (m *Plmmas) GetActend() string {
	if m != nil {
		return m.Actend
	}
	return ""
}

func (m *Plmmas) GetPrjtype() string {
	if m != nil {
		return m.Prjtype
	}
	return ""
}

func (m *Plmmas) GetPrjtypek() string {
	if m != nil {
		return m.Prjtypek
	}
	return ""
}

func (m *Plmmas) GetSpdsc() string {
	if m != nil {
		return m.Spdsc
	}
	return ""
}

func (m *Plmmas) GetPatt() string {
	if m != nil {
		return m.Patt
	}
	return ""
}

func (m *Plmmas) GetFeat() string {
	if m != nil {
		return m.Feat
	}
	return ""
}

func (m *Plmmas) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Plmmas) GetValve() string {
	if m != nil {
		return m.Valve
	}
	return ""
}

func (m *Plmmas) GetTestfac() string {
	if m != nil {
		return m.Testfac
	}
	return ""
}

func (m *Plmmas) GetManfac() string {
	if m != nil {
		return m.Manfac
	}
	return ""
}

func (m *Plmmas) GetModcod() string {
	if m != nil {
		return m.Modcod
	}
	return ""
}

func (m *Plmmas) GetItnschIndat() string {
	if m != nil {
		return m.ItnschIndat
	}
	return ""
}

func (m *Plmmas) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Plmmas) GetQty() string {
	if m != nil {
		return m.Qty
	}
	return ""
}

func (m *Plmmas) GetItnbr() string {
	if m != nil {
		return m.Itnbr
	}
	return ""
}

func (m *Plmmas) GetModno() string {
	if m != nil {
		return m.Modno
	}
	return ""
}

func (m *Plmmas) GetSpec() string {
	if m != nil {
		return m.Spec
	}
	return ""
}

func (m *Plmmas) GetSlipno() string {
	if m != nil {
		return m.Slipno
	}
	return ""
}

func (m *Plmmas) GetBuyok() string {
	if m != nil {
		return m.Buyok
	}
	return ""
}

func (m *Plmmas) GetExtestdat() string {
	if m != nil {
		return m.Extestdat
	}
	return ""
}

func (m *Plmmas) GetTestdat() string {
	if m != nil {
		return m.Testdat
	}
	return ""
}

func (m *Plmmas) GetTestday() string {
	if m != nil {
		return m.Testday
	}
	return ""
}

func (m *Plmmas) GetDfindat() string {
	if m != nil {
		return m.Dfindat
	}
	return ""
}

func (m *Plmmas) GetMandat() string {
	if m != nil {
		return m.Mandat
	}
	return ""
}

func (m *Plmmas) GetManday() string {
	if m != nil {
		return m.Manday
	}
	return ""
}

func (m *Plmmas) GetFmoddat() string {
	if m != nil {
		return m.Fmoddat
	}
	return ""
}

func (m *Plmmas) GetSposnd() string {
	if m != nil {
		return m.Sposnd
	}
	return ""
}

func (m *Plmmas) GetSpocfm() string {
	if m != nil {
		return m.Spocfm
	}
	return ""
}

func (m *Plmmas) GetSposnd2() string {
	if m != nil {
		return m.Sposnd2
	}
	return ""
}

func (m *Plmmas) GetSpocfm2() string {
	if m != nil {
		return m.Spocfm2
	}
	return ""
}

func (m *Plmmas) GetSposnd3() string {
	if m != nil {
		return m.Sposnd3
	}
	return ""
}

func (m *Plmmas) GetSpocfm3() string {
	if m != nil {
		return m.Spocfm3
	}
	return ""
}

func (m *Plmmas) GetModdat() string {
	if m != nil {
		return m.Moddat
	}
	return ""
}

func (m *Plmmas) GetPrecreddat() string {
	if m != nil {
		return m.Precreddat
	}
	return ""
}

func (m *Plmmas) GetFincreddat() string {
	if m != nil {
		return m.Fincreddat
	}
	return ""
}

func (m *Plmmas) GetBegincreddat() string {
	if m != nil {
		return m.Begincreddat
	}
	return ""
}

func (m *Plmmas) GetTpsdat() string {
	if m != nil {
		return m.Tpsdat
	}
	return ""
}

func (m *Plmmas) GetPicchkdat() string {
	if m != nil {
		return m.Picchkdat
	}
	return ""
}

func (m *Plmmas) GetOkdat() string {
	if m != nil {
		return m.Okdat
	}
	return ""
}

func init() {
	proto.RegisterType((*ListPlmmasRequest)(nil), "proto.dm.plm.ListPlmmasRequest")
	proto.RegisterType((*ListPlmmasReply)(nil), "proto.dm.plm.ListPlmmasReply")
	proto.RegisterType((*Plmmas)(nil), "proto.dm.plm.Plmmas")
}

func init() { proto.RegisterFile("list_plmmas.proto", fileDescriptor_a3c38bb101912f60) }

var fileDescriptor_a3c38bb101912f60 = []byte{
	// 764 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcb, 0x6e, 0xdb, 0x38,
	0x14, 0x45, 0xfc, 0x8a, 0xcd, 0x38, 0x2f, 0xc5, 0x93, 0xe1, 0x78, 0x32, 0x99, 0xc4, 0x33, 0x6d,
	0xd3, 0x97, 0xd4, 0xda, 0x9b, 0xa2, 0xbb, 0x76, 0x57, 0xa0, 0x8b, 0x22, 0xcb, 0x6e, 0x02, 0x99,
	0xa2, 0x1c, 0xc5, 0xa2, 0xc8, 0x88, 0x4c, 0x5a, 0xed, 0xfb, 0x5b, 0xfd, 0xb7, 0xe2, 0xf2, 0xd2,
	0x12, 0x8d, 0xd4, 0x59, 0xf9, 0x9e, 0x73, 0x78, 0x1f, 0x06, 0xce, 0x11, 0x39, 0xcc, 0x33, 0x6d,
	0xae, 0x54, 0x2e, 0x44, 0xac, 0x43, 0x55, 0x4a, 0x23, 0x83, 0xa1, 0xfd, 0x09, 0x13, 0x11, 0xaa,
	0x5c, 0x4c, 0x7e, 0x74, 0xc8, 0xe1, 0xe7, 0x4c, 0x9b, 0x2f, 0xf6, 0xc9, 0x25, 0xbf, 0xbd, 0xe3,
	0xda, 0x04, 0x23, 0xd2, 0x55, 0xe5, 0x4d, 0x21, 0xe9, 0xd6, 0xd9, 0xd6, 0xc5, 0xe0, 0x12, 0x01,
	0xb0, 0x71, 0x22, 0xb2, 0x82, 0xb6, 0x90, 0xb5, 0x20, 0x08, 0x48, 0x67, 0x99, 0x15, 0x09, 0x6d,
	0x5b, 0xd2, 0xd6, 0xc1, 0x31, 0xe9, 0xa9, 0x92, 0xf3, 0x22, 0xa1, 0x1d, 0xcb, 0x3a, 0x14, 0x50,
	0xb2, 0xad, 0xca, 0x1b, 0x53, 0x29, 0x4e, 0xbb, 0x56, 0x58, 0xc1, 0x60, 0x4c, 0xfa, 0xae, 0x5c,
	0xd2, 0x9e, 0x95, 0x6a, 0x0c, 0x7b, 0xb5, 0x4a, 0x34, 0xa3, 0xdb, 0xb8, 0xd7, 0x02, 0xd8, 0xab,
	0x62, 0x63, 0x68, 0x1f, 0xf7, 0x42, 0x0d, 0xf3, 0x0d, 0xd7, 0x26, 0x8d, 0x19, 0x1d, 0xe0, 0x7c,
	0x07, 0xe1, 0x22, 0x11, 0x17, 0x20, 0x10, 0xbc, 0x08, 0x51, 0x70, 0x4e, 0x86, 0x99, 0x29, 0x34,
	0xbb, 0xbe, 0xca, 0x8a, 0x24, 0x36, 0x74, 0xc7, 0xaa, 0x3b, 0xc8, 0x7d, 0x02, 0xca, 0xae, 0x37,
	0xb1, 0xe1, 0x74, 0xe8, 0xd6, 0x03, 0x00, 0x36, 0x33, 0xc5, 0xbc, 0xa4, 0xbb, 0xc8, 0x5a, 0x10,
	0x9c, 0x90, 0x01, 0xff, 0x0e, 0x3b, 0x61, 0xd6, 0x9e, 0x55, 0x1a, 0x62, 0x75, 0x1e, 0x68, 0xfb,
	0xcd, 0x79, 0x4e, 0x49, 0x52, 0xbc, 0xe0, 0x00, 0x15, 0x07, 0xdd, 0xe1, 0x20, 0x1c, 0xd6, 0x87,
	0xbb, 0x8e, 0x54, 0xc8, 0x04, 0x84, 0x00, 0x3b, 0x1c, 0x84, 0x1b, 0x54, 0xc6, 0xd8, 0xf5, 0x12,
	0xb4, 0x23, 0xbc, 0xa1, 0x26, 0xe0, 0x6e, 0x69, 0x95, 0x11, 0xde, 0x6d, 0xc1, 0xe4, 0x03, 0xd9,
	0xf7, 0x5d, 0xa0, 0xf2, 0x2a, 0x08, 0xc9, 0x76, 0xc9, 0x99, 0x2c, 0x13, 0x4d, 0xb7, 0xce, 0xda,
	0x17, 0x3b, 0xd3, 0x51, 0xe8, 0x3b, 0x27, 0x74, 0x6f, 0x57, 0x8f, 0x26, 0x3f, 0x07, 0xa4, 0x87,
	0x5c, 0xb0, 0x47, 0x5a, 0xce, 0x3b, 0xdd, 0xcb, 0x16, 0x1a, 0x07, 0xed, 0xd4, 0xf2, 0xed, 0x64,
	0x4d, 0x72, 0xa3, 0xf9, 0xad, 0xb3, 0x8e, 0x43, 0xb5, 0xa1, 0x3a, 0x9e, 0xa1, 0x0e, 0x48, 0x1b,
	0x1e, 0x76, 0xed, 0x48, 0x28, 0x1b, 0x33, 0xf6, 0x7c, 0x33, 0x8e, 0x49, 0xbf, 0xe4, 0x39, 0x0a,
	0xe8, 0x96, 0x1a, 0xa3, 0xc5, 0xb8, 0x36, 0x71, 0xb9, 0x32, 0x4d, 0x8d, 0x3d, 0xc3, 0x0e, 0xd6,
	0x0c, 0x3b, 0x26, 0xfd, 0x98, 0x19, 0xec, 0x41, 0xe3, 0xd4, 0x18, 0x7a, 0x62, 0x66, 0xa0, 0x07,
	0x4d, 0xe3, 0x90, 0x6f, 0xf2, 0xe1, 0x66, 0x93, 0xef, 0x6e, 0x32, 0xf9, 0xde, 0xef, 0x4c, 0xbe,
	0xef, 0x99, 0x3c, 0x20, 0x9d, 0x94, 0xd7, 0x46, 0xb1, 0x35, 0x70, 0xb9, 0x5c, 0x48, 0xe7, 0x11,
	0x5b, 0xc3, 0xc4, 0xfb, 0x38, 0xbf, 0xe7, 0xce, 0x1f, 0x08, 0xfc, 0x88, 0x1c, 0x6d, 0x8a, 0xc8,
	0x68, 0x2d, 0x22, 0xc0, 0xcb, 0x84, 0xc9, 0x84, 0xfe, 0xe1, 0x78, 0x8b, 0x1e, 0x44, 0xe7, 0xf8,
	0x91, 0xe8, 0xfc, 0xe9, 0x47, 0xe7, 0x80, 0xb4, 0x6f, 0x4d, 0x45, 0xa9, 0xe5, 0xa0, 0x6c, 0xc2,
	0xf4, 0x97, 0x1f, 0xa6, 0x11, 0xe9, 0x0a, 0x99, 0x14, 0x92, 0x8e, 0x91, 0xb5, 0x00, 0xfe, 0xaa,
	0x56, 0x9c, 0xd1, 0xbf, 0xf1, 0xaf, 0x42, 0x0d, 0x27, 0xea, 0x3c, 0x53, 0x85, 0xa4, 0x27, 0x78,
	0x22, 0x22, 0x98, 0x30, 0xbf, 0xab, 0xe4, 0x92, 0xfe, 0x83, 0x13, 0x2c, 0x58, 0x0f, 0xe9, 0xe9,
	0x23, 0x21, 0xfd, 0xf7, 0x41, 0x48, 0xb1, 0xac, 0xe8, 0x99, 0xaf, 0x54, 0x7e, 0x7c, 0xcf, 0x37,
	0xc5, 0x77, 0xb2, 0x16, 0xdf, 0x15, 0x5f, 0xd1, 0xff, 0x3c, 0xbe, 0xf2, 0x63, 0xfd, 0xff, 0x7a,
	0xac, 0xe1, 0x3f, 0x2a, 0xa9, 0x8b, 0x84, 0x3e, 0x71, 0xff, 0xd1, 0x22, 0xc7, 0xb3, 0x54, 0xd0,
	0xa7, 0x35, 0xcf, 0x52, 0x01, 0x93, 0xf0, 0xc5, 0x94, 0x3e, 0xc3, 0x49, 0x0e, 0x3a, 0x85, 0xa5,
	0x62, 0x4a, 0x2f, 0x6a, 0x05, 0x60, 0xd3, 0x33, 0xa3, 0xcf, 0xfd, 0x9e, 0x59, 0xd3, 0x33, 0xa3,
	0x2f, 0xfc, 0x9e, 0x99, 0xb3, 0x07, 0x1c, 0xfc, 0xb2, 0xb6, 0x07, 0xdc, 0x7b, 0x4a, 0x88, 0x2a,
	0x39, 0x2b, 0xb9, 0xd5, 0x5e, 0x59, 0xcd, 0x63, 0x40, 0x4f, 0xb3, 0x62, 0xa5, 0xbf, 0x46, 0xbd,
	0x61, 0x82, 0x09, 0x19, 0xce, 0xf9, 0xa2, 0x79, 0x11, 0xda, 0x17, 0x6b, 0x1c, 0xec, 0x36, 0x4a,
	0x83, 0x1a, 0xe1, 0x6e, 0x44, 0xeb, 0x9f, 0xc0, 0x37, 0x1b, 0x3f, 0x81, 0x6f, 0xbd, 0x4f, 0xe0,
	0xc7, 0xf7, 0x5f, 0xdf, 0x2d, 0x32, 0x93, 0xc7, 0xf3, 0x70, 0xc9, 0x8b, 0x24, 0x0e, 0x99, 0x14,
	0xa1, 0xf9, 0x16, 0x59, 0x10, 0x31, 0x29, 0x84, 0x2c, 0x74, 0x74, 0x3f, 0x8d, 0xec, 0x47, 0x30,
	0x5a, 0xc8, 0x3c, 0x2e, 0x16, 0x51, 0x22, 0x22, 0x95, 0x8b, 0x79, 0xcf, 0x92, 0xb3, 0x5f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x73, 0xd4, 0x30, 0x26, 0x6f, 0x07, 0x00, 0x00,
}
