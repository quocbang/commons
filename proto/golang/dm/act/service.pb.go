// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package act

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//異動資料數量
type AffectedReply struct {
	RowsAffected         int64    `protobuf:"varint,1,opt,name=rows_affected,json=rowsAffected,proto3" json:"rows_affected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AffectedReply) Reset()         { *m = AffectedReply{} }
func (m *AffectedReply) String() string { return proto.CompactTextString(m) }
func (*AffectedReply) ProtoMessage()    {}
func (*AffectedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *AffectedReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AffectedReply.Unmarshal(m, b)
}
func (m *AffectedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AffectedReply.Marshal(b, m, deterministic)
}
func (m *AffectedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffectedReply.Merge(m, src)
}
func (m *AffectedReply) XXX_Size() int {
	return xxx_messageInfo_AffectedReply.Size(m)
}
func (m *AffectedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AffectedReply.DiscardUnknown(m)
}

var xxx_messageInfo_AffectedReply proto.InternalMessageInfo

func (m *AffectedReply) GetRowsAffected() int64 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

func init() {
	proto.RegisterType((*AffectedReply)(nil), "proto.dm.act.AffectedReply")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x55, 0x26, 0x31, 0xcd, 0xb4, 0xb0, 0x46, 0xfb, 0x43, 0xd3, 0xa9, 0x9b, 0x0c, 0x07,
	0xd4, 0x83, 0x2d, 0x36, 0x0e, 0xd0, 0x5b, 0x80, 0x69, 0x42, 0x80, 0x84, 0x0a, 0x93, 0x10, 0x17,
	0xe4, 0xda, 0x6f, 0xa3, 0x50, 0xff, 0x09, 0x8d, 0xb3, 0x32, 0x55, 0x15, 0x12, 0x67, 0x6e, 0x7c,
	0x34, 0xbe, 0x02, 0x47, 0x3e, 0x04, 0x8a, 0x93, 0x40, 0xb2, 0xae, 0x02, 0xa4, 0x1d, 0xa2, 0xc4,
	0xcf, 0xf3, 0xfa, 0xf9, 0x39, 0xaf, 0x13, 0xa3, 0x56, 0x02, 0xd3, 0xb3, 0x88, 0x03, 0x89, 0xa7,
	0xc6, 0x1a, 0xaf, 0xe9, 0x6e, 0x44, 0x28, 0xc2, 0xb8, 0xf5, 0x3b, 0x6e, 0x44, 0x85, 0xa2, 0x8c,
	0xdb, 0xec, 0x4a, 0x64, 0x94, 0x17, 0x2e, 0x5b, 0x11, 0x57, 0x85, 0xb5, 0x17, 0x1a, 0x13, 0x4a,
	0xa0, 0x2c, 0x8e, 0x28, 0xd3, 0xda, 0x58, 0x66, 0x23, 0xa3, 0x93, 0xc2, 0xed, 0x16, 0xae, 0x1b,
	0x8d, 0xd2, 0x31, 0x05, 0x15, 0xdb, 0xf3, 0xdc, 0xc4, 0x0f, 0x50, 0x2b, 0x18, 0x8f, 0x81, 0x5b,
	0x10, 0x43, 0x88, 0xe5, 0xb9, 0x77, 0x07, 0xb5, 0xa6, 0x66, 0x96, 0xbc, 0x67, 0x85, 0x7a, 0xbb,
	0x71, 0xd0, 0xb8, 0xb7, 0x36, 0x6c, 0x66, 0x62, 0x59, 0x79, 0xf8, 0x73, 0x1d, 0xad, 0x05, 0x4f,
	0xde, 0x78, 0x43, 0xb4, 0x7e, 0xfc, 0x89, 0xa9, 0x58, 0x82, 0xb7, 0x43, 0x72, 0x0c, 0x29, 0x31,
	0xe4, 0x38, 0xc3, 0xf8, 0x2b, 0x74, 0xbc, 0xfb, 0xe5, 0xfb, 0x8f, 0x6f, 0xd7, 0xda, 0xb8, 0xe9,
	0x5e, 0x07, 0xf2, 0x94, 0x41, 0xa3, 0xef, 0xbd, 0x45, 0x1b, 0x81, 0x10, 0xcf, 0x34, 0x37, 0x0a,
	0xbc, 0x2e, 0xa9, 0xb6, 0x87, 0xe4, 0xea, 0x10, 0x3e, 0xa6, 0x90, 0xd8, 0x95, 0xd1, 0x3b, 0x2e,
	0x7a, 0x13, 0xdf, 0x70, 0xd1, 0x91, 0x9b, 0x93, 0x25, 0x8f, 0xd0, 0xc6, 0x09, 0xd8, 0x22, 0xb9,
	0x57, 0x4f, 0xfe, 0x6d, 0x94, 0xe1, 0x9d, 0xba, 0xff, 0x32, 0x95, 0x36, 0xca, 0x2b, 0xb0, 0xef,
	0xf2, 0xb7, 0xf0, 0xad, 0x4a, 0x3e, 0x0d, 0xc1, 0x66, 0x8c, 0x19, 0xf2, 0x4e, 0xc0, 0x3e, 0x07,
	0x88, 0x03, 0xce, 0x4d, 0xaa, 0xed, 0x2b, 0x93, 0x58, 0xef, 0xa0, 0x1e, 0x56, 0xb1, 0x4b, 0x5c,
	0xef, 0x12, 0x5c, 0xa5, 0x0c, 0xef, 0x3b, 0x66, 0x07, 0x6f, 0x39, 0xe6, 0xe4, 0x8f, 0x53, 0x82,
	0x3f, 0xa0, 0x9b, 0x81, 0x10, 0x95, 0x29, 0xde, 0x5f, 0x22, 0xfd, 0x0b, 0xbd, 0xad, 0x7d, 0x06,
	0xb8, 0xeb, 0x78, 0xdb, 0x78, 0xf3, 0x22, 0x2f, 0x63, 0x29, 0xd4, 0x3e, 0x8d, 0x05, 0xb3, 0x70,
	0xd5, 0x38, 0xff, 0x52, 0xdc, 0xd7, 0x06, 0x6a, 0x3f, 0x05, 0x09, 0x75, 0xde, 0x7e, 0x3d, 0xef,
	0x75, 0xa4, 0x43, 0x09, 0xff, 0x0c, 0x7c, 0xe4, 0x80, 0x47, 0xfd, 0xfb, 0x4b, 0xfd, 0x9c, 0x27,
	0xe9, 0x48, 0x9b, 0x05, 0x9d, 0x33, 0xce, 0x6d, 0xf9, 0x20, 0x98, 0x5d, 0xd0, 0x39, 0x4f, 0xa7,
	0xd3, 0x85, 0xf7, 0x19, 0x6d, 0xd7, 0xb7, 0x38, 0xd0, 0xe2, 0x85, 0xe1, 0x93, 0x2b, 0xd8, 0xe5,
	0xbb, 0x6e, 0x55, 0x3d, 0xdc, 0x59, 0x5a, 0x95, 0x34, 0x7c, 0x52, 0x6e, 0xb5, 0x41, 0xed, 0x53,
	0x9d, 0x09, 0xff, 0xd3, 0xfe, 0x55, 0x3f, 0x0b, 0x76, 0xc8, 0x3d, 0x7f, 0x77, 0x09, 0x99, 0x3a,
	0xc6, 0xa0, 0xd1, 0x7f, 0x3c, 0x78, 0xf7, 0x30, 0x8c, 0xac, 0x64, 0x23, 0x32, 0x01, 0x2d, 0x18,
	0xe1, 0x46, 0x11, 0x3b, 0xa3, 0x6e, 0x40, 0xb9, 0x51, 0xca, 0xe8, 0x84, 0x9e, 0x1d, 0xe6, 0x27,
	0x0c, 0x0d, 0x8d, 0x64, 0x3a, 0x2c, 0x0e, 0xaa, 0xd1, 0x75, 0x27, 0x1e, 0xfd, 0x0a, 0x00, 0x00,
	0xff, 0xff, 0x83, 0x16, 0x58, 0x72, 0xf7, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ACTClient is the client API for ACT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ACTClient interface {
	// 空方法
	Example(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	//AddIncome 損益表計算 actsli -> acticm
	AddIncome(ctx context.Context, in *IncomeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//GetIncome 取得損益表資料acticm，依廠別、年月、結帳碼
	GetIncome(ctx context.Context, in *GetIncomeRequest, opts ...grpc.CallOption) (*MultiIncome, error)
	// 取得記帳內容資料
	GetKeepAccountPost(ctx context.Context, in *KeepAccountRequest, opts ...grpc.CallOption) (*MultiKeepAccount, error)
	//新增記帳內容
	AddKeepAccount(ctx context.Context, in *MultiKeepAccount, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改記帳內容
	UpdateKeepAccount(ctx context.Context, in *MultiKeepAccount, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除記帳內容
	DeleteKeepAccount(ctx context.Context, in *SingleKeepAccount, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得記帳內容並 lock
	GetKeepAccountAndLock(ctx context.Context, in *KeepAccountRequest, opts ...grpc.CallOption) (*MultiKeepAccount, error)
	//unlock 記帳內容
	UnlockKeepAccount(ctx context.Context, in *MultiKeepAccount, opts ...grpc.CallOption) (*empty.Empty, error)
}

type aCTClient struct {
	cc *grpc.ClientConn
}

func NewACTClient(cc *grpc.ClientConn) ACTClient {
	return &aCTClient{cc}
}

func (c *aCTClient) Example(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.act.ACT/Example", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCTClient) AddIncome(ctx context.Context, in *IncomeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.act.ACT/AddIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCTClient) GetIncome(ctx context.Context, in *GetIncomeRequest, opts ...grpc.CallOption) (*MultiIncome, error) {
	out := new(MultiIncome)
	err := c.cc.Invoke(ctx, "/proto.dm.act.ACT/GetIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCTClient) GetKeepAccountPost(ctx context.Context, in *KeepAccountRequest, opts ...grpc.CallOption) (*MultiKeepAccount, error) {
	out := new(MultiKeepAccount)
	err := c.cc.Invoke(ctx, "/proto.dm.act.ACT/GetKeepAccountPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCTClient) AddKeepAccount(ctx context.Context, in *MultiKeepAccount, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.act.ACT/AddKeepAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCTClient) UpdateKeepAccount(ctx context.Context, in *MultiKeepAccount, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.act.ACT/UpdateKeepAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCTClient) DeleteKeepAccount(ctx context.Context, in *SingleKeepAccount, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.act.ACT/DeleteKeepAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCTClient) GetKeepAccountAndLock(ctx context.Context, in *KeepAccountRequest, opts ...grpc.CallOption) (*MultiKeepAccount, error) {
	out := new(MultiKeepAccount)
	err := c.cc.Invoke(ctx, "/proto.dm.act.ACT/GetKeepAccountAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCTClient) UnlockKeepAccount(ctx context.Context, in *MultiKeepAccount, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.act.ACT/UnlockKeepAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACTServer is the server API for ACT service.
type ACTServer interface {
	// 空方法
	Example(context.Context, *empty.Empty) (*empty.Empty, error)
	//AddIncome 損益表計算 actsli -> acticm
	AddIncome(context.Context, *IncomeRequest) (*empty.Empty, error)
	//GetIncome 取得損益表資料acticm，依廠別、年月、結帳碼
	GetIncome(context.Context, *GetIncomeRequest) (*MultiIncome, error)
	// 取得記帳內容資料
	GetKeepAccountPost(context.Context, *KeepAccountRequest) (*MultiKeepAccount, error)
	//新增記帳內容
	AddKeepAccount(context.Context, *MultiKeepAccount) (*AffectedReply, error)
	//修改記帳內容
	UpdateKeepAccount(context.Context, *MultiKeepAccount) (*AffectedReply, error)
	//刪除記帳內容
	DeleteKeepAccount(context.Context, *SingleKeepAccount) (*AffectedReply, error)
	//取得記帳內容並 lock
	GetKeepAccountAndLock(context.Context, *KeepAccountRequest) (*MultiKeepAccount, error)
	//unlock 記帳內容
	UnlockKeepAccount(context.Context, *MultiKeepAccount) (*empty.Empty, error)
}

func RegisterACTServer(s *grpc.Server, srv ACTServer) {
	s.RegisterService(&_ACT_serviceDesc, srv)
}

func _ACT_Example_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACTServer).Example(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.act.ACT/Example",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACTServer).Example(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACT_AddIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACTServer).AddIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.act.ACT/AddIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACTServer).AddIncome(ctx, req.(*IncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACT_GetIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACTServer).GetIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.act.ACT/GetIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACTServer).GetIncome(ctx, req.(*GetIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACT_GetKeepAccountPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACTServer).GetKeepAccountPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.act.ACT/GetKeepAccountPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACTServer).GetKeepAccountPost(ctx, req.(*KeepAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACT_AddKeepAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiKeepAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACTServer).AddKeepAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.act.ACT/AddKeepAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACTServer).AddKeepAccount(ctx, req.(*MultiKeepAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACT_UpdateKeepAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiKeepAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACTServer).UpdateKeepAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.act.ACT/UpdateKeepAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACTServer).UpdateKeepAccount(ctx, req.(*MultiKeepAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACT_DeleteKeepAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleKeepAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACTServer).DeleteKeepAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.act.ACT/DeleteKeepAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACTServer).DeleteKeepAccount(ctx, req.(*SingleKeepAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACT_GetKeepAccountAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACTServer).GetKeepAccountAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.act.ACT/GetKeepAccountAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACTServer).GetKeepAccountAndLock(ctx, req.(*KeepAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACT_UnlockKeepAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiKeepAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACTServer).UnlockKeepAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.act.ACT/UnlockKeepAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACTServer).UnlockKeepAccount(ctx, req.(*MultiKeepAccount))
	}
	return interceptor(ctx, in, info, handler)
}

var _ACT_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.dm.act.ACT",
	HandlerType: (*ACTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Example",
			Handler:    _ACT_Example_Handler,
		},
		{
			MethodName: "AddIncome",
			Handler:    _ACT_AddIncome_Handler,
		},
		{
			MethodName: "GetIncome",
			Handler:    _ACT_GetIncome_Handler,
		},
		{
			MethodName: "GetKeepAccountPost",
			Handler:    _ACT_GetKeepAccountPost_Handler,
		},
		{
			MethodName: "AddKeepAccount",
			Handler:    _ACT_AddKeepAccount_Handler,
		},
		{
			MethodName: "UpdateKeepAccount",
			Handler:    _ACT_UpdateKeepAccount_Handler,
		},
		{
			MethodName: "DeleteKeepAccount",
			Handler:    _ACT_DeleteKeepAccount_Handler,
		},
		{
			MethodName: "GetKeepAccountAndLock",
			Handler:    _ACT_GetKeepAccountAndLock_Handler,
		},
		{
			MethodName: "UnlockKeepAccount",
			Handler:    _ACT_UnlockKeepAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
