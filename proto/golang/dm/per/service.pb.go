// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package per

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EmployeeMaskRequest_Flag int32

const (
	EmployeeMaskRequest_SUBNO      EmployeeMaskRequest_Flag = 0
	EmployeeMaskRequest_DEPNO      EmployeeMaskRequest_Flag = 1
	EmployeeMaskRequest_EMPNO      EmployeeMaskRequest_Flag = 2
	EmployeeMaskRequest_NAME       EmployeeMaskRequest_Flag = 3
	EmployeeMaskRequest_USER_NO2   EmployeeMaskRequest_Flag = 4
	EmployeeMaskRequest_LEAVE_DATE EmployeeMaskRequest_Flag = 5
	EmployeeMaskRequest_NUM_FLAGS  EmployeeMaskRequest_Flag = 6
)

var EmployeeMaskRequest_Flag_name = map[int32]string{
	0: "SUBNO",
	1: "DEPNO",
	2: "EMPNO",
	3: "NAME",
	4: "USER_NO2",
	5: "LEAVE_DATE",
	6: "NUM_FLAGS",
}

var EmployeeMaskRequest_Flag_value = map[string]int32{
	"SUBNO":      0,
	"DEPNO":      1,
	"EMPNO":      2,
	"NAME":       3,
	"USER_NO2":   4,
	"LEAVE_DATE": 5,
	"NUM_FLAGS":  6,
}

func (x EmployeeMaskRequest_Flag) String() string {
	return proto.EnumName(EmployeeMaskRequest_Flag_name, int32(x))
}

func (EmployeeMaskRequest_Flag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1, 0}
}

type Employee_Flag int32

const (
	Employee_SUBNO         Employee_Flag = 0
	Employee_DEPARTMENT_NO Employee_Flag = 1
	Employee_EMPLOYEE_NO   Employee_Flag = 2
	Employee_NAME          Employee_Flag = 3
	Employee_USER_NO2      Employee_Flag = 4
	Employee_EMAIL         Employee_Flag = 5
	Employee_LEAVE_DATE    Employee_Flag = 6
	Employee_NUM_FLAGS     Employee_Flag = 7
)

var Employee_Flag_name = map[int32]string{
	0: "SUBNO",
	1: "DEPARTMENT_NO",
	2: "EMPLOYEE_NO",
	3: "NAME",
	4: "USER_NO2",
	5: "EMAIL",
	6: "LEAVE_DATE",
	7: "NUM_FLAGS",
}

var Employee_Flag_value = map[string]int32{
	"SUBNO":         0,
	"DEPARTMENT_NO": 1,
	"EMPLOYEE_NO":   2,
	"NAME":          3,
	"USER_NO2":      4,
	"EMAIL":         5,
	"LEAVE_DATE":    6,
	"NUM_FLAGS":     7,
}

func (x Employee_Flag) String() string {
	return proto.EnumName(Employee_Flag_name, int32(x))
}

func (Employee_Flag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2, 0}
}

type QualifiedLectorRequest_ReplyFlag int32

const (
	QualifiedLectorRequest_SUBNO     QualifiedLectorRequest_ReplyFlag = 0
	QualifiedLectorRequest_CURRNO    QualifiedLectorRequest_ReplyFlag = 1
	QualifiedLectorRequest_EMPNO     QualifiedLectorRequest_ReplyFlag = 2
	QualifiedLectorRequest_QUALDATE  QualifiedLectorRequest_ReplyFlag = 3
	QualifiedLectorRequest_BOOKNO    QualifiedLectorRequest_ReplyFlag = 4
	QualifiedLectorRequest_USRNO2    QualifiedLectorRequest_ReplyFlag = 5
	QualifiedLectorRequest_NUM_FLAGS QualifiedLectorRequest_ReplyFlag = 6
)

var QualifiedLectorRequest_ReplyFlag_name = map[int32]string{
	0: "SUBNO",
	1: "CURRNO",
	2: "EMPNO",
	3: "QUALDATE",
	4: "BOOKNO",
	5: "USRNO2",
	6: "NUM_FLAGS",
}

var QualifiedLectorRequest_ReplyFlag_value = map[string]int32{
	"SUBNO":     0,
	"CURRNO":    1,
	"EMPNO":     2,
	"QUALDATE":  3,
	"BOOKNO":    4,
	"USRNO2":    5,
	"NUM_FLAGS": 6,
}

func (x QualifiedLectorRequest_ReplyFlag) String() string {
	return proto.EnumName(QualifiedLectorRequest_ReplyFlag_name, int32(x))
}

func (QualifiedLectorRequest_ReplyFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{8, 0}
}

type File struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

//員工-請求(mask)
type EmployeeMaskRequest struct {
	QueryMask            int32    `protobuf:"varint,1,opt,name=query_mask,json=queryMask,proto3" json:"query_mask,omitempty"`
	Subno                string   `protobuf:"bytes,2,opt,name=subno,proto3" json:"subno,omitempty"`
	DepartmentNo         string   `protobuf:"bytes,3,opt,name=department_no,json=departmentNo,proto3" json:"department_no,omitempty"`
	EmployeeNo           string   `protobuf:"bytes,4,opt,name=employee_no,json=employeeNo,proto3" json:"employee_no,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	UserNo2              string   `protobuf:"bytes,6,opt,name=user_no2,json=userNo2,proto3" json:"user_no2,omitempty"`
	StartLeaveDate       string   `protobuf:"bytes,7,opt,name=start_leave_date,json=startLeaveDate,proto3" json:"start_leave_date,omitempty"`
	EndLeaveDate         string   `protobuf:"bytes,8,opt,name=end_leave_date,json=endLeaveDate,proto3" json:"end_leave_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmployeeMaskRequest) Reset()         { *m = EmployeeMaskRequest{} }
func (m *EmployeeMaskRequest) String() string { return proto.CompactTextString(m) }
func (*EmployeeMaskRequest) ProtoMessage()    {}
func (*EmployeeMaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *EmployeeMaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmployeeMaskRequest.Unmarshal(m, b)
}
func (m *EmployeeMaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmployeeMaskRequest.Marshal(b, m, deterministic)
}
func (m *EmployeeMaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmployeeMaskRequest.Merge(m, src)
}
func (m *EmployeeMaskRequest) XXX_Size() int {
	return xxx_messageInfo_EmployeeMaskRequest.Size(m)
}
func (m *EmployeeMaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmployeeMaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmployeeMaskRequest proto.InternalMessageInfo

func (m *EmployeeMaskRequest) GetQueryMask() int32 {
	if m != nil {
		return m.QueryMask
	}
	return 0
}

func (m *EmployeeMaskRequest) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *EmployeeMaskRequest) GetDepartmentNo() string {
	if m != nil {
		return m.DepartmentNo
	}
	return ""
}

func (m *EmployeeMaskRequest) GetEmployeeNo() string {
	if m != nil {
		return m.EmployeeNo
	}
	return ""
}

func (m *EmployeeMaskRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EmployeeMaskRequest) GetUserNo2() string {
	if m != nil {
		return m.UserNo2
	}
	return ""
}

func (m *EmployeeMaskRequest) GetStartLeaveDate() string {
	if m != nil {
		return m.StartLeaveDate
	}
	return ""
}

func (m *EmployeeMaskRequest) GetEndLeaveDate() string {
	if m != nil {
		return m.EndLeaveDate
	}
	return ""
}

//單筆員工基本資料
type Employee struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	DepartmentNo         string   `protobuf:"bytes,2,opt,name=department_no,json=departmentNo,proto3" json:"department_no,omitempty"`
	EmployeeNo           string   `protobuf:"bytes,3,opt,name=employee_no,json=employeeNo,proto3" json:"employee_no,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	UserNo2              string   `protobuf:"bytes,5,opt,name=user_no2,json=userNo2,proto3" json:"user_no2,omitempty"`
	Email                string   `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	LeaveDate            string   `protobuf:"bytes,7,opt,name=leave_date,json=leaveDate,proto3" json:"leave_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Employee) Reset()         { *m = Employee{} }
func (m *Employee) String() string { return proto.CompactTextString(m) }
func (*Employee) ProtoMessage()    {}
func (*Employee) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *Employee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Employee.Unmarshal(m, b)
}
func (m *Employee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Employee.Marshal(b, m, deterministic)
}
func (m *Employee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Employee.Merge(m, src)
}
func (m *Employee) XXX_Size() int {
	return xxx_messageInfo_Employee.Size(m)
}
func (m *Employee) XXX_DiscardUnknown() {
	xxx_messageInfo_Employee.DiscardUnknown(m)
}

var xxx_messageInfo_Employee proto.InternalMessageInfo

func (m *Employee) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *Employee) GetDepartmentNo() string {
	if m != nil {
		return m.DepartmentNo
	}
	return ""
}

func (m *Employee) GetEmployeeNo() string {
	if m != nil {
		return m.EmployeeNo
	}
	return ""
}

func (m *Employee) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Employee) GetUserNo2() string {
	if m != nil {
		return m.UserNo2
	}
	return ""
}

func (m *Employee) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Employee) GetLeaveDate() string {
	if m != nil {
		return m.LeaveDate
	}
	return ""
}

//多筆員工資本資料
type Employees struct {
	Employees            []*Employee `protobuf:"bytes,1,rep,name=employees,proto3" json:"employees,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Employees) Reset()         { *m = Employees{} }
func (m *Employees) String() string { return proto.CompactTextString(m) }
func (*Employees) ProtoMessage()    {}
func (*Employees) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *Employees) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Employees.Unmarshal(m, b)
}
func (m *Employees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Employees.Marshal(b, m, deterministic)
}
func (m *Employees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Employees.Merge(m, src)
}
func (m *Employees) XXX_Size() int {
	return xxx_messageInfo_Employees.Size(m)
}
func (m *Employees) XXX_DiscardUnknown() {
	xxx_messageInfo_Employees.DiscardUnknown(m)
}

var xxx_messageInfo_Employees proto.InternalMessageInfo

func (m *Employees) GetEmployees() []*Employee {
	if m != nil {
		return m.Employees
	}
	return nil
}

//人事主檔-其他代號
type EmployeeOtherCode struct {
	Othercodes           []string `protobuf:"bytes,1,rep,name=othercodes,proto3" json:"othercodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmployeeOtherCode) Reset()         { *m = EmployeeOtherCode{} }
func (m *EmployeeOtherCode) String() string { return proto.CompactTextString(m) }
func (*EmployeeOtherCode) ProtoMessage()    {}
func (*EmployeeOtherCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *EmployeeOtherCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmployeeOtherCode.Unmarshal(m, b)
}
func (m *EmployeeOtherCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmployeeOtherCode.Marshal(b, m, deterministic)
}
func (m *EmployeeOtherCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmployeeOtherCode.Merge(m, src)
}
func (m *EmployeeOtherCode) XXX_Size() int {
	return xxx_messageInfo_EmployeeOtherCode.Size(m)
}
func (m *EmployeeOtherCode) XXX_DiscardUnknown() {
	xxx_messageInfo_EmployeeOtherCode.DiscardUnknown(m)
}

var xxx_messageInfo_EmployeeOtherCode proto.InternalMessageInfo

func (m *EmployeeOtherCode) GetOthercodes() []string {
	if m != nil {
		return m.Othercodes
	}
	return nil
}

//單筆員工基本資料
type SingleEmployee struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Empno                string   `protobuf:"bytes,2,opt,name=empno,proto3" json:"empno,omitempty"`
	Depno                string   `protobuf:"bytes,3,opt,name=depno,proto3" json:"depno,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Engnam               string   `protobuf:"bytes,5,opt,name=engnam,proto3" json:"engnam,omitempty"`
	Usrno2               string   `protobuf:"bytes,6,opt,name=usrno2,proto3" json:"usrno2,omitempty"`
	Leader               string   `protobuf:"bytes,7,opt,name=leader,proto3" json:"leader,omitempty"`
	Email                string   `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	Entdat               string   `protobuf:"bytes,9,opt,name=entdat,proto3" json:"entdat,omitempty"`
	Entdat2              string   `protobuf:"bytes,10,opt,name=entdat2,proto3" json:"entdat2,omitempty"`
	Dicode               string   `protobuf:"bytes,11,opt,name=dicode,proto3" json:"dicode,omitempty"`
	Saltyp               string   `protobuf:"bytes,12,opt,name=saltyp,proto3" json:"saltyp,omitempty"`
	Jobtit               string   `protobuf:"bytes,13,opt,name=jobtit,proto3" json:"jobtit,omitempty"`
	Strdat               string   `protobuf:"bytes,14,opt,name=strdat,proto3" json:"strdat,omitempty"`
	Postn                string   `protobuf:"bytes,15,opt,name=postn,proto3" json:"postn,omitempty"`
	Updat                string   `protobuf:"bytes,16,opt,name=updat,proto3" json:"updat,omitempty"`
	Suspdat              string   `protobuf:"bytes,17,opt,name=suspdat,proto3" json:"suspdat,omitempty"`
	Rstdat               string   `protobuf:"bytes,18,opt,name=rstdat,proto3" json:"rstdat,omitempty"`
	Levdat               string   `protobuf:"bytes,19,opt,name=levdat,proto3" json:"levdat,omitempty"`
	Levtyp               string   `protobuf:"bytes,20,opt,name=levtyp,proto3" json:"levtyp,omitempty"`
	Retdat               string   `protobuf:"bytes,21,opt,name=retdat,proto3" json:"retdat,omitempty"`
	Usedat               string   `protobuf:"bytes,22,opt,name=usedat,proto3" json:"usedat,omitempty"`
	Tundat               string   `protobuf:"bytes,23,opt,name=tundat,proto3" json:"tundat,omitempty"`
	Sleep                string   `protobuf:"bytes,24,opt,name=sleep,proto3" json:"sleep,omitempty"`
	Usedo                string   `protobuf:"bytes,25,opt,name=usedo,proto3" json:"usedo,omitempty"`
	Zhanzhu              string   `protobuf:"bytes,26,opt,name=zhanzhu,proto3" json:"zhanzhu,omitempty"`
	Workind              string   `protobuf:"bytes,27,opt,name=workind,proto3" json:"workind,omitempty"`
	Code14               string   `protobuf:"bytes,28,opt,name=code14,proto3" json:"code14,omitempty"`
	Code37               string   `protobuf:"bytes,29,opt,name=code37,proto3" json:"code37,omitempty"`
	Code15               string   `protobuf:"bytes,30,opt,name=code15,proto3" json:"code15,omitempty"`
	Code21               string   `protobuf:"bytes,31,opt,name=code21,proto3" json:"code21,omitempty"`
	Code22               string   `protobuf:"bytes,32,opt,name=code22,proto3" json:"code22,omitempty"`
	Code23               string   `protobuf:"bytes,33,opt,name=code23,proto3" json:"code23,omitempty"`
	Othcod1              string   `protobuf:"bytes,34,opt,name=othcod1,proto3" json:"othcod1,omitempty"`
	Othcod2              string   `protobuf:"bytes,35,opt,name=othcod2,proto3" json:"othcod2,omitempty"`
	Othcod3              string   `protobuf:"bytes,36,opt,name=othcod3,proto3" json:"othcod3,omitempty"`
	Certno               string   `protobuf:"bytes,37,opt,name=certno,proto3" json:"certno,omitempty"`
	Cyymm                string   `protobuf:"bytes,38,opt,name=cyymm,proto3" json:"cyymm,omitempty"`
	Passno               string   `protobuf:"bytes,39,opt,name=passno,proto3" json:"passno,omitempty"`
	Natplc               string   `protobuf:"bytes,40,opt,name=natplc,proto3" json:"natplc,omitempty"`
	Bldtyp               string   `protobuf:"bytes,41,opt,name=bldtyp,proto3" json:"bldtyp,omitempty"`
	Sextyp               string   `protobuf:"bytes,42,opt,name=sextyp,proto3" json:"sextyp,omitempty"`
	Bithdat              string   `protobuf:"bytes,43,opt,name=bithdat,proto3" json:"bithdat,omitempty"`
	Telno                string   `protobuf:"bytes,44,opt,name=telno,proto3" json:"telno,omitempty"`
	Cellph               string   `protobuf:"bytes,45,opt,name=cellph,proto3" json:"cellph,omitempty"`
	Conter               string   `protobuf:"bytes,46,opt,name=conter,proto3" json:"conter,omitempty"`
	Sostel               string   `protobuf:"bytes,47,opt,name=sostel,proto3" json:"sostel,omitempty"`
	Prmadr               string   `protobuf:"bytes,48,opt,name=prmadr,proto3" json:"prmadr,omitempty"`
	Comadr               string   `protobuf:"bytes,49,opt,name=comadr,proto3" json:"comadr,omitempty"`
	Eduno                string   `protobuf:"bytes,50,opt,name=eduno,proto3" json:"eduno,omitempty"`
	Scolno               string   `protobuf:"bytes,51,opt,name=scolno,proto3" json:"scolno,omitempty"`
	Subjno               string   `protobuf:"bytes,52,opt,name=subjno,proto3" json:"subjno,omitempty"`
	Byymm                string   `protobuf:"bytes,53,opt,name=byymm,proto3" json:"byymm,omitempty"`
	Comexp               string   `protobuf:"bytes,54,opt,name=comexp,proto3" json:"comexp,omitempty"`
	Marial               string   `protobuf:"bytes,55,opt,name=marial,proto3" json:"marial,omitempty"`
	Spsnam               string   `protobuf:"bytes,56,opt,name=spsnam,proto3" json:"spsnam,omitempty"`
	Rasno                string   `protobuf:"bytes,57,opt,name=rasno,proto3" json:"rasno,omitempty"`
	Nattyp               string   `protobuf:"bytes,58,opt,name=nattyp,proto3" json:"nattyp,omitempty"`
	Figure               string   `protobuf:"bytes,59,opt,name=figure,proto3" json:"figure,omitempty"`
	Source               string   `protobuf:"bytes,60,opt,name=source,proto3" json:"source,omitempty"`
	Inempno              string   `protobuf:"bytes,61,opt,name=inempno,proto3" json:"inempno,omitempty"`
	Intnam               string   `protobuf:"bytes,62,opt,name=intnam,proto3" json:"intnam,omitempty"`
	Intoffice            string   `protobuf:"bytes,63,opt,name=intoffice,proto3" json:"intoffice,omitempty"`
	Comm                 string   `protobuf:"bytes,64,opt,name=comm,proto3" json:"comm,omitempty"`
	Indat                string   `protobuf:"bytes,65,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,66,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleEmployee) Reset()         { *m = SingleEmployee{} }
func (m *SingleEmployee) String() string { return proto.CompactTextString(m) }
func (*SingleEmployee) ProtoMessage()    {}
func (*SingleEmployee) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}

func (m *SingleEmployee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleEmployee.Unmarshal(m, b)
}
func (m *SingleEmployee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleEmployee.Marshal(b, m, deterministic)
}
func (m *SingleEmployee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleEmployee.Merge(m, src)
}
func (m *SingleEmployee) XXX_Size() int {
	return xxx_messageInfo_SingleEmployee.Size(m)
}
func (m *SingleEmployee) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleEmployee.DiscardUnknown(m)
}

var xxx_messageInfo_SingleEmployee proto.InternalMessageInfo

func (m *SingleEmployee) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleEmployee) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *SingleEmployee) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *SingleEmployee) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SingleEmployee) GetEngnam() string {
	if m != nil {
		return m.Engnam
	}
	return ""
}

func (m *SingleEmployee) GetUsrno2() string {
	if m != nil {
		return m.Usrno2
	}
	return ""
}

func (m *SingleEmployee) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

func (m *SingleEmployee) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SingleEmployee) GetEntdat() string {
	if m != nil {
		return m.Entdat
	}
	return ""
}

func (m *SingleEmployee) GetEntdat2() string {
	if m != nil {
		return m.Entdat2
	}
	return ""
}

func (m *SingleEmployee) GetDicode() string {
	if m != nil {
		return m.Dicode
	}
	return ""
}

func (m *SingleEmployee) GetSaltyp() string {
	if m != nil {
		return m.Saltyp
	}
	return ""
}

func (m *SingleEmployee) GetJobtit() string {
	if m != nil {
		return m.Jobtit
	}
	return ""
}

func (m *SingleEmployee) GetStrdat() string {
	if m != nil {
		return m.Strdat
	}
	return ""
}

func (m *SingleEmployee) GetPostn() string {
	if m != nil {
		return m.Postn
	}
	return ""
}

func (m *SingleEmployee) GetUpdat() string {
	if m != nil {
		return m.Updat
	}
	return ""
}

func (m *SingleEmployee) GetSuspdat() string {
	if m != nil {
		return m.Suspdat
	}
	return ""
}

func (m *SingleEmployee) GetRstdat() string {
	if m != nil {
		return m.Rstdat
	}
	return ""
}

func (m *SingleEmployee) GetLevdat() string {
	if m != nil {
		return m.Levdat
	}
	return ""
}

func (m *SingleEmployee) GetLevtyp() string {
	if m != nil {
		return m.Levtyp
	}
	return ""
}

func (m *SingleEmployee) GetRetdat() string {
	if m != nil {
		return m.Retdat
	}
	return ""
}

func (m *SingleEmployee) GetUsedat() string {
	if m != nil {
		return m.Usedat
	}
	return ""
}

func (m *SingleEmployee) GetTundat() string {
	if m != nil {
		return m.Tundat
	}
	return ""
}

func (m *SingleEmployee) GetSleep() string {
	if m != nil {
		return m.Sleep
	}
	return ""
}

func (m *SingleEmployee) GetUsedo() string {
	if m != nil {
		return m.Usedo
	}
	return ""
}

func (m *SingleEmployee) GetZhanzhu() string {
	if m != nil {
		return m.Zhanzhu
	}
	return ""
}

func (m *SingleEmployee) GetWorkind() string {
	if m != nil {
		return m.Workind
	}
	return ""
}

func (m *SingleEmployee) GetCode14() string {
	if m != nil {
		return m.Code14
	}
	return ""
}

func (m *SingleEmployee) GetCode37() string {
	if m != nil {
		return m.Code37
	}
	return ""
}

func (m *SingleEmployee) GetCode15() string {
	if m != nil {
		return m.Code15
	}
	return ""
}

func (m *SingleEmployee) GetCode21() string {
	if m != nil {
		return m.Code21
	}
	return ""
}

func (m *SingleEmployee) GetCode22() string {
	if m != nil {
		return m.Code22
	}
	return ""
}

func (m *SingleEmployee) GetCode23() string {
	if m != nil {
		return m.Code23
	}
	return ""
}

func (m *SingleEmployee) GetOthcod1() string {
	if m != nil {
		return m.Othcod1
	}
	return ""
}

func (m *SingleEmployee) GetOthcod2() string {
	if m != nil {
		return m.Othcod2
	}
	return ""
}

func (m *SingleEmployee) GetOthcod3() string {
	if m != nil {
		return m.Othcod3
	}
	return ""
}

func (m *SingleEmployee) GetCertno() string {
	if m != nil {
		return m.Certno
	}
	return ""
}

func (m *SingleEmployee) GetCyymm() string {
	if m != nil {
		return m.Cyymm
	}
	return ""
}

func (m *SingleEmployee) GetPassno() string {
	if m != nil {
		return m.Passno
	}
	return ""
}

func (m *SingleEmployee) GetNatplc() string {
	if m != nil {
		return m.Natplc
	}
	return ""
}

func (m *SingleEmployee) GetBldtyp() string {
	if m != nil {
		return m.Bldtyp
	}
	return ""
}

func (m *SingleEmployee) GetSextyp() string {
	if m != nil {
		return m.Sextyp
	}
	return ""
}

func (m *SingleEmployee) GetBithdat() string {
	if m != nil {
		return m.Bithdat
	}
	return ""
}

func (m *SingleEmployee) GetTelno() string {
	if m != nil {
		return m.Telno
	}
	return ""
}

func (m *SingleEmployee) GetCellph() string {
	if m != nil {
		return m.Cellph
	}
	return ""
}

func (m *SingleEmployee) GetConter() string {
	if m != nil {
		return m.Conter
	}
	return ""
}

func (m *SingleEmployee) GetSostel() string {
	if m != nil {
		return m.Sostel
	}
	return ""
}

func (m *SingleEmployee) GetPrmadr() string {
	if m != nil {
		return m.Prmadr
	}
	return ""
}

func (m *SingleEmployee) GetComadr() string {
	if m != nil {
		return m.Comadr
	}
	return ""
}

func (m *SingleEmployee) GetEduno() string {
	if m != nil {
		return m.Eduno
	}
	return ""
}

func (m *SingleEmployee) GetScolno() string {
	if m != nil {
		return m.Scolno
	}
	return ""
}

func (m *SingleEmployee) GetSubjno() string {
	if m != nil {
		return m.Subjno
	}
	return ""
}

func (m *SingleEmployee) GetByymm() string {
	if m != nil {
		return m.Byymm
	}
	return ""
}

func (m *SingleEmployee) GetComexp() string {
	if m != nil {
		return m.Comexp
	}
	return ""
}

func (m *SingleEmployee) GetMarial() string {
	if m != nil {
		return m.Marial
	}
	return ""
}

func (m *SingleEmployee) GetSpsnam() string {
	if m != nil {
		return m.Spsnam
	}
	return ""
}

func (m *SingleEmployee) GetRasno() string {
	if m != nil {
		return m.Rasno
	}
	return ""
}

func (m *SingleEmployee) GetNattyp() string {
	if m != nil {
		return m.Nattyp
	}
	return ""
}

func (m *SingleEmployee) GetFigure() string {
	if m != nil {
		return m.Figure
	}
	return ""
}

func (m *SingleEmployee) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SingleEmployee) GetInempno() string {
	if m != nil {
		return m.Inempno
	}
	return ""
}

func (m *SingleEmployee) GetIntnam() string {
	if m != nil {
		return m.Intnam
	}
	return ""
}

func (m *SingleEmployee) GetIntoffice() string {
	if m != nil {
		return m.Intoffice
	}
	return ""
}

func (m *SingleEmployee) GetComm() string {
	if m != nil {
		return m.Comm
	}
	return ""
}

func (m *SingleEmployee) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleEmployee) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//單筆職能代號
type SingleJob struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Jobno                string   `protobuf:"bytes,2,opt,name=jobno,proto3" json:"jobno,omitempty"`
	Jobname              string   `protobuf:"bytes,3,opt,name=jobname,proto3" json:"jobname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleJob) Reset()         { *m = SingleJob{} }
func (m *SingleJob) String() string { return proto.CompactTextString(m) }
func (*SingleJob) ProtoMessage()    {}
func (*SingleJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6}
}

func (m *SingleJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleJob.Unmarshal(m, b)
}
func (m *SingleJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleJob.Marshal(b, m, deterministic)
}
func (m *SingleJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleJob.Merge(m, src)
}
func (m *SingleJob) XXX_Size() int {
	return xxx_messageInfo_SingleJob.Size(m)
}
func (m *SingleJob) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleJob.DiscardUnknown(m)
}

var xxx_messageInfo_SingleJob proto.InternalMessageInfo

func (m *SingleJob) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleJob) GetJobno() string {
	if m != nil {
		return m.Jobno
	}
	return ""
}

func (m *SingleJob) GetJobname() string {
	if m != nil {
		return m.Jobname
	}
	return ""
}

//多筆職能代號
type MultiJob struct {
	Dataset              []*SingleJob `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MultiJob) Reset()         { *m = MultiJob{} }
func (m *MultiJob) String() string { return proto.CompactTextString(m) }
func (*MultiJob) ProtoMessage()    {}
func (*MultiJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7}
}

func (m *MultiJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiJob.Unmarshal(m, b)
}
func (m *MultiJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiJob.Marshal(b, m, deterministic)
}
func (m *MultiJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiJob.Merge(m, src)
}
func (m *MultiJob) XXX_Size() int {
	return xxx_messageInfo_MultiJob.Size(m)
}
func (m *MultiJob) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiJob.DiscardUnknown(m)
}

var xxx_messageInfo_MultiJob proto.InternalMessageInfo

func (m *MultiJob) GetDataset() []*SingleJob {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆合格講師資料
type QualifiedLectorRequest struct {
	Mask                 int32    `protobuf:"varint,1,opt,name=mask,proto3" json:"mask,omitempty"`
	Subno                string   `protobuf:"bytes,2,opt,name=subno,proto3" json:"subno,omitempty"`
	Currno               string   `protobuf:"bytes,3,opt,name=currno,proto3" json:"currno,omitempty"`
	Empno                string   `protobuf:"bytes,4,opt,name=empno,proto3" json:"empno,omitempty"`
	Qualdate             string   `protobuf:"bytes,5,opt,name=qualdate,proto3" json:"qualdate,omitempty"`
	Bookno               string   `protobuf:"bytes,6,opt,name=bookno,proto3" json:"bookno,omitempty"`
	Usrno2               string   `protobuf:"bytes,7,opt,name=usrno2,proto3" json:"usrno2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QualifiedLectorRequest) Reset()         { *m = QualifiedLectorRequest{} }
func (m *QualifiedLectorRequest) String() string { return proto.CompactTextString(m) }
func (*QualifiedLectorRequest) ProtoMessage()    {}
func (*QualifiedLectorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{8}
}

func (m *QualifiedLectorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QualifiedLectorRequest.Unmarshal(m, b)
}
func (m *QualifiedLectorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QualifiedLectorRequest.Marshal(b, m, deterministic)
}
func (m *QualifiedLectorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QualifiedLectorRequest.Merge(m, src)
}
func (m *QualifiedLectorRequest) XXX_Size() int {
	return xxx_messageInfo_QualifiedLectorRequest.Size(m)
}
func (m *QualifiedLectorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QualifiedLectorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QualifiedLectorRequest proto.InternalMessageInfo

func (m *QualifiedLectorRequest) GetMask() int32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *QualifiedLectorRequest) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *QualifiedLectorRequest) GetCurrno() string {
	if m != nil {
		return m.Currno
	}
	return ""
}

func (m *QualifiedLectorRequest) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *QualifiedLectorRequest) GetQualdate() string {
	if m != nil {
		return m.Qualdate
	}
	return ""
}

func (m *QualifiedLectorRequest) GetBookno() string {
	if m != nil {
		return m.Bookno
	}
	return ""
}

func (m *QualifiedLectorRequest) GetUsrno2() string {
	if m != nil {
		return m.Usrno2
	}
	return ""
}

//單筆合格講師資料
type SingleQualifiedLector struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Currno               string   `protobuf:"bytes,2,opt,name=currno,proto3" json:"currno,omitempty"`
	Empno                string   `protobuf:"bytes,3,opt,name=empno,proto3" json:"empno,omitempty"`
	Qualdate             string   `protobuf:"bytes,4,opt,name=qualdate,proto3" json:"qualdate,omitempty"`
	Bookno               string   `protobuf:"bytes,5,opt,name=bookno,proto3" json:"bookno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleQualifiedLector) Reset()         { *m = SingleQualifiedLector{} }
func (m *SingleQualifiedLector) String() string { return proto.CompactTextString(m) }
func (*SingleQualifiedLector) ProtoMessage()    {}
func (*SingleQualifiedLector) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{9}
}

func (m *SingleQualifiedLector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleQualifiedLector.Unmarshal(m, b)
}
func (m *SingleQualifiedLector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleQualifiedLector.Marshal(b, m, deterministic)
}
func (m *SingleQualifiedLector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleQualifiedLector.Merge(m, src)
}
func (m *SingleQualifiedLector) XXX_Size() int {
	return xxx_messageInfo_SingleQualifiedLector.Size(m)
}
func (m *SingleQualifiedLector) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleQualifiedLector.DiscardUnknown(m)
}

var xxx_messageInfo_SingleQualifiedLector proto.InternalMessageInfo

func (m *SingleQualifiedLector) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleQualifiedLector) GetCurrno() string {
	if m != nil {
		return m.Currno
	}
	return ""
}

func (m *SingleQualifiedLector) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *SingleQualifiedLector) GetQualdate() string {
	if m != nil {
		return m.Qualdate
	}
	return ""
}

func (m *SingleQualifiedLector) GetBookno() string {
	if m != nil {
		return m.Bookno
	}
	return ""
}

//多筆合格講師資料
type MultiQualifiedLector struct {
	Dataset              []*SingleQualifiedLector `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MultiQualifiedLector) Reset()         { *m = MultiQualifiedLector{} }
func (m *MultiQualifiedLector) String() string { return proto.CompactTextString(m) }
func (*MultiQualifiedLector) ProtoMessage()    {}
func (*MultiQualifiedLector) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{10}
}

func (m *MultiQualifiedLector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiQualifiedLector.Unmarshal(m, b)
}
func (m *MultiQualifiedLector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiQualifiedLector.Marshal(b, m, deterministic)
}
func (m *MultiQualifiedLector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiQualifiedLector.Merge(m, src)
}
func (m *MultiQualifiedLector) XXX_Size() int {
	return xxx_messageInfo_MultiQualifiedLector.Size(m)
}
func (m *MultiQualifiedLector) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiQualifiedLector.DiscardUnknown(m)
}

var xxx_messageInfo_MultiQualifiedLector proto.InternalMessageInfo

func (m *MultiQualifiedLector) GetDataset() []*SingleQualifiedLector {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//授課單位主檔  -授課單位名稱
type TeachingUnitName struct {
	Teaname              string   `protobuf:"bytes,1,opt,name=teaname,proto3" json:"teaname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeachingUnitName) Reset()         { *m = TeachingUnitName{} }
func (m *TeachingUnitName) String() string { return proto.CompactTextString(m) }
func (*TeachingUnitName) ProtoMessage()    {}
func (*TeachingUnitName) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{11}
}

func (m *TeachingUnitName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeachingUnitName.Unmarshal(m, b)
}
func (m *TeachingUnitName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeachingUnitName.Marshal(b, m, deterministic)
}
func (m *TeachingUnitName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeachingUnitName.Merge(m, src)
}
func (m *TeachingUnitName) XXX_Size() int {
	return xxx_messageInfo_TeachingUnitName.Size(m)
}
func (m *TeachingUnitName) XXX_DiscardUnknown() {
	xxx_messageInfo_TeachingUnitName.DiscardUnknown(m)
}

var xxx_messageInfo_TeachingUnitName proto.InternalMessageInfo

func (m *TeachingUnitName) GetTeaname() string {
	if m != nil {
		return m.Teaname
	}
	return ""
}

//單筆授課單位資料
type SingleTeachingUnit struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Teaunit              string   `protobuf:"bytes,2,opt,name=teaunit,proto3" json:"teaunit,omitempty"`
	Teaname              string   `protobuf:"bytes,3,opt,name=teaname,proto3" json:"teaname,omitempty"`
	Comm                 string   `protobuf:"bytes,4,opt,name=comm,proto3" json:"comm,omitempty"`
	Presid               string   `protobuf:"bytes,5,opt,name=presid,proto3" json:"presid,omitempty"`
	Address              string   `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	Telno                string   `protobuf:"bytes,7,opt,name=telno,proto3" json:"telno,omitempty"`
	Faxno                string   `protobuf:"bytes,8,opt,name=faxno,proto3" json:"faxno,omitempty"`
	Email                string   `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleTeachingUnit) Reset()         { *m = SingleTeachingUnit{} }
func (m *SingleTeachingUnit) String() string { return proto.CompactTextString(m) }
func (*SingleTeachingUnit) ProtoMessage()    {}
func (*SingleTeachingUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{12}
}

func (m *SingleTeachingUnit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleTeachingUnit.Unmarshal(m, b)
}
func (m *SingleTeachingUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleTeachingUnit.Marshal(b, m, deterministic)
}
func (m *SingleTeachingUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleTeachingUnit.Merge(m, src)
}
func (m *SingleTeachingUnit) XXX_Size() int {
	return xxx_messageInfo_SingleTeachingUnit.Size(m)
}
func (m *SingleTeachingUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleTeachingUnit.DiscardUnknown(m)
}

var xxx_messageInfo_SingleTeachingUnit proto.InternalMessageInfo

func (m *SingleTeachingUnit) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleTeachingUnit) GetTeaunit() string {
	if m != nil {
		return m.Teaunit
	}
	return ""
}

func (m *SingleTeachingUnit) GetTeaname() string {
	if m != nil {
		return m.Teaname
	}
	return ""
}

func (m *SingleTeachingUnit) GetComm() string {
	if m != nil {
		return m.Comm
	}
	return ""
}

func (m *SingleTeachingUnit) GetPresid() string {
	if m != nil {
		return m.Presid
	}
	return ""
}

func (m *SingleTeachingUnit) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SingleTeachingUnit) GetTelno() string {
	if m != nil {
		return m.Telno
	}
	return ""
}

func (m *SingleTeachingUnit) GetFaxno() string {
	if m != nil {
		return m.Faxno
	}
	return ""
}

func (m *SingleTeachingUnit) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

//多筆授課單位資料
type MultiTeachingUnit struct {
	Dataset              []*SingleTeachingUnit `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MultiTeachingUnit) Reset()         { *m = MultiTeachingUnit{} }
func (m *MultiTeachingUnit) String() string { return proto.CompactTextString(m) }
func (*MultiTeachingUnit) ProtoMessage()    {}
func (*MultiTeachingUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{13}
}

func (m *MultiTeachingUnit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiTeachingUnit.Unmarshal(m, b)
}
func (m *MultiTeachingUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiTeachingUnit.Marshal(b, m, deterministic)
}
func (m *MultiTeachingUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiTeachingUnit.Merge(m, src)
}
func (m *MultiTeachingUnit) XXX_Size() int {
	return xxx_messageInfo_MultiTeachingUnit.Size(m)
}
func (m *MultiTeachingUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiTeachingUnit.DiscardUnknown(m)
}

var xxx_messageInfo_MultiTeachingUnit proto.InternalMessageInfo

func (m *MultiTeachingUnit) GetDataset() []*SingleTeachingUnit {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//中分類課程主檔  -課程名稱
type MediumSortCouseName struct {
	Medname              string   `protobuf:"bytes,1,opt,name=medname,proto3" json:"medname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediumSortCouseName) Reset()         { *m = MediumSortCouseName{} }
func (m *MediumSortCouseName) String() string { return proto.CompactTextString(m) }
func (*MediumSortCouseName) ProtoMessage()    {}
func (*MediumSortCouseName) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{14}
}

func (m *MediumSortCouseName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MediumSortCouseName.Unmarshal(m, b)
}
func (m *MediumSortCouseName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MediumSortCouseName.Marshal(b, m, deterministic)
}
func (m *MediumSortCouseName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediumSortCouseName.Merge(m, src)
}
func (m *MediumSortCouseName) XXX_Size() int {
	return xxx_messageInfo_MediumSortCouseName.Size(m)
}
func (m *MediumSortCouseName) XXX_DiscardUnknown() {
	xxx_messageInfo_MediumSortCouseName.DiscardUnknown(m)
}

var xxx_messageInfo_MediumSortCouseName proto.InternalMessageInfo

func (m *MediumSortCouseName) GetMedname() string {
	if m != nil {
		return m.Medname
	}
	return ""
}

//單筆中分類課程
type SingleMediumSortCouse struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Bigno                string   `protobuf:"bytes,2,opt,name=bigno,proto3" json:"bigno,omitempty"`
	Medno                string   `protobuf:"bytes,3,opt,name=medno,proto3" json:"medno,omitempty"`
	Medname              string   `protobuf:"bytes,4,opt,name=medname,proto3" json:"medname,omitempty"`
	Postn1               string   `protobuf:"bytes,5,opt,name=postn1,proto3" json:"postn1,omitempty"`
	Postn2               string   `protobuf:"bytes,6,opt,name=postn2,proto3" json:"postn2,omitempty"`
	Contkey              string   `protobuf:"bytes,7,opt,name=contkey,proto3" json:"contkey,omitempty"`
	Jobtit1              string   `protobuf:"bytes,8,opt,name=jobtit1,proto3" json:"jobtit1,omitempty"`
	Jobtit2              string   `protobuf:"bytes,9,opt,name=jobtit2,proto3" json:"jobtit2,omitempty"`
	Jobtit3              string   `protobuf:"bytes,10,opt,name=jobtit3,proto3" json:"jobtit3,omitempty"`
	Jobtit4              string   `protobuf:"bytes,11,opt,name=jobtit4,proto3" json:"jobtit4,omitempty"`
	Jobtit5              string   `protobuf:"bytes,12,opt,name=jobtit5,proto3" json:"jobtit5,omitempty"`
	Jobno1               string   `protobuf:"bytes,13,opt,name=jobno1,proto3" json:"jobno1,omitempty"`
	Jobno2               string   `protobuf:"bytes,14,opt,name=jobno2,proto3" json:"jobno2,omitempty"`
	Jobno3               string   `protobuf:"bytes,15,opt,name=jobno3,proto3" json:"jobno3,omitempty"`
	Jobno4               string   `protobuf:"bytes,16,opt,name=jobno4,proto3" json:"jobno4,omitempty"`
	Jobno5               string   `protobuf:"bytes,17,opt,name=jobno5,proto3" json:"jobno5,omitempty"`
	Require              string   `protobuf:"bytes,18,opt,name=require,proto3" json:"require,omitempty"`
	Indat                string   `protobuf:"bytes,19,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,20,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleMediumSortCouse) Reset()         { *m = SingleMediumSortCouse{} }
func (m *SingleMediumSortCouse) String() string { return proto.CompactTextString(m) }
func (*SingleMediumSortCouse) ProtoMessage()    {}
func (*SingleMediumSortCouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{15}
}

func (m *SingleMediumSortCouse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleMediumSortCouse.Unmarshal(m, b)
}
func (m *SingleMediumSortCouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleMediumSortCouse.Marshal(b, m, deterministic)
}
func (m *SingleMediumSortCouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleMediumSortCouse.Merge(m, src)
}
func (m *SingleMediumSortCouse) XXX_Size() int {
	return xxx_messageInfo_SingleMediumSortCouse.Size(m)
}
func (m *SingleMediumSortCouse) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleMediumSortCouse.DiscardUnknown(m)
}

var xxx_messageInfo_SingleMediumSortCouse proto.InternalMessageInfo

func (m *SingleMediumSortCouse) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleMediumSortCouse) GetBigno() string {
	if m != nil {
		return m.Bigno
	}
	return ""
}

func (m *SingleMediumSortCouse) GetMedno() string {
	if m != nil {
		return m.Medno
	}
	return ""
}

func (m *SingleMediumSortCouse) GetMedname() string {
	if m != nil {
		return m.Medname
	}
	return ""
}

func (m *SingleMediumSortCouse) GetPostn1() string {
	if m != nil {
		return m.Postn1
	}
	return ""
}

func (m *SingleMediumSortCouse) GetPostn2() string {
	if m != nil {
		return m.Postn2
	}
	return ""
}

func (m *SingleMediumSortCouse) GetContkey() string {
	if m != nil {
		return m.Contkey
	}
	return ""
}

func (m *SingleMediumSortCouse) GetJobtit1() string {
	if m != nil {
		return m.Jobtit1
	}
	return ""
}

func (m *SingleMediumSortCouse) GetJobtit2() string {
	if m != nil {
		return m.Jobtit2
	}
	return ""
}

func (m *SingleMediumSortCouse) GetJobtit3() string {
	if m != nil {
		return m.Jobtit3
	}
	return ""
}

func (m *SingleMediumSortCouse) GetJobtit4() string {
	if m != nil {
		return m.Jobtit4
	}
	return ""
}

func (m *SingleMediumSortCouse) GetJobtit5() string {
	if m != nil {
		return m.Jobtit5
	}
	return ""
}

func (m *SingleMediumSortCouse) GetJobno1() string {
	if m != nil {
		return m.Jobno1
	}
	return ""
}

func (m *SingleMediumSortCouse) GetJobno2() string {
	if m != nil {
		return m.Jobno2
	}
	return ""
}

func (m *SingleMediumSortCouse) GetJobno3() string {
	if m != nil {
		return m.Jobno3
	}
	return ""
}

func (m *SingleMediumSortCouse) GetJobno4() string {
	if m != nil {
		return m.Jobno4
	}
	return ""
}

func (m *SingleMediumSortCouse) GetJobno5() string {
	if m != nil {
		return m.Jobno5
	}
	return ""
}

func (m *SingleMediumSortCouse) GetRequire() string {
	if m != nil {
		return m.Require
	}
	return ""
}

func (m *SingleMediumSortCouse) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleMediumSortCouse) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆中分類課程
type MultiMediumSortCouse struct {
	Dataset              []*SingleMediumSortCouse `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MultiMediumSortCouse) Reset()         { *m = MultiMediumSortCouse{} }
func (m *MultiMediumSortCouse) String() string { return proto.CompactTextString(m) }
func (*MultiMediumSortCouse) ProtoMessage()    {}
func (*MultiMediumSortCouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{16}
}

func (m *MultiMediumSortCouse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiMediumSortCouse.Unmarshal(m, b)
}
func (m *MultiMediumSortCouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiMediumSortCouse.Marshal(b, m, deterministic)
}
func (m *MultiMediumSortCouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMediumSortCouse.Merge(m, src)
}
func (m *MultiMediumSortCouse) XXX_Size() int {
	return xxx_messageInfo_MultiMediumSortCouse.Size(m)
}
func (m *MultiMediumSortCouse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMediumSortCouse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMediumSortCouse proto.InternalMessageInfo

func (m *MultiMediumSortCouse) GetDataset() []*SingleMediumSortCouse {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆開班課程資料
type SingleCouse struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Year                 string   `protobuf:"bytes,2,opt,name=year,proto3" json:"year,omitempty"`
	Depno                string   `protobuf:"bytes,3,opt,name=depno,proto3" json:"depno,omitempty"`
	Serno                string   `protobuf:"bytes,4,opt,name=serno,proto3" json:"serno,omitempty"`
	Factory              string   `protobuf:"bytes,5,opt,name=factory,proto3" json:"factory,omitempty"`
	Currno               string   `protobuf:"bytes,6,opt,name=currno,proto3" json:"currno,omitempty"`
	Planno               string   `protobuf:"bytes,7,opt,name=planno,proto3" json:"planno,omitempty"`
	Explain              string   `protobuf:"bytes,8,opt,name=explain,proto3" json:"explain,omitempty"`
	Sponsor              string   `protobuf:"bytes,9,opt,name=sponsor,proto3" json:"sponsor,omitempty"`
	Lectno               string   `protobuf:"bytes,10,opt,name=lectno,proto3" json:"lectno,omitempty"`
	Teaunit              string   `protobuf:"bytes,11,opt,name=teaunit,proto3" json:"teaunit,omitempty"`
	Lectname             string   `protobuf:"bytes,12,opt,name=lectname,proto3" json:"lectname,omitempty"`
	Joinple              int32    `protobuf:"varint,13,opt,name=joinple,proto3" json:"joinple,omitempty"`
	People               int32    `protobuf:"varint,14,opt,name=people,proto3" json:"people,omitempty"`
	Lectexp              int64    `protobuf:"varint,15,opt,name=lectexp,proto3" json:"lectexp,omitempty"`
	Bookexp              int64    `protobuf:"varint,16,opt,name=bookexp,proto3" json:"bookexp,omitempty"`
	Otherexp             int64    `protobuf:"varint,17,opt,name=otherexp,proto3" json:"otherexp,omitempty"`
	Stadate              string   `protobuf:"bytes,18,opt,name=stadate,proto3" json:"stadate,omitempty"`
	Time1                string   `protobuf:"bytes,19,opt,name=time1,proto3" json:"time1,omitempty"`
	Enddate              string   `protobuf:"bytes,20,opt,name=enddate,proto3" json:"enddate,omitempty"`
	Time2                string   `protobuf:"bytes,21,opt,name=time2,proto3" json:"time2,omitempty"`
	Hour                 float32  `protobuf:"fixed32,22,opt,name=hour,proto3" json:"hour,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleCouse) Reset()         { *m = SingleCouse{} }
func (m *SingleCouse) String() string { return proto.CompactTextString(m) }
func (*SingleCouse) ProtoMessage()    {}
func (*SingleCouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{17}
}

func (m *SingleCouse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleCouse.Unmarshal(m, b)
}
func (m *SingleCouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleCouse.Marshal(b, m, deterministic)
}
func (m *SingleCouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleCouse.Merge(m, src)
}
func (m *SingleCouse) XXX_Size() int {
	return xxx_messageInfo_SingleCouse.Size(m)
}
func (m *SingleCouse) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleCouse.DiscardUnknown(m)
}

var xxx_messageInfo_SingleCouse proto.InternalMessageInfo

func (m *SingleCouse) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleCouse) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *SingleCouse) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *SingleCouse) GetSerno() string {
	if m != nil {
		return m.Serno
	}
	return ""
}

func (m *SingleCouse) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *SingleCouse) GetCurrno() string {
	if m != nil {
		return m.Currno
	}
	return ""
}

func (m *SingleCouse) GetPlanno() string {
	if m != nil {
		return m.Planno
	}
	return ""
}

func (m *SingleCouse) GetExplain() string {
	if m != nil {
		return m.Explain
	}
	return ""
}

func (m *SingleCouse) GetSponsor() string {
	if m != nil {
		return m.Sponsor
	}
	return ""
}

func (m *SingleCouse) GetLectno() string {
	if m != nil {
		return m.Lectno
	}
	return ""
}

func (m *SingleCouse) GetTeaunit() string {
	if m != nil {
		return m.Teaunit
	}
	return ""
}

func (m *SingleCouse) GetLectname() string {
	if m != nil {
		return m.Lectname
	}
	return ""
}

func (m *SingleCouse) GetJoinple() int32 {
	if m != nil {
		return m.Joinple
	}
	return 0
}

func (m *SingleCouse) GetPeople() int32 {
	if m != nil {
		return m.People
	}
	return 0
}

func (m *SingleCouse) GetLectexp() int64 {
	if m != nil {
		return m.Lectexp
	}
	return 0
}

func (m *SingleCouse) GetBookexp() int64 {
	if m != nil {
		return m.Bookexp
	}
	return 0
}

func (m *SingleCouse) GetOtherexp() int64 {
	if m != nil {
		return m.Otherexp
	}
	return 0
}

func (m *SingleCouse) GetStadate() string {
	if m != nil {
		return m.Stadate
	}
	return ""
}

func (m *SingleCouse) GetTime1() string {
	if m != nil {
		return m.Time1
	}
	return ""
}

func (m *SingleCouse) GetEnddate() string {
	if m != nil {
		return m.Enddate
	}
	return ""
}

func (m *SingleCouse) GetTime2() string {
	if m != nil {
		return m.Time2
	}
	return ""
}

func (m *SingleCouse) GetHour() float32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

//多筆開班課程資料
type MultiCouse struct {
	Dataset              []*SingleCouse `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MultiCouse) Reset()         { *m = MultiCouse{} }
func (m *MultiCouse) String() string { return proto.CompactTextString(m) }
func (*MultiCouse) ProtoMessage()    {}
func (*MultiCouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{18}
}

func (m *MultiCouse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiCouse.Unmarshal(m, b)
}
func (m *MultiCouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiCouse.Marshal(b, m, deterministic)
}
func (m *MultiCouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiCouse.Merge(m, src)
}
func (m *MultiCouse) XXX_Size() int {
	return xxx_messageInfo_MultiCouse.Size(m)
}
func (m *MultiCouse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiCouse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiCouse proto.InternalMessageInfo

func (m *MultiCouse) GetDataset() []*SingleCouse {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆學習資料
type SingleStudy struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Year                 string   `protobuf:"bytes,2,opt,name=year,proto3" json:"year,omitempty"`
	Depno                string   `protobuf:"bytes,3,opt,name=depno,proto3" json:"depno,omitempty"`
	Factory              string   `protobuf:"bytes,4,opt,name=factory,proto3" json:"factory,omitempty"`
	Serno                string   `protobuf:"bytes,5,opt,name=serno,proto3" json:"serno,omitempty"`
	Currno               string   `protobuf:"bytes,6,opt,name=currno,proto3" json:"currno,omitempty"`
	Empno                string   `protobuf:"bytes,7,opt,name=empno,proto3" json:"empno,omitempty"`
	Unitno               string   `protobuf:"bytes,8,opt,name=unitno,proto3" json:"unitno,omitempty"`
	Studyexp             int32    `protobuf:"varint,9,opt,name=studyexp,proto3" json:"studyexp,omitempty"`
	Travexp              int32    `protobuf:"varint,10,opt,name=travexp,proto3" json:"travexp,omitempty"`
	Otherexp             int32    `protobuf:"varint,11,opt,name=otherexp,proto3" json:"otherexp,omitempty"`
	Estimate             string   `protobuf:"bytes,12,opt,name=estimate,proto3" json:"estimate,omitempty"`
	Join                 string   `protobuf:"bytes,13,opt,name=join,proto3" json:"join,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleStudy) Reset()         { *m = SingleStudy{} }
func (m *SingleStudy) String() string { return proto.CompactTextString(m) }
func (*SingleStudy) ProtoMessage()    {}
func (*SingleStudy) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{19}
}

func (m *SingleStudy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleStudy.Unmarshal(m, b)
}
func (m *SingleStudy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleStudy.Marshal(b, m, deterministic)
}
func (m *SingleStudy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleStudy.Merge(m, src)
}
func (m *SingleStudy) XXX_Size() int {
	return xxx_messageInfo_SingleStudy.Size(m)
}
func (m *SingleStudy) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleStudy.DiscardUnknown(m)
}

var xxx_messageInfo_SingleStudy proto.InternalMessageInfo

func (m *SingleStudy) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleStudy) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *SingleStudy) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *SingleStudy) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *SingleStudy) GetSerno() string {
	if m != nil {
		return m.Serno
	}
	return ""
}

func (m *SingleStudy) GetCurrno() string {
	if m != nil {
		return m.Currno
	}
	return ""
}

func (m *SingleStudy) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *SingleStudy) GetUnitno() string {
	if m != nil {
		return m.Unitno
	}
	return ""
}

func (m *SingleStudy) GetStudyexp() int32 {
	if m != nil {
		return m.Studyexp
	}
	return 0
}

func (m *SingleStudy) GetTravexp() int32 {
	if m != nil {
		return m.Travexp
	}
	return 0
}

func (m *SingleStudy) GetOtherexp() int32 {
	if m != nil {
		return m.Otherexp
	}
	return 0
}

func (m *SingleStudy) GetEstimate() string {
	if m != nil {
		return m.Estimate
	}
	return ""
}

func (m *SingleStudy) GetJoin() string {
	if m != nil {
		return m.Join
	}
	return ""
}

//多筆學習資料
type MultiStudy struct {
	Dataset              []*SingleStudy `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MultiStudy) Reset()         { *m = MultiStudy{} }
func (m *MultiStudy) String() string { return proto.CompactTextString(m) }
func (*MultiStudy) ProtoMessage()    {}
func (*MultiStudy) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{20}
}

func (m *MultiStudy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiStudy.Unmarshal(m, b)
}
func (m *MultiStudy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiStudy.Marshal(b, m, deterministic)
}
func (m *MultiStudy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiStudy.Merge(m, src)
}
func (m *MultiStudy) XXX_Size() int {
	return xxx_messageInfo_MultiStudy.Size(m)
}
func (m *MultiStudy) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiStudy.DiscardUnknown(m)
}

var xxx_messageInfo_MultiStudy proto.InternalMessageInfo

func (m *MultiStudy) GetDataset() []*SingleStudy {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//學習資料例外更新條件
type StudyInfoRequest struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Year                 string   `protobuf:"bytes,2,opt,name=year,proto3" json:"year,omitempty"`
	Depno                string   `protobuf:"bytes,3,opt,name=depno,proto3" json:"depno,omitempty"`
	Serno                string   `protobuf:"bytes,4,opt,name=serno,proto3" json:"serno,omitempty"`
	Empno                string   `protobuf:"bytes,5,opt,name=empno,proto3" json:"empno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StudyInfoRequest) Reset()         { *m = StudyInfoRequest{} }
func (m *StudyInfoRequest) String() string { return proto.CompactTextString(m) }
func (*StudyInfoRequest) ProtoMessage()    {}
func (*StudyInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{21}
}

func (m *StudyInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StudyInfoRequest.Unmarshal(m, b)
}
func (m *StudyInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StudyInfoRequest.Marshal(b, m, deterministic)
}
func (m *StudyInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudyInfoRequest.Merge(m, src)
}
func (m *StudyInfoRequest) XXX_Size() int {
	return xxx_messageInfo_StudyInfoRequest.Size(m)
}
func (m *StudyInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StudyInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StudyInfoRequest proto.InternalMessageInfo

func (m *StudyInfoRequest) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *StudyInfoRequest) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *StudyInfoRequest) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *StudyInfoRequest) GetSerno() string {
	if m != nil {
		return m.Serno
	}
	return ""
}

func (m *StudyInfoRequest) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

//單筆應修課程資料
type SingleRequiredCouse struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Grade                string   `protobuf:"bytes,2,opt,name=grade,proto3" json:"grade,omitempty"`
	Currno               string   `protobuf:"bytes,3,opt,name=currno,proto3" json:"currno,omitempty"`
	Trahr                float32  `protobuf:"fixed32,4,opt,name=trahr,proto3" json:"trahr,omitempty"`
	Judge                string   `protobuf:"bytes,5,opt,name=judge,proto3" json:"judge,omitempty"`
	Indat                string   `protobuf:"bytes,6,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,7,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleRequiredCouse) Reset()         { *m = SingleRequiredCouse{} }
func (m *SingleRequiredCouse) String() string { return proto.CompactTextString(m) }
func (*SingleRequiredCouse) ProtoMessage()    {}
func (*SingleRequiredCouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{22}
}

func (m *SingleRequiredCouse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleRequiredCouse.Unmarshal(m, b)
}
func (m *SingleRequiredCouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleRequiredCouse.Marshal(b, m, deterministic)
}
func (m *SingleRequiredCouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleRequiredCouse.Merge(m, src)
}
func (m *SingleRequiredCouse) XXX_Size() int {
	return xxx_messageInfo_SingleRequiredCouse.Size(m)
}
func (m *SingleRequiredCouse) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleRequiredCouse.DiscardUnknown(m)
}

var xxx_messageInfo_SingleRequiredCouse proto.InternalMessageInfo

func (m *SingleRequiredCouse) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleRequiredCouse) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *SingleRequiredCouse) GetCurrno() string {
	if m != nil {
		return m.Currno
	}
	return ""
}

func (m *SingleRequiredCouse) GetTrahr() float32 {
	if m != nil {
		return m.Trahr
	}
	return 0
}

func (m *SingleRequiredCouse) GetJudge() string {
	if m != nil {
		return m.Judge
	}
	return ""
}

func (m *SingleRequiredCouse) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleRequiredCouse) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆應修課程資料
type MultiRequiredCouse struct {
	Dataset              []*SingleRequiredCouse `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MultiRequiredCouse) Reset()         { *m = MultiRequiredCouse{} }
func (m *MultiRequiredCouse) String() string { return proto.CompactTextString(m) }
func (*MultiRequiredCouse) ProtoMessage()    {}
func (*MultiRequiredCouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{23}
}

func (m *MultiRequiredCouse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiRequiredCouse.Unmarshal(m, b)
}
func (m *MultiRequiredCouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiRequiredCouse.Marshal(b, m, deterministic)
}
func (m *MultiRequiredCouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiRequiredCouse.Merge(m, src)
}
func (m *MultiRequiredCouse) XXX_Size() int {
	return xxx_messageInfo_MultiRequiredCouse.Size(m)
}
func (m *MultiRequiredCouse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiRequiredCouse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiRequiredCouse proto.InternalMessageInfo

func (m *MultiRequiredCouse) GetDataset() []*SingleRequiredCouse {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆教育訓練承諾書簽約資料
type SingleSign struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Actyy                string   `protobuf:"bytes,2,opt,name=actyy,proto3" json:"actyy,omitempty"`
	Empno                string   `protobuf:"bytes,3,opt,name=empno,proto3" json:"empno,omitempty"`
	Clsno                string   `protobuf:"bytes,4,opt,name=clsno,proto3" json:"clsno,omitempty"`
	Sigdat               string   `protobuf:"bytes,5,opt,name=sigdat,proto3" json:"sigdat,omitempty"`
	Stodat               string   `protobuf:"bytes,6,opt,name=stodat,proto3" json:"stodat,omitempty"`
	Traexp               float32  `protobuf:"fixed32,7,opt,name=traexp,proto3" json:"traexp,omitempty"`
	Certif               string   `protobuf:"bytes,8,opt,name=certif,proto3" json:"certif,omitempty"`
	Sign                 string   `protobuf:"bytes,9,opt,name=sign,proto3" json:"sign,omitempty"`
	Indat                string   `protobuf:"bytes,10,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,11,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleSign) Reset()         { *m = SingleSign{} }
func (m *SingleSign) String() string { return proto.CompactTextString(m) }
func (*SingleSign) ProtoMessage()    {}
func (*SingleSign) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{24}
}

func (m *SingleSign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleSign.Unmarshal(m, b)
}
func (m *SingleSign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleSign.Marshal(b, m, deterministic)
}
func (m *SingleSign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleSign.Merge(m, src)
}
func (m *SingleSign) XXX_Size() int {
	return xxx_messageInfo_SingleSign.Size(m)
}
func (m *SingleSign) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleSign.DiscardUnknown(m)
}

var xxx_messageInfo_SingleSign proto.InternalMessageInfo

func (m *SingleSign) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleSign) GetActyy() string {
	if m != nil {
		return m.Actyy
	}
	return ""
}

func (m *SingleSign) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *SingleSign) GetClsno() string {
	if m != nil {
		return m.Clsno
	}
	return ""
}

func (m *SingleSign) GetSigdat() string {
	if m != nil {
		return m.Sigdat
	}
	return ""
}

func (m *SingleSign) GetStodat() string {
	if m != nil {
		return m.Stodat
	}
	return ""
}

func (m *SingleSign) GetTraexp() float32 {
	if m != nil {
		return m.Traexp
	}
	return 0
}

func (m *SingleSign) GetCertif() string {
	if m != nil {
		return m.Certif
	}
	return ""
}

func (m *SingleSign) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *SingleSign) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleSign) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆教育訓練承諾書簽約資料
type MultiSign struct {
	Dataset              []*SingleSign `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MultiSign) Reset()         { *m = MultiSign{} }
func (m *MultiSign) String() string { return proto.CompactTextString(m) }
func (*MultiSign) ProtoMessage()    {}
func (*MultiSign) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{25}
}

func (m *MultiSign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiSign.Unmarshal(m, b)
}
func (m *MultiSign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiSign.Marshal(b, m, deterministic)
}
func (m *MultiSign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiSign.Merge(m, src)
}
func (m *MultiSign) XXX_Size() int {
	return xxx_messageInfo_MultiSign.Size(m)
}
func (m *MultiSign) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiSign.DiscardUnknown(m)
}

var xxx_messageInfo_MultiSign proto.InternalMessageInfo

func (m *MultiSign) GetDataset() []*SingleSign {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆教育訓練簽核層級資料
type SingleSignLevel struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	People               string   `protobuf:"bytes,2,opt,name=people,proto3" json:"people,omitempty"`
	Amount1              float32  `protobuf:"fixed32,3,opt,name=amount1,proto3" json:"amount1,omitempty"`
	Amount2              float32  `protobuf:"fixed32,4,opt,name=amount2,proto3" json:"amount2,omitempty"`
	Amt                  string   `protobuf:"bytes,5,opt,name=amt,proto3" json:"amt,omitempty"`
	Level                string   `protobuf:"bytes,6,opt,name=level,proto3" json:"level,omitempty"`
	Strdat               string   `protobuf:"bytes,7,opt,name=strdat,proto3" json:"strdat,omitempty"`
	Indat                string   `protobuf:"bytes,8,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,9,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleSignLevel) Reset()         { *m = SingleSignLevel{} }
func (m *SingleSignLevel) String() string { return proto.CompactTextString(m) }
func (*SingleSignLevel) ProtoMessage()    {}
func (*SingleSignLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{26}
}

func (m *SingleSignLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleSignLevel.Unmarshal(m, b)
}
func (m *SingleSignLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleSignLevel.Marshal(b, m, deterministic)
}
func (m *SingleSignLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleSignLevel.Merge(m, src)
}
func (m *SingleSignLevel) XXX_Size() int {
	return xxx_messageInfo_SingleSignLevel.Size(m)
}
func (m *SingleSignLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleSignLevel.DiscardUnknown(m)
}

var xxx_messageInfo_SingleSignLevel proto.InternalMessageInfo

func (m *SingleSignLevel) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleSignLevel) GetPeople() string {
	if m != nil {
		return m.People
	}
	return ""
}

func (m *SingleSignLevel) GetAmount1() float32 {
	if m != nil {
		return m.Amount1
	}
	return 0
}

func (m *SingleSignLevel) GetAmount2() float32 {
	if m != nil {
		return m.Amount2
	}
	return 0
}

func (m *SingleSignLevel) GetAmt() string {
	if m != nil {
		return m.Amt
	}
	return ""
}

func (m *SingleSignLevel) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *SingleSignLevel) GetStrdat() string {
	if m != nil {
		return m.Strdat
	}
	return ""
}

func (m *SingleSignLevel) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleSignLevel) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆教育訓練簽核層級資料
type MultiSignLevel struct {
	Dataset              []*SingleSignLevel `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MultiSignLevel) Reset()         { *m = MultiSignLevel{} }
func (m *MultiSignLevel) String() string { return proto.CompactTextString(m) }
func (*MultiSignLevel) ProtoMessage()    {}
func (*MultiSignLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{27}
}

func (m *MultiSignLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiSignLevel.Unmarshal(m, b)
}
func (m *MultiSignLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiSignLevel.Marshal(b, m, deterministic)
}
func (m *MultiSignLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiSignLevel.Merge(m, src)
}
func (m *MultiSignLevel) XXX_Size() int {
	return xxx_messageInfo_MultiSignLevel.Size(m)
}
func (m *MultiSignLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiSignLevel.DiscardUnknown(m)
}

var xxx_messageInfo_MultiSignLevel proto.InternalMessageInfo

func (m *MultiSignLevel) GetDataset() []*SingleSignLevel {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆年度計畫序號
type SinglePlanSerial struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Year                 string   `protobuf:"bytes,2,opt,name=year,proto3" json:"year,omitempty"`
	Season1              string   `protobuf:"bytes,3,opt,name=season1,proto3" json:"season1,omitempty"`
	Season2              string   `protobuf:"bytes,4,opt,name=season2,proto3" json:"season2,omitempty"`
	Season3              string   `protobuf:"bytes,5,opt,name=season3,proto3" json:"season3,omitempty"`
	Season4              string   `protobuf:"bytes,6,opt,name=season4,proto3" json:"season4,omitempty"`
	Depno                string   `protobuf:"bytes,7,opt,name=depno,proto3" json:"depno,omitempty"`
	Type                 string   `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Factory              string   `protobuf:"bytes,9,opt,name=factory,proto3" json:"factory,omitempty"`
	People               float32  `protobuf:"fixed32,10,opt,name=people,proto3" json:"people,omitempty"`
	Hour                 float32  `protobuf:"fixed32,11,opt,name=hour,proto3" json:"hour,omitempty"`
	Budget               float32  `protobuf:"fixed32,12,opt,name=budget,proto3" json:"budget,omitempty"`
	Planno               string   `protobuf:"bytes,13,opt,name=planno,proto3" json:"planno,omitempty"`
	Explain              string   `protobuf:"bytes,14,opt,name=explain,proto3" json:"explain,omitempty"`
	Indat                string   `protobuf:"bytes,15,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,16,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SinglePlanSerial) Reset()         { *m = SinglePlanSerial{} }
func (m *SinglePlanSerial) String() string { return proto.CompactTextString(m) }
func (*SinglePlanSerial) ProtoMessage()    {}
func (*SinglePlanSerial) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{28}
}

func (m *SinglePlanSerial) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SinglePlanSerial.Unmarshal(m, b)
}
func (m *SinglePlanSerial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SinglePlanSerial.Marshal(b, m, deterministic)
}
func (m *SinglePlanSerial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SinglePlanSerial.Merge(m, src)
}
func (m *SinglePlanSerial) XXX_Size() int {
	return xxx_messageInfo_SinglePlanSerial.Size(m)
}
func (m *SinglePlanSerial) XXX_DiscardUnknown() {
	xxx_messageInfo_SinglePlanSerial.DiscardUnknown(m)
}

var xxx_messageInfo_SinglePlanSerial proto.InternalMessageInfo

func (m *SinglePlanSerial) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SinglePlanSerial) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *SinglePlanSerial) GetSeason1() string {
	if m != nil {
		return m.Season1
	}
	return ""
}

func (m *SinglePlanSerial) GetSeason2() string {
	if m != nil {
		return m.Season2
	}
	return ""
}

func (m *SinglePlanSerial) GetSeason3() string {
	if m != nil {
		return m.Season3
	}
	return ""
}

func (m *SinglePlanSerial) GetSeason4() string {
	if m != nil {
		return m.Season4
	}
	return ""
}

func (m *SinglePlanSerial) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *SinglePlanSerial) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SinglePlanSerial) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *SinglePlanSerial) GetPeople() float32 {
	if m != nil {
		return m.People
	}
	return 0
}

func (m *SinglePlanSerial) GetHour() float32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *SinglePlanSerial) GetBudget() float32 {
	if m != nil {
		return m.Budget
	}
	return 0
}

func (m *SinglePlanSerial) GetPlanno() string {
	if m != nil {
		return m.Planno
	}
	return ""
}

func (m *SinglePlanSerial) GetExplain() string {
	if m != nil {
		return m.Explain
	}
	return ""
}

func (m *SinglePlanSerial) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SinglePlanSerial) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆年度計畫序號
type MultiPlanSerial struct {
	Dataset              []*SinglePlanSerial `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MultiPlanSerial) Reset()         { *m = MultiPlanSerial{} }
func (m *MultiPlanSerial) String() string { return proto.CompactTextString(m) }
func (*MultiPlanSerial) ProtoMessage()    {}
func (*MultiPlanSerial) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{29}
}

func (m *MultiPlanSerial) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiPlanSerial.Unmarshal(m, b)
}
func (m *MultiPlanSerial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiPlanSerial.Marshal(b, m, deterministic)
}
func (m *MultiPlanSerial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiPlanSerial.Merge(m, src)
}
func (m *MultiPlanSerial) XXX_Size() int {
	return xxx_messageInfo_MultiPlanSerial.Size(m)
}
func (m *MultiPlanSerial) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiPlanSerial.DiscardUnknown(m)
}

var xxx_messageInfo_MultiPlanSerial proto.InternalMessageInfo

func (m *MultiPlanSerial) GetDataset() []*SinglePlanSerial {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆職能代號
type SingleJobDuty struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Jobno                string   `protobuf:"bytes,2,opt,name=jobno,proto3" json:"jobno,omitempty"`
	Jobname              string   `protobuf:"bytes,3,opt,name=jobname,proto3" json:"jobname,omitempty"`
	Indat                string   `protobuf:"bytes,4,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,5,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleJobDuty) Reset()         { *m = SingleJobDuty{} }
func (m *SingleJobDuty) String() string { return proto.CompactTextString(m) }
func (*SingleJobDuty) ProtoMessage()    {}
func (*SingleJobDuty) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{30}
}

func (m *SingleJobDuty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleJobDuty.Unmarshal(m, b)
}
func (m *SingleJobDuty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleJobDuty.Marshal(b, m, deterministic)
}
func (m *SingleJobDuty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleJobDuty.Merge(m, src)
}
func (m *SingleJobDuty) XXX_Size() int {
	return xxx_messageInfo_SingleJobDuty.Size(m)
}
func (m *SingleJobDuty) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleJobDuty.DiscardUnknown(m)
}

var xxx_messageInfo_SingleJobDuty proto.InternalMessageInfo

func (m *SingleJobDuty) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleJobDuty) GetJobno() string {
	if m != nil {
		return m.Jobno
	}
	return ""
}

func (m *SingleJobDuty) GetJobname() string {
	if m != nil {
		return m.Jobname
	}
	return ""
}

func (m *SingleJobDuty) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleJobDuty) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆職能代號
type MultiJobDuty struct {
	Dataset              []*SingleJobDuty `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MultiJobDuty) Reset()         { *m = MultiJobDuty{} }
func (m *MultiJobDuty) String() string { return proto.CompactTextString(m) }
func (*MultiJobDuty) ProtoMessage()    {}
func (*MultiJobDuty) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{31}
}

func (m *MultiJobDuty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiJobDuty.Unmarshal(m, b)
}
func (m *MultiJobDuty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiJobDuty.Marshal(b, m, deterministic)
}
func (m *MultiJobDuty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiJobDuty.Merge(m, src)
}
func (m *MultiJobDuty) XXX_Size() int {
	return xxx_messageInfo_MultiJobDuty.Size(m)
}
func (m *MultiJobDuty) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiJobDuty.DiscardUnknown(m)
}

var xxx_messageInfo_MultiJobDuty proto.InternalMessageInfo

func (m *MultiJobDuty) GetDataset() []*SingleJobDuty {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆教育訓練計畫
type SingleTrainingPlan struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	No                   int32    `protobuf:"varint,2,opt,name=no,proto3" json:"no,omitempty"`
	Depno                string   `protobuf:"bytes,3,opt,name=depno,proto3" json:"depno,omitempty"`
	Yymm                 string   `protobuf:"bytes,4,opt,name=yymm,proto3" json:"yymm,omitempty"`
	Bmno                 string   `protobuf:"bytes,5,opt,name=bmno,proto3" json:"bmno,omitempty"`
	Type                 string   `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Factory              string   `protobuf:"bytes,7,opt,name=factory,proto3" json:"factory,omitempty"`
	Teaunit              string   `protobuf:"bytes,8,opt,name=teaunit,proto3" json:"teaunit,omitempty"`
	Times                string   `protobuf:"bytes,9,opt,name=times,proto3" json:"times,omitempty"`
	Hour                 float32  `protobuf:"fixed32,10,opt,name=hour,proto3" json:"hour,omitempty"`
	Expense              float32  `protobuf:"fixed32,11,opt,name=expense,proto3" json:"expense,omitempty"`
	Kind                 string   `protobuf:"bytes,12,opt,name=kind,proto3" json:"kind,omitempty"`
	Comm                 string   `protobuf:"bytes,13,opt,name=comm,proto3" json:"comm,omitempty"`
	Indat                string   `protobuf:"bytes,14,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,15,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleTrainingPlan) Reset()         { *m = SingleTrainingPlan{} }
func (m *SingleTrainingPlan) String() string { return proto.CompactTextString(m) }
func (*SingleTrainingPlan) ProtoMessage()    {}
func (*SingleTrainingPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{32}
}

func (m *SingleTrainingPlan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleTrainingPlan.Unmarshal(m, b)
}
func (m *SingleTrainingPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleTrainingPlan.Marshal(b, m, deterministic)
}
func (m *SingleTrainingPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleTrainingPlan.Merge(m, src)
}
func (m *SingleTrainingPlan) XXX_Size() int {
	return xxx_messageInfo_SingleTrainingPlan.Size(m)
}
func (m *SingleTrainingPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleTrainingPlan.DiscardUnknown(m)
}

var xxx_messageInfo_SingleTrainingPlan proto.InternalMessageInfo

func (m *SingleTrainingPlan) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleTrainingPlan) GetNo() int32 {
	if m != nil {
		return m.No
	}
	return 0
}

func (m *SingleTrainingPlan) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *SingleTrainingPlan) GetYymm() string {
	if m != nil {
		return m.Yymm
	}
	return ""
}

func (m *SingleTrainingPlan) GetBmno() string {
	if m != nil {
		return m.Bmno
	}
	return ""
}

func (m *SingleTrainingPlan) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SingleTrainingPlan) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *SingleTrainingPlan) GetTeaunit() string {
	if m != nil {
		return m.Teaunit
	}
	return ""
}

func (m *SingleTrainingPlan) GetTimes() string {
	if m != nil {
		return m.Times
	}
	return ""
}

func (m *SingleTrainingPlan) GetHour() float32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *SingleTrainingPlan) GetExpense() float32 {
	if m != nil {
		return m.Expense
	}
	return 0
}

func (m *SingleTrainingPlan) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *SingleTrainingPlan) GetComm() string {
	if m != nil {
		return m.Comm
	}
	return ""
}

func (m *SingleTrainingPlan) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleTrainingPlan) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆教育訓練計畫
type MultiTrainingPlan struct {
	Dataset              []*SingleTrainingPlan `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MultiTrainingPlan) Reset()         { *m = MultiTrainingPlan{} }
func (m *MultiTrainingPlan) String() string { return proto.CompactTextString(m) }
func (*MultiTrainingPlan) ProtoMessage()    {}
func (*MultiTrainingPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{33}
}

func (m *MultiTrainingPlan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiTrainingPlan.Unmarshal(m, b)
}
func (m *MultiTrainingPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiTrainingPlan.Marshal(b, m, deterministic)
}
func (m *MultiTrainingPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiTrainingPlan.Merge(m, src)
}
func (m *MultiTrainingPlan) XXX_Size() int {
	return xxx_messageInfo_MultiTrainingPlan.Size(m)
}
func (m *MultiTrainingPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiTrainingPlan.DiscardUnknown(m)
}

var xxx_messageInfo_MultiTrainingPlan proto.InternalMessageInfo

func (m *MultiTrainingPlan) GetDataset() []*SingleTrainingPlan {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆特種作業人員
type SingleSpecialOperator struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Trno                 string   `protobuf:"bytes,2,opt,name=trno,proto3" json:"trno,omitempty"`
	Empno                string   `protobuf:"bytes,3,opt,name=empno,proto3" json:"empno,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Depno                string   `protobuf:"bytes,5,opt,name=depno,proto3" json:"depno,omitempty"`
	Sextyp               string   `protobuf:"bytes,6,opt,name=sextyp,proto3" json:"sextyp,omitempty"`
	Eduno                string   `protobuf:"bytes,7,opt,name=eduno,proto3" json:"eduno,omitempty"`
	Entdat               string   `protobuf:"bytes,8,opt,name=entdat,proto3" json:"entdat,omitempty"`
	Certno               string   `protobuf:"bytes,9,opt,name=certno,proto3" json:"certno,omitempty"`
	Natadr               string   `protobuf:"bytes,10,opt,name=natadr,proto3" json:"natadr,omitempty"`
	Type                 string   `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	Office               string   `protobuf:"bytes,12,opt,name=office,proto3" json:"office,omitempty"`
	Number               string   `protobuf:"bytes,13,opt,name=number,proto3" json:"number,omitempty"`
	Commd                string   `protobuf:"bytes,14,opt,name=commd,proto3" json:"commd,omitempty"`
	Operno               string   `protobuf:"bytes,15,opt,name=operno,proto3" json:"operno,omitempty"`
	Usedat               string   `protobuf:"bytes,16,opt,name=usedat,proto3" json:"usedat,omitempty"`
	Date1                string   `protobuf:"bytes,17,opt,name=date1,proto3" json:"date1,omitempty"`
	Date2                string   `protobuf:"bytes,18,opt,name=date2,proto3" json:"date2,omitempty"`
	Strdat               string   `protobuf:"bytes,19,opt,name=strdat,proto3" json:"strdat,omitempty"`
	Trse                 string   `protobuf:"bytes,20,opt,name=trse,proto3" json:"trse,omitempty"`
	Getdat               string   `protobuf:"bytes,21,opt,name=getdat,proto3" json:"getdat,omitempty"`
	Indat                string   `protobuf:"bytes,22,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,23,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleSpecialOperator) Reset()         { *m = SingleSpecialOperator{} }
func (m *SingleSpecialOperator) String() string { return proto.CompactTextString(m) }
func (*SingleSpecialOperator) ProtoMessage()    {}
func (*SingleSpecialOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{34}
}

func (m *SingleSpecialOperator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleSpecialOperator.Unmarshal(m, b)
}
func (m *SingleSpecialOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleSpecialOperator.Marshal(b, m, deterministic)
}
func (m *SingleSpecialOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleSpecialOperator.Merge(m, src)
}
func (m *SingleSpecialOperator) XXX_Size() int {
	return xxx_messageInfo_SingleSpecialOperator.Size(m)
}
func (m *SingleSpecialOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleSpecialOperator.DiscardUnknown(m)
}

var xxx_messageInfo_SingleSpecialOperator proto.InternalMessageInfo

func (m *SingleSpecialOperator) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleSpecialOperator) GetTrno() string {
	if m != nil {
		return m.Trno
	}
	return ""
}

func (m *SingleSpecialOperator) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *SingleSpecialOperator) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SingleSpecialOperator) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *SingleSpecialOperator) GetSextyp() string {
	if m != nil {
		return m.Sextyp
	}
	return ""
}

func (m *SingleSpecialOperator) GetEduno() string {
	if m != nil {
		return m.Eduno
	}
	return ""
}

func (m *SingleSpecialOperator) GetEntdat() string {
	if m != nil {
		return m.Entdat
	}
	return ""
}

func (m *SingleSpecialOperator) GetCertno() string {
	if m != nil {
		return m.Certno
	}
	return ""
}

func (m *SingleSpecialOperator) GetNatadr() string {
	if m != nil {
		return m.Natadr
	}
	return ""
}

func (m *SingleSpecialOperator) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SingleSpecialOperator) GetOffice() string {
	if m != nil {
		return m.Office
	}
	return ""
}

func (m *SingleSpecialOperator) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *SingleSpecialOperator) GetCommd() string {
	if m != nil {
		return m.Commd
	}
	return ""
}

func (m *SingleSpecialOperator) GetOperno() string {
	if m != nil {
		return m.Operno
	}
	return ""
}

func (m *SingleSpecialOperator) GetUsedat() string {
	if m != nil {
		return m.Usedat
	}
	return ""
}

func (m *SingleSpecialOperator) GetDate1() string {
	if m != nil {
		return m.Date1
	}
	return ""
}

func (m *SingleSpecialOperator) GetDate2() string {
	if m != nil {
		return m.Date2
	}
	return ""
}

func (m *SingleSpecialOperator) GetStrdat() string {
	if m != nil {
		return m.Strdat
	}
	return ""
}

func (m *SingleSpecialOperator) GetTrse() string {
	if m != nil {
		return m.Trse
	}
	return ""
}

func (m *SingleSpecialOperator) GetGetdat() string {
	if m != nil {
		return m.Getdat
	}
	return ""
}

func (m *SingleSpecialOperator) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleSpecialOperator) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆特種作業人員
type MultiSpecialOperator struct {
	Dataset              []*SingleSpecialOperator `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MultiSpecialOperator) Reset()         { *m = MultiSpecialOperator{} }
func (m *MultiSpecialOperator) String() string { return proto.CompactTextString(m) }
func (*MultiSpecialOperator) ProtoMessage()    {}
func (*MultiSpecialOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{35}
}

func (m *MultiSpecialOperator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiSpecialOperator.Unmarshal(m, b)
}
func (m *MultiSpecialOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiSpecialOperator.Marshal(b, m, deterministic)
}
func (m *MultiSpecialOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiSpecialOperator.Merge(m, src)
}
func (m *MultiSpecialOperator) XXX_Size() int {
	return xxx_messageInfo_MultiSpecialOperator.Size(m)
}
func (m *MultiSpecialOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiSpecialOperator.DiscardUnknown(m)
}

var xxx_messageInfo_MultiSpecialOperator proto.InternalMessageInfo

func (m *MultiSpecialOperator) GetDataset() []*SingleSpecialOperator {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆職能應修課程資料
type SingleJobDutyRequiredCouse struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Resiyn               string   `protobuf:"bytes,2,opt,name=resiyn,proto3" json:"resiyn,omitempty"`
	Resno                string   `protobuf:"bytes,3,opt,name=resno,proto3" json:"resno,omitempty"`
	Bmno                 string   `protobuf:"bytes,4,opt,name=bmno,proto3" json:"bmno,omitempty"`
	Indat                string   `protobuf:"bytes,5,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,6,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleJobDutyRequiredCouse) Reset()         { *m = SingleJobDutyRequiredCouse{} }
func (m *SingleJobDutyRequiredCouse) String() string { return proto.CompactTextString(m) }
func (*SingleJobDutyRequiredCouse) ProtoMessage()    {}
func (*SingleJobDutyRequiredCouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{36}
}

func (m *SingleJobDutyRequiredCouse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleJobDutyRequiredCouse.Unmarshal(m, b)
}
func (m *SingleJobDutyRequiredCouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleJobDutyRequiredCouse.Marshal(b, m, deterministic)
}
func (m *SingleJobDutyRequiredCouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleJobDutyRequiredCouse.Merge(m, src)
}
func (m *SingleJobDutyRequiredCouse) XXX_Size() int {
	return xxx_messageInfo_SingleJobDutyRequiredCouse.Size(m)
}
func (m *SingleJobDutyRequiredCouse) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleJobDutyRequiredCouse.DiscardUnknown(m)
}

var xxx_messageInfo_SingleJobDutyRequiredCouse proto.InternalMessageInfo

func (m *SingleJobDutyRequiredCouse) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleJobDutyRequiredCouse) GetResiyn() string {
	if m != nil {
		return m.Resiyn
	}
	return ""
}

func (m *SingleJobDutyRequiredCouse) GetResno() string {
	if m != nil {
		return m.Resno
	}
	return ""
}

func (m *SingleJobDutyRequiredCouse) GetBmno() string {
	if m != nil {
		return m.Bmno
	}
	return ""
}

func (m *SingleJobDutyRequiredCouse) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleJobDutyRequiredCouse) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆職能應修課程資料
type MultiJobDutyRequiredCouse struct {
	Dataset              []*SingleJobDutyRequiredCouse `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *MultiJobDutyRequiredCouse) Reset()         { *m = MultiJobDutyRequiredCouse{} }
func (m *MultiJobDutyRequiredCouse) String() string { return proto.CompactTextString(m) }
func (*MultiJobDutyRequiredCouse) ProtoMessage()    {}
func (*MultiJobDutyRequiredCouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{37}
}

func (m *MultiJobDutyRequiredCouse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiJobDutyRequiredCouse.Unmarshal(m, b)
}
func (m *MultiJobDutyRequiredCouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiJobDutyRequiredCouse.Marshal(b, m, deterministic)
}
func (m *MultiJobDutyRequiredCouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiJobDutyRequiredCouse.Merge(m, src)
}
func (m *MultiJobDutyRequiredCouse) XXX_Size() int {
	return xxx_messageInfo_MultiJobDutyRequiredCouse.Size(m)
}
func (m *MultiJobDutyRequiredCouse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiJobDutyRequiredCouse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiJobDutyRequiredCouse proto.InternalMessageInfo

func (m *MultiJobDutyRequiredCouse) GetDataset() []*SingleJobDutyRequiredCouse {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆學習資料
type SingleLearn struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Year                 string   `protobuf:"bytes,2,opt,name=year,proto3" json:"year,omitempty"`
	Depno                string   `protobuf:"bytes,3,opt,name=depno,proto3" json:"depno,omitempty"`
	Serno                string   `protobuf:"bytes,4,opt,name=serno,proto3" json:"serno,omitempty"`
	Factory              string   `protobuf:"bytes,5,opt,name=factory,proto3" json:"factory,omitempty"`
	Stadate              string   `protobuf:"bytes,6,opt,name=stadate,proto3" json:"stadate,omitempty"`
	Enddate              string   `protobuf:"bytes,7,opt,name=enddate,proto3" json:"enddate,omitempty"`
	Currno               string   `protobuf:"bytes,8,opt,name=currno,proto3" json:"currno,omitempty"`
	Empno                string   `protobuf:"bytes,9,opt,name=empno,proto3" json:"empno,omitempty"`
	Unitno               string   `protobuf:"bytes,10,opt,name=unitno,proto3" json:"unitno,omitempty"`
	Estimate             string   `protobuf:"bytes,11,opt,name=estimate,proto3" json:"estimate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleLearn) Reset()         { *m = SingleLearn{} }
func (m *SingleLearn) String() string { return proto.CompactTextString(m) }
func (*SingleLearn) ProtoMessage()    {}
func (*SingleLearn) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{38}
}

func (m *SingleLearn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleLearn.Unmarshal(m, b)
}
func (m *SingleLearn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleLearn.Marshal(b, m, deterministic)
}
func (m *SingleLearn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleLearn.Merge(m, src)
}
func (m *SingleLearn) XXX_Size() int {
	return xxx_messageInfo_SingleLearn.Size(m)
}
func (m *SingleLearn) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleLearn.DiscardUnknown(m)
}

var xxx_messageInfo_SingleLearn proto.InternalMessageInfo

func (m *SingleLearn) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleLearn) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *SingleLearn) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *SingleLearn) GetSerno() string {
	if m != nil {
		return m.Serno
	}
	return ""
}

func (m *SingleLearn) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *SingleLearn) GetStadate() string {
	if m != nil {
		return m.Stadate
	}
	return ""
}

func (m *SingleLearn) GetEnddate() string {
	if m != nil {
		return m.Enddate
	}
	return ""
}

func (m *SingleLearn) GetCurrno() string {
	if m != nil {
		return m.Currno
	}
	return ""
}

func (m *SingleLearn) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *SingleLearn) GetUnitno() string {
	if m != nil {
		return m.Unitno
	}
	return ""
}

func (m *SingleLearn) GetEstimate() string {
	if m != nil {
		return m.Estimate
	}
	return ""
}

//多筆學習資料
type MultiLearn struct {
	Dataset              []*SingleLearn `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MultiLearn) Reset()         { *m = MultiLearn{} }
func (m *MultiLearn) String() string { return proto.CompactTextString(m) }
func (*MultiLearn) ProtoMessage()    {}
func (*MultiLearn) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{39}
}

func (m *MultiLearn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiLearn.Unmarshal(m, b)
}
func (m *MultiLearn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiLearn.Marshal(b, m, deterministic)
}
func (m *MultiLearn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiLearn.Merge(m, src)
}
func (m *MultiLearn) XXX_Size() int {
	return xxx_messageInfo_MultiLearn.Size(m)
}
func (m *MultiLearn) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiLearn.DiscardUnknown(m)
}

var xxx_messageInfo_MultiLearn proto.InternalMessageInfo

func (m *MultiLearn) GetDataset() []*SingleLearn {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆開班課程資料
type SingleLearnCouse struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Year                 string   `protobuf:"bytes,2,opt,name=year,proto3" json:"year,omitempty"`
	Depno                string   `protobuf:"bytes,3,opt,name=depno,proto3" json:"depno,omitempty"`
	Serno                string   `protobuf:"bytes,4,opt,name=serno,proto3" json:"serno,omitempty"`
	Factory              string   `protobuf:"bytes,5,opt,name=factory,proto3" json:"factory,omitempty"`
	Itemno               string   `protobuf:"bytes,6,opt,name=itemno,proto3" json:"itemno,omitempty"`
	Currno               string   `protobuf:"bytes,7,opt,name=currno,proto3" json:"currno,omitempty"`
	Explain              string   `protobuf:"bytes,8,opt,name=explain,proto3" json:"explain,omitempty"`
	Sponsor              string   `protobuf:"bytes,9,opt,name=sponsor,proto3" json:"sponsor,omitempty"`
	Type                 string   `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	Lectno               string   `protobuf:"bytes,11,opt,name=lectno,proto3" json:"lectno,omitempty"`
	Teaunit              string   `protobuf:"bytes,12,opt,name=teaunit,proto3" json:"teaunit,omitempty"`
	Lectname             string   `protobuf:"bytes,13,opt,name=lectname,proto3" json:"lectname,omitempty"`
	Stadate              string   `protobuf:"bytes,14,opt,name=stadate,proto3" json:"stadate,omitempty"`
	Time1                string   `protobuf:"bytes,15,opt,name=time1,proto3" json:"time1,omitempty"`
	Enddate              string   `protobuf:"bytes,16,opt,name=enddate,proto3" json:"enddate,omitempty"`
	Time2                string   `protobuf:"bytes,17,opt,name=time2,proto3" json:"time2,omitempty"`
	Type1                string   `protobuf:"bytes,18,opt,name=type1,proto3" json:"type1,omitempty"`
	Hour                 float32  `protobuf:"fixed32,19,opt,name=hour,proto3" json:"hour,omitempty"`
	Getypm               string   `protobuf:"bytes,20,opt,name=getypm,proto3" json:"getypm,omitempty"`
	Indat                string   `protobuf:"bytes,21,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,22,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleLearnCouse) Reset()         { *m = SingleLearnCouse{} }
func (m *SingleLearnCouse) String() string { return proto.CompactTextString(m) }
func (*SingleLearnCouse) ProtoMessage()    {}
func (*SingleLearnCouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{40}
}

func (m *SingleLearnCouse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleLearnCouse.Unmarshal(m, b)
}
func (m *SingleLearnCouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleLearnCouse.Marshal(b, m, deterministic)
}
func (m *SingleLearnCouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleLearnCouse.Merge(m, src)
}
func (m *SingleLearnCouse) XXX_Size() int {
	return xxx_messageInfo_SingleLearnCouse.Size(m)
}
func (m *SingleLearnCouse) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleLearnCouse.DiscardUnknown(m)
}

var xxx_messageInfo_SingleLearnCouse proto.InternalMessageInfo

func (m *SingleLearnCouse) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleLearnCouse) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *SingleLearnCouse) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *SingleLearnCouse) GetSerno() string {
	if m != nil {
		return m.Serno
	}
	return ""
}

func (m *SingleLearnCouse) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *SingleLearnCouse) GetItemno() string {
	if m != nil {
		return m.Itemno
	}
	return ""
}

func (m *SingleLearnCouse) GetCurrno() string {
	if m != nil {
		return m.Currno
	}
	return ""
}

func (m *SingleLearnCouse) GetExplain() string {
	if m != nil {
		return m.Explain
	}
	return ""
}

func (m *SingleLearnCouse) GetSponsor() string {
	if m != nil {
		return m.Sponsor
	}
	return ""
}

func (m *SingleLearnCouse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SingleLearnCouse) GetLectno() string {
	if m != nil {
		return m.Lectno
	}
	return ""
}

func (m *SingleLearnCouse) GetTeaunit() string {
	if m != nil {
		return m.Teaunit
	}
	return ""
}

func (m *SingleLearnCouse) GetLectname() string {
	if m != nil {
		return m.Lectname
	}
	return ""
}

func (m *SingleLearnCouse) GetStadate() string {
	if m != nil {
		return m.Stadate
	}
	return ""
}

func (m *SingleLearnCouse) GetTime1() string {
	if m != nil {
		return m.Time1
	}
	return ""
}

func (m *SingleLearnCouse) GetEnddate() string {
	if m != nil {
		return m.Enddate
	}
	return ""
}

func (m *SingleLearnCouse) GetTime2() string {
	if m != nil {
		return m.Time2
	}
	return ""
}

func (m *SingleLearnCouse) GetType1() string {
	if m != nil {
		return m.Type1
	}
	return ""
}

func (m *SingleLearnCouse) GetHour() float32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *SingleLearnCouse) GetGetypm() string {
	if m != nil {
		return m.Getypm
	}
	return ""
}

func (m *SingleLearnCouse) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleLearnCouse) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆開班課程資料
type MultiLearnCouse struct {
	Dataset              []*SingleLearnCouse `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MultiLearnCouse) Reset()         { *m = MultiLearnCouse{} }
func (m *MultiLearnCouse) String() string { return proto.CompactTextString(m) }
func (*MultiLearnCouse) ProtoMessage()    {}
func (*MultiLearnCouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{41}
}

func (m *MultiLearnCouse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiLearnCouse.Unmarshal(m, b)
}
func (m *MultiLearnCouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiLearnCouse.Marshal(b, m, deterministic)
}
func (m *MultiLearnCouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiLearnCouse.Merge(m, src)
}
func (m *MultiLearnCouse) XXX_Size() int {
	return xxx_messageInfo_MultiLearnCouse.Size(m)
}
func (m *MultiLearnCouse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiLearnCouse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiLearnCouse proto.InternalMessageInfo

func (m *MultiLearnCouse) GetDataset() []*SingleLearnCouse {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆教育訓練教材資料
type SingleTrainingMaterials struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Itemno               string   `protobuf:"bytes,2,opt,name=itemno,proto3" json:"itemno,omitempty"`
	Yymm                 string   `protobuf:"bytes,3,opt,name=yymm,proto3" json:"yymm,omitempty"`
	Type                 string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Depno                string   `protobuf:"bytes,5,opt,name=depno,proto3" json:"depno,omitempty"`
	Empno                string   `protobuf:"bytes,6,opt,name=empno,proto3" json:"empno,omitempty"`
	Bmno                 string   `protobuf:"bytes,7,opt,name=bmno,proto3" json:"bmno,omitempty"`
	Explain              string   `protobuf:"bytes,8,opt,name=explain,proto3" json:"explain,omitempty"`
	Number               string   `protobuf:"bytes,9,opt,name=number,proto3" json:"number,omitempty"`
	Comm                 string   `protobuf:"bytes,10,opt,name=comm,proto3" json:"comm,omitempty"`
	Indat                string   `protobuf:"bytes,11,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,12,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleTrainingMaterials) Reset()         { *m = SingleTrainingMaterials{} }
func (m *SingleTrainingMaterials) String() string { return proto.CompactTextString(m) }
func (*SingleTrainingMaterials) ProtoMessage()    {}
func (*SingleTrainingMaterials) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{42}
}

func (m *SingleTrainingMaterials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleTrainingMaterials.Unmarshal(m, b)
}
func (m *SingleTrainingMaterials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleTrainingMaterials.Marshal(b, m, deterministic)
}
func (m *SingleTrainingMaterials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleTrainingMaterials.Merge(m, src)
}
func (m *SingleTrainingMaterials) XXX_Size() int {
	return xxx_messageInfo_SingleTrainingMaterials.Size(m)
}
func (m *SingleTrainingMaterials) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleTrainingMaterials.DiscardUnknown(m)
}

var xxx_messageInfo_SingleTrainingMaterials proto.InternalMessageInfo

func (m *SingleTrainingMaterials) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleTrainingMaterials) GetItemno() string {
	if m != nil {
		return m.Itemno
	}
	return ""
}

func (m *SingleTrainingMaterials) GetYymm() string {
	if m != nil {
		return m.Yymm
	}
	return ""
}

func (m *SingleTrainingMaterials) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SingleTrainingMaterials) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *SingleTrainingMaterials) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *SingleTrainingMaterials) GetBmno() string {
	if m != nil {
		return m.Bmno
	}
	return ""
}

func (m *SingleTrainingMaterials) GetExplain() string {
	if m != nil {
		return m.Explain
	}
	return ""
}

func (m *SingleTrainingMaterials) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *SingleTrainingMaterials) GetComm() string {
	if m != nil {
		return m.Comm
	}
	return ""
}

func (m *SingleTrainingMaterials) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleTrainingMaterials) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆教育訓練教材資料
type MultiTrainingMaterials struct {
	Dataset              []*SingleTrainingMaterials `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MultiTrainingMaterials) Reset()         { *m = MultiTrainingMaterials{} }
func (m *MultiTrainingMaterials) String() string { return proto.CompactTextString(m) }
func (*MultiTrainingMaterials) ProtoMessage()    {}
func (*MultiTrainingMaterials) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{43}
}

func (m *MultiTrainingMaterials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiTrainingMaterials.Unmarshal(m, b)
}
func (m *MultiTrainingMaterials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiTrainingMaterials.Marshal(b, m, deterministic)
}
func (m *MultiTrainingMaterials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiTrainingMaterials.Merge(m, src)
}
func (m *MultiTrainingMaterials) XXX_Size() int {
	return xxx_messageInfo_MultiTrainingMaterials.Size(m)
}
func (m *MultiTrainingMaterials) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiTrainingMaterials.DiscardUnknown(m)
}

var xxx_messageInfo_MultiTrainingMaterials proto.InternalMessageInfo

func (m *MultiTrainingMaterials) GetDataset() []*SingleTrainingMaterials {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆職能崗位資料
type SingleJobDutyPost struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Resiyn               string   `protobuf:"bytes,2,opt,name=resiyn,proto3" json:"resiyn,omitempty"`
	Resno                string   `protobuf:"bytes,3,opt,name=resno,proto3" json:"resno,omitempty"`
	Heacle               string   `protobuf:"bytes,4,opt,name=heacle,proto3" json:"heacle,omitempty"`
	Itemno               string   `protobuf:"bytes,5,opt,name=itemno,proto3" json:"itemno,omitempty"`
	Workind              string   `protobuf:"bytes,6,opt,name=workind,proto3" json:"workind,omitempty"`
	Jobtit               string   `protobuf:"bytes,7,opt,name=jobtit,proto3" json:"jobtit,omitempty"`
	Comm                 string   `protobuf:"bytes,8,opt,name=comm,proto3" json:"comm,omitempty"`
	Comm1                string   `protobuf:"bytes,9,opt,name=comm1,proto3" json:"comm1,omitempty"`
	Indat                string   `protobuf:"bytes,10,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,11,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleJobDutyPost) Reset()         { *m = SingleJobDutyPost{} }
func (m *SingleJobDutyPost) String() string { return proto.CompactTextString(m) }
func (*SingleJobDutyPost) ProtoMessage()    {}
func (*SingleJobDutyPost) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{44}
}

func (m *SingleJobDutyPost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleJobDutyPost.Unmarshal(m, b)
}
func (m *SingleJobDutyPost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleJobDutyPost.Marshal(b, m, deterministic)
}
func (m *SingleJobDutyPost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleJobDutyPost.Merge(m, src)
}
func (m *SingleJobDutyPost) XXX_Size() int {
	return xxx_messageInfo_SingleJobDutyPost.Size(m)
}
func (m *SingleJobDutyPost) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleJobDutyPost.DiscardUnknown(m)
}

var xxx_messageInfo_SingleJobDutyPost proto.InternalMessageInfo

func (m *SingleJobDutyPost) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleJobDutyPost) GetResiyn() string {
	if m != nil {
		return m.Resiyn
	}
	return ""
}

func (m *SingleJobDutyPost) GetResno() string {
	if m != nil {
		return m.Resno
	}
	return ""
}

func (m *SingleJobDutyPost) GetHeacle() string {
	if m != nil {
		return m.Heacle
	}
	return ""
}

func (m *SingleJobDutyPost) GetItemno() string {
	if m != nil {
		return m.Itemno
	}
	return ""
}

func (m *SingleJobDutyPost) GetWorkind() string {
	if m != nil {
		return m.Workind
	}
	return ""
}

func (m *SingleJobDutyPost) GetJobtit() string {
	if m != nil {
		return m.Jobtit
	}
	return ""
}

func (m *SingleJobDutyPost) GetComm() string {
	if m != nil {
		return m.Comm
	}
	return ""
}

func (m *SingleJobDutyPost) GetComm1() string {
	if m != nil {
		return m.Comm1
	}
	return ""
}

func (m *SingleJobDutyPost) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleJobDutyPost) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆職能崗位資料
type MultiJobDutyPost struct {
	Dataset              []*SingleJobDutyPost `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MultiJobDutyPost) Reset()         { *m = MultiJobDutyPost{} }
func (m *MultiJobDutyPost) String() string { return proto.CompactTextString(m) }
func (*MultiJobDutyPost) ProtoMessage()    {}
func (*MultiJobDutyPost) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{45}
}

func (m *MultiJobDutyPost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiJobDutyPost.Unmarshal(m, b)
}
func (m *MultiJobDutyPost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiJobDutyPost.Marshal(b, m, deterministic)
}
func (m *MultiJobDutyPost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiJobDutyPost.Merge(m, src)
}
func (m *MultiJobDutyPost) XXX_Size() int {
	return xxx_messageInfo_MultiJobDutyPost.Size(m)
}
func (m *MultiJobDutyPost) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiJobDutyPost.DiscardUnknown(m)
}

var xxx_messageInfo_MultiJobDutyPost proto.InternalMessageInfo

func (m *MultiJobDutyPost) GetDataset() []*SingleJobDutyPost {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆教育訓練計畫
type SingleTrainingFees struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Yearno               string   `protobuf:"bytes,2,opt,name=yearno,proto3" json:"yearno,omitempty"`
	Deptno               string   `protobuf:"bytes,3,opt,name=deptno,proto3" json:"deptno,omitempty"`
	Serno                string   `protobuf:"bytes,4,opt,name=serno,proto3" json:"serno,omitempty"`
	Empno                string   `protobuf:"bytes,5,opt,name=empno,proto3" json:"empno,omitempty"`
	Name                 string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Depno                string   `protobuf:"bytes,7,opt,name=depno,proto3" json:"depno,omitempty"`
	Tecexp               float32  `protobuf:"fixed32,8,opt,name=tecexp,proto3" json:"tecexp,omitempty"`
	Traexp               float32  `protobuf:"fixed32,9,opt,name=traexp,proto3" json:"traexp,omitempty"`
	Othexp               float32  `protobuf:"fixed32,10,opt,name=othexp,proto3" json:"othexp,omitempty"`
	Teaexp               float32  `protobuf:"fixed32,11,opt,name=teaexp,proto3" json:"teaexp,omitempty"`
	Bookexp              float32  `protobuf:"fixed32,12,opt,name=bookexp,proto3" json:"bookexp,omitempty"`
	Allexp               float32  `protobuf:"fixed32,13,opt,name=allexp,proto3" json:"allexp,omitempty"`
	Effstr               string   `protobuf:"bytes,14,opt,name=effstr,proto3" json:"effstr,omitempty"`
	Effend               string   `protobuf:"bytes,15,opt,name=effend,proto3" json:"effend,omitempty"`
	Type                 string   `protobuf:"bytes,16,opt,name=type,proto3" json:"type,omitempty"`
	Comm                 string   `protobuf:"bytes,17,opt,name=comm,proto3" json:"comm,omitempty"`
	Indat                string   `protobuf:"bytes,18,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,19,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleTrainingFees) Reset()         { *m = SingleTrainingFees{} }
func (m *SingleTrainingFees) String() string { return proto.CompactTextString(m) }
func (*SingleTrainingFees) ProtoMessage()    {}
func (*SingleTrainingFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{46}
}

func (m *SingleTrainingFees) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleTrainingFees.Unmarshal(m, b)
}
func (m *SingleTrainingFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleTrainingFees.Marshal(b, m, deterministic)
}
func (m *SingleTrainingFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleTrainingFees.Merge(m, src)
}
func (m *SingleTrainingFees) XXX_Size() int {
	return xxx_messageInfo_SingleTrainingFees.Size(m)
}
func (m *SingleTrainingFees) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleTrainingFees.DiscardUnknown(m)
}

var xxx_messageInfo_SingleTrainingFees proto.InternalMessageInfo

func (m *SingleTrainingFees) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleTrainingFees) GetYearno() string {
	if m != nil {
		return m.Yearno
	}
	return ""
}

func (m *SingleTrainingFees) GetDeptno() string {
	if m != nil {
		return m.Deptno
	}
	return ""
}

func (m *SingleTrainingFees) GetSerno() string {
	if m != nil {
		return m.Serno
	}
	return ""
}

func (m *SingleTrainingFees) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *SingleTrainingFees) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SingleTrainingFees) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *SingleTrainingFees) GetTecexp() float32 {
	if m != nil {
		return m.Tecexp
	}
	return 0
}

func (m *SingleTrainingFees) GetTraexp() float32 {
	if m != nil {
		return m.Traexp
	}
	return 0
}

func (m *SingleTrainingFees) GetOthexp() float32 {
	if m != nil {
		return m.Othexp
	}
	return 0
}

func (m *SingleTrainingFees) GetTeaexp() float32 {
	if m != nil {
		return m.Teaexp
	}
	return 0
}

func (m *SingleTrainingFees) GetBookexp() float32 {
	if m != nil {
		return m.Bookexp
	}
	return 0
}

func (m *SingleTrainingFees) GetAllexp() float32 {
	if m != nil {
		return m.Allexp
	}
	return 0
}

func (m *SingleTrainingFees) GetEffstr() string {
	if m != nil {
		return m.Effstr
	}
	return ""
}

func (m *SingleTrainingFees) GetEffend() string {
	if m != nil {
		return m.Effend
	}
	return ""
}

func (m *SingleTrainingFees) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SingleTrainingFees) GetComm() string {
	if m != nil {
		return m.Comm
	}
	return ""
}

func (m *SingleTrainingFees) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleTrainingFees) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆教育訓練計畫
type MultiTrainingFees struct {
	Dataset              []*SingleTrainingFees `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MultiTrainingFees) Reset()         { *m = MultiTrainingFees{} }
func (m *MultiTrainingFees) String() string { return proto.CompactTextString(m) }
func (*MultiTrainingFees) ProtoMessage()    {}
func (*MultiTrainingFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{47}
}

func (m *MultiTrainingFees) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiTrainingFees.Unmarshal(m, b)
}
func (m *MultiTrainingFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiTrainingFees.Marshal(b, m, deterministic)
}
func (m *MultiTrainingFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiTrainingFees.Merge(m, src)
}
func (m *MultiTrainingFees) XXX_Size() int {
	return xxx_messageInfo_MultiTrainingFees.Size(m)
}
func (m *MultiTrainingFees) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiTrainingFees.DiscardUnknown(m)
}

var xxx_messageInfo_MultiTrainingFees proto.InternalMessageInfo

func (m *MultiTrainingFees) GetDataset() []*SingleTrainingFees {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆職務應上課程資料
type SingleJobRequiredCouse struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Titleno              string   `protobuf:"bytes,2,opt,name=titleno,proto3" json:"titleno,omitempty"`
	Bigno                string   `protobuf:"bytes,3,opt,name=bigno,proto3" json:"bigno,omitempty"`
	Medno                string   `protobuf:"bytes,4,opt,name=medno,proto3" json:"medno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleJobRequiredCouse) Reset()         { *m = SingleJobRequiredCouse{} }
func (m *SingleJobRequiredCouse) String() string { return proto.CompactTextString(m) }
func (*SingleJobRequiredCouse) ProtoMessage()    {}
func (*SingleJobRequiredCouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{48}
}

func (m *SingleJobRequiredCouse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleJobRequiredCouse.Unmarshal(m, b)
}
func (m *SingleJobRequiredCouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleJobRequiredCouse.Marshal(b, m, deterministic)
}
func (m *SingleJobRequiredCouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleJobRequiredCouse.Merge(m, src)
}
func (m *SingleJobRequiredCouse) XXX_Size() int {
	return xxx_messageInfo_SingleJobRequiredCouse.Size(m)
}
func (m *SingleJobRequiredCouse) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleJobRequiredCouse.DiscardUnknown(m)
}

var xxx_messageInfo_SingleJobRequiredCouse proto.InternalMessageInfo

func (m *SingleJobRequiredCouse) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleJobRequiredCouse) GetTitleno() string {
	if m != nil {
		return m.Titleno
	}
	return ""
}

func (m *SingleJobRequiredCouse) GetBigno() string {
	if m != nil {
		return m.Bigno
	}
	return ""
}

func (m *SingleJobRequiredCouse) GetMedno() string {
	if m != nil {
		return m.Medno
	}
	return ""
}

//多筆職務應上課程資料
type MultiJobRequiredCouse struct {
	Dataset              []*SingleJobRequiredCouse `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *MultiJobRequiredCouse) Reset()         { *m = MultiJobRequiredCouse{} }
func (m *MultiJobRequiredCouse) String() string { return proto.CompactTextString(m) }
func (*MultiJobRequiredCouse) ProtoMessage()    {}
func (*MultiJobRequiredCouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{49}
}

func (m *MultiJobRequiredCouse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiJobRequiredCouse.Unmarshal(m, b)
}
func (m *MultiJobRequiredCouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiJobRequiredCouse.Marshal(b, m, deterministic)
}
func (m *MultiJobRequiredCouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiJobRequiredCouse.Merge(m, src)
}
func (m *MultiJobRequiredCouse) XXX_Size() int {
	return xxx_messageInfo_MultiJobRequiredCouse.Size(m)
}
func (m *MultiJobRequiredCouse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiJobRequiredCouse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiJobRequiredCouse proto.InternalMessageInfo

func (m *MultiJobRequiredCouse) GetDataset() []*SingleJobRequiredCouse {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆職稱說明資料
type SingleJobTitle struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Titleno              string   `protobuf:"bytes,2,opt,name=titleno,proto3" json:"titleno,omitempty"`
	Titlename            string   `protobuf:"bytes,3,opt,name=titlename,proto3" json:"titlename,omitempty"`
	Titleexa             int32    `protobuf:"varint,4,opt,name=titleexa,proto3" json:"titleexa,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleJobTitle) Reset()         { *m = SingleJobTitle{} }
func (m *SingleJobTitle) String() string { return proto.CompactTextString(m) }
func (*SingleJobTitle) ProtoMessage()    {}
func (*SingleJobTitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{50}
}

func (m *SingleJobTitle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleJobTitle.Unmarshal(m, b)
}
func (m *SingleJobTitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleJobTitle.Marshal(b, m, deterministic)
}
func (m *SingleJobTitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleJobTitle.Merge(m, src)
}
func (m *SingleJobTitle) XXX_Size() int {
	return xxx_messageInfo_SingleJobTitle.Size(m)
}
func (m *SingleJobTitle) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleJobTitle.DiscardUnknown(m)
}

var xxx_messageInfo_SingleJobTitle proto.InternalMessageInfo

func (m *SingleJobTitle) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleJobTitle) GetTitleno() string {
	if m != nil {
		return m.Titleno
	}
	return ""
}

func (m *SingleJobTitle) GetTitlename() string {
	if m != nil {
		return m.Titlename
	}
	return ""
}

func (m *SingleJobTitle) GetTitleexa() int32 {
	if m != nil {
		return m.Titleexa
	}
	return 0
}

//多筆職稱說明資料
type MultiJobTitle struct {
	Dataset              []*SingleJobTitle `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MultiJobTitle) Reset()         { *m = MultiJobTitle{} }
func (m *MultiJobTitle) String() string { return proto.CompactTextString(m) }
func (*MultiJobTitle) ProtoMessage()    {}
func (*MultiJobTitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{51}
}

func (m *MultiJobTitle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiJobTitle.Unmarshal(m, b)
}
func (m *MultiJobTitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiJobTitle.Marshal(b, m, deterministic)
}
func (m *MultiJobTitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiJobTitle.Merge(m, src)
}
func (m *MultiJobTitle) XXX_Size() int {
	return xxx_messageInfo_MultiJobTitle.Size(m)
}
func (m *MultiJobTitle) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiJobTitle.DiscardUnknown(m)
}

var xxx_messageInfo_MultiJobTitle proto.InternalMessageInfo

func (m *MultiJobTitle) GetDataset() []*SingleJobTitle {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆證件管理資料
type SingleCredentialsManagement struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Empno                string   `protobuf:"bytes,2,opt,name=empno,proto3" json:"empno,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Depno                string   `protobuf:"bytes,4,opt,name=depno,proto3" json:"depno,omitempty"`
	Engname              string   `protobuf:"bytes,5,opt,name=engname,proto3" json:"engname,omitempty"`
	Mailcode             string   `protobuf:"bytes,6,opt,name=mailcode,proto3" json:"mailcode,omitempty"`
	Bithdat              string   `protobuf:"bytes,7,opt,name=bithdat,proto3" json:"bithdat,omitempty"`
	Portcode             string   `protobuf:"bytes,8,opt,name=portcode,proto3" json:"portcode,omitempty"`
	Portnum              string   `protobuf:"bytes,9,opt,name=portnum,proto3" json:"portnum,omitempty"`
	Effdat1              string   `protobuf:"bytes,10,opt,name=effdat1,proto3" json:"effdat1,omitempty"`
	Effdat2              string   `protobuf:"bytes,11,opt,name=effdat2,proto3" json:"effdat2,omitempty"`
	Nextdat              string   `protobuf:"bytes,12,opt,name=nextdat,proto3" json:"nextdat,omitempty"`
	Reccode              string   `protobuf:"bytes,13,opt,name=reccode,proto3" json:"reccode,omitempty"`
	Indate               string   `protobuf:"bytes,14,opt,name=indate,proto3" json:"indate,omitempty"`
	Usrno                string   `protobuf:"bytes,15,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleCredentialsManagement) Reset()         { *m = SingleCredentialsManagement{} }
func (m *SingleCredentialsManagement) String() string { return proto.CompactTextString(m) }
func (*SingleCredentialsManagement) ProtoMessage()    {}
func (*SingleCredentialsManagement) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{52}
}

func (m *SingleCredentialsManagement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleCredentialsManagement.Unmarshal(m, b)
}
func (m *SingleCredentialsManagement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleCredentialsManagement.Marshal(b, m, deterministic)
}
func (m *SingleCredentialsManagement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleCredentialsManagement.Merge(m, src)
}
func (m *SingleCredentialsManagement) XXX_Size() int {
	return xxx_messageInfo_SingleCredentialsManagement.Size(m)
}
func (m *SingleCredentialsManagement) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleCredentialsManagement.DiscardUnknown(m)
}

var xxx_messageInfo_SingleCredentialsManagement proto.InternalMessageInfo

func (m *SingleCredentialsManagement) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleCredentialsManagement) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *SingleCredentialsManagement) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SingleCredentialsManagement) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *SingleCredentialsManagement) GetEngname() string {
	if m != nil {
		return m.Engname
	}
	return ""
}

func (m *SingleCredentialsManagement) GetMailcode() string {
	if m != nil {
		return m.Mailcode
	}
	return ""
}

func (m *SingleCredentialsManagement) GetBithdat() string {
	if m != nil {
		return m.Bithdat
	}
	return ""
}

func (m *SingleCredentialsManagement) GetPortcode() string {
	if m != nil {
		return m.Portcode
	}
	return ""
}

func (m *SingleCredentialsManagement) GetPortnum() string {
	if m != nil {
		return m.Portnum
	}
	return ""
}

func (m *SingleCredentialsManagement) GetEffdat1() string {
	if m != nil {
		return m.Effdat1
	}
	return ""
}

func (m *SingleCredentialsManagement) GetEffdat2() string {
	if m != nil {
		return m.Effdat2
	}
	return ""
}

func (m *SingleCredentialsManagement) GetNextdat() string {
	if m != nil {
		return m.Nextdat
	}
	return ""
}

func (m *SingleCredentialsManagement) GetReccode() string {
	if m != nil {
		return m.Reccode
	}
	return ""
}

func (m *SingleCredentialsManagement) GetIndate() string {
	if m != nil {
		return m.Indate
	}
	return ""
}

func (m *SingleCredentialsManagement) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆證件管理資料
type MultiCredentialsManagement struct {
	Dataset              []*SingleCredentialsManagement `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *MultiCredentialsManagement) Reset()         { *m = MultiCredentialsManagement{} }
func (m *MultiCredentialsManagement) String() string { return proto.CompactTextString(m) }
func (*MultiCredentialsManagement) ProtoMessage()    {}
func (*MultiCredentialsManagement) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{53}
}

func (m *MultiCredentialsManagement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiCredentialsManagement.Unmarshal(m, b)
}
func (m *MultiCredentialsManagement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiCredentialsManagement.Marshal(b, m, deterministic)
}
func (m *MultiCredentialsManagement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiCredentialsManagement.Merge(m, src)
}
func (m *MultiCredentialsManagement) XXX_Size() int {
	return xxx_messageInfo_MultiCredentialsManagement.Size(m)
}
func (m *MultiCredentialsManagement) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiCredentialsManagement.DiscardUnknown(m)
}

var xxx_messageInfo_MultiCredentialsManagement proto.InternalMessageInfo

func (m *MultiCredentialsManagement) GetDataset() []*SingleCredentialsManagement {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆上崗資格資料
type SingleWorkQualification struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Empno                string   `protobuf:"bytes,2,opt,name=empno,proto3" json:"empno,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Depno                string   `protobuf:"bytes,4,opt,name=depno,proto3" json:"depno,omitempty"`
	Sextyp               string   `protobuf:"bytes,5,opt,name=sextyp,proto3" json:"sextyp,omitempty"`
	Training             string   `protobuf:"bytes,6,opt,name=training,proto3" json:"training,omitempty"`
	Skill                string   `protobuf:"bytes,7,opt,name=skill,proto3" json:"skill,omitempty"`
	Position             string   `protobuf:"bytes,8,opt,name=position,proto3" json:"position,omitempty"`
	Item                 int32    `protobuf:"varint,9,opt,name=item,proto3" json:"item,omitempty"`
	Depart               string   `protobuf:"bytes,10,opt,name=depart,proto3" json:"depart,omitempty"`
	Chdate               string   `protobuf:"bytes,11,opt,name=chdate,proto3" json:"chdate,omitempty"`
	Indat                string   `protobuf:"bytes,12,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,13,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleWorkQualification) Reset()         { *m = SingleWorkQualification{} }
func (m *SingleWorkQualification) String() string { return proto.CompactTextString(m) }
func (*SingleWorkQualification) ProtoMessage()    {}
func (*SingleWorkQualification) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{54}
}

func (m *SingleWorkQualification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleWorkQualification.Unmarshal(m, b)
}
func (m *SingleWorkQualification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleWorkQualification.Marshal(b, m, deterministic)
}
func (m *SingleWorkQualification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleWorkQualification.Merge(m, src)
}
func (m *SingleWorkQualification) XXX_Size() int {
	return xxx_messageInfo_SingleWorkQualification.Size(m)
}
func (m *SingleWorkQualification) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleWorkQualification.DiscardUnknown(m)
}

var xxx_messageInfo_SingleWorkQualification proto.InternalMessageInfo

func (m *SingleWorkQualification) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleWorkQualification) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *SingleWorkQualification) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SingleWorkQualification) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *SingleWorkQualification) GetSextyp() string {
	if m != nil {
		return m.Sextyp
	}
	return ""
}

func (m *SingleWorkQualification) GetTraining() string {
	if m != nil {
		return m.Training
	}
	return ""
}

func (m *SingleWorkQualification) GetSkill() string {
	if m != nil {
		return m.Skill
	}
	return ""
}

func (m *SingleWorkQualification) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *SingleWorkQualification) GetItem() int32 {
	if m != nil {
		return m.Item
	}
	return 0
}

func (m *SingleWorkQualification) GetDepart() string {
	if m != nil {
		return m.Depart
	}
	return ""
}

func (m *SingleWorkQualification) GetChdate() string {
	if m != nil {
		return m.Chdate
	}
	return ""
}

func (m *SingleWorkQualification) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleWorkQualification) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//多筆上崗資格資料
type MultiWorkQualification struct {
	Dataset              []*SingleWorkQualification `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MultiWorkQualification) Reset()         { *m = MultiWorkQualification{} }
func (m *MultiWorkQualification) String() string { return proto.CompactTextString(m) }
func (*MultiWorkQualification) ProtoMessage()    {}
func (*MultiWorkQualification) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{55}
}

func (m *MultiWorkQualification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiWorkQualification.Unmarshal(m, b)
}
func (m *MultiWorkQualification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiWorkQualification.Marshal(b, m, deterministic)
}
func (m *MultiWorkQualification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiWorkQualification.Merge(m, src)
}
func (m *MultiWorkQualification) XXX_Size() int {
	return xxx_messageInfo_MultiWorkQualification.Size(m)
}
func (m *MultiWorkQualification) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiWorkQualification.DiscardUnknown(m)
}

var xxx_messageInfo_MultiWorkQualification proto.InternalMessageInfo

func (m *MultiWorkQualification) GetDataset() []*SingleWorkQualification {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//開課資料流水號
type SernoReply struct {
	Serno                string   `protobuf:"bytes,1,opt,name=serno,proto3" json:"serno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SernoReply) Reset()         { *m = SernoReply{} }
func (m *SernoReply) String() string { return proto.CompactTextString(m) }
func (*SernoReply) ProtoMessage()    {}
func (*SernoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{56}
}

func (m *SernoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SernoReply.Unmarshal(m, b)
}
func (m *SernoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SernoReply.Marshal(b, m, deterministic)
}
func (m *SernoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SernoReply.Merge(m, src)
}
func (m *SernoReply) XXX_Size() int {
	return xxx_messageInfo_SernoReply.Size(m)
}
func (m *SernoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SernoReply.DiscardUnknown(m)
}

var xxx_messageInfo_SernoReply proto.InternalMessageInfo

func (m *SernoReply) GetSerno() string {
	if m != nil {
		return m.Serno
	}
	return ""
}

//教育訓練紀錄表請求
type TrainingRecordRequest struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Depno                string   `protobuf:"bytes,2,opt,name=depno,proto3" json:"depno,omitempty"`
	Empno                string   `protobuf:"bytes,3,opt,name=empno,proto3" json:"empno,omitempty"`
	Entdat               string   `protobuf:"bytes,4,opt,name=entdat,proto3" json:"entdat,omitempty"`
	Levdat               string   `protobuf:"bytes,5,opt,name=levdat,proto3" json:"levdat,omitempty"`
	Factory              string   `protobuf:"bytes,6,opt,name=factory,proto3" json:"factory,omitempty"`
	TrainingStart        string   `protobuf:"bytes,7,opt,name=training_start,json=trainingStart,proto3" json:"training_start,omitempty"`
	TrainingEnd          string   `protobuf:"bytes,8,opt,name=training_end,json=trainingEnd,proto3" json:"training_end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrainingRecordRequest) Reset()         { *m = TrainingRecordRequest{} }
func (m *TrainingRecordRequest) String() string { return proto.CompactTextString(m) }
func (*TrainingRecordRequest) ProtoMessage()    {}
func (*TrainingRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{57}
}

func (m *TrainingRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrainingRecordRequest.Unmarshal(m, b)
}
func (m *TrainingRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrainingRecordRequest.Marshal(b, m, deterministic)
}
func (m *TrainingRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingRecordRequest.Merge(m, src)
}
func (m *TrainingRecordRequest) XXX_Size() int {
	return xxx_messageInfo_TrainingRecordRequest.Size(m)
}
func (m *TrainingRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingRecordRequest proto.InternalMessageInfo

func (m *TrainingRecordRequest) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *TrainingRecordRequest) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *TrainingRecordRequest) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *TrainingRecordRequest) GetEntdat() string {
	if m != nil {
		return m.Entdat
	}
	return ""
}

func (m *TrainingRecordRequest) GetLevdat() string {
	if m != nil {
		return m.Levdat
	}
	return ""
}

func (m *TrainingRecordRequest) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *TrainingRecordRequest) GetTrainingStart() string {
	if m != nil {
		return m.TrainingStart
	}
	return ""
}

func (m *TrainingRecordRequest) GetTrainingEnd() string {
	if m != nil {
		return m.TrainingEnd
	}
	return ""
}

//教育訓練紀錄表
type TrainingRecord struct {
	Header               *EmployeeForTrainingRecord `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Contents             []*TrainingRecordContent   `protobuf:"bytes,2,rep,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TrainingRecord) Reset()         { *m = TrainingRecord{} }
func (m *TrainingRecord) String() string { return proto.CompactTextString(m) }
func (*TrainingRecord) ProtoMessage()    {}
func (*TrainingRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{58}
}

func (m *TrainingRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrainingRecord.Unmarshal(m, b)
}
func (m *TrainingRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrainingRecord.Marshal(b, m, deterministic)
}
func (m *TrainingRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingRecord.Merge(m, src)
}
func (m *TrainingRecord) XXX_Size() int {
	return xxx_messageInfo_TrainingRecord.Size(m)
}
func (m *TrainingRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingRecord.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingRecord proto.InternalMessageInfo

func (m *TrainingRecord) GetHeader() *EmployeeForTrainingRecord {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TrainingRecord) GetContents() []*TrainingRecordContent {
	if m != nil {
		return m.Contents
	}
	return nil
}

//教育訓練紀錄表表頭
type EmployeeForTrainingRecord struct {
	Empno                string   `protobuf:"bytes,1,opt,name=empno,proto3" json:"empno,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sextyp               string   `protobuf:"bytes,3,opt,name=sextyp,proto3" json:"sextyp,omitempty"`
	Birthday             string   `protobuf:"bytes,4,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Entdat               string   `protobuf:"bytes,5,opt,name=entdat,proto3" json:"entdat,omitempty"`
	EduDegree            string   `protobuf:"bytes,6,opt,name=edu_degree,json=eduDegree,proto3" json:"edu_degree,omitempty"`
	DepName              string   `protobuf:"bytes,7,opt,name=dep_name,json=depName,proto3" json:"dep_name,omitempty"`
	Jobname              string   `protobuf:"bytes,8,opt,name=jobname,proto3" json:"jobname,omitempty"`
	Postn                string   `protobuf:"bytes,9,opt,name=postn,proto3" json:"postn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmployeeForTrainingRecord) Reset()         { *m = EmployeeForTrainingRecord{} }
func (m *EmployeeForTrainingRecord) String() string { return proto.CompactTextString(m) }
func (*EmployeeForTrainingRecord) ProtoMessage()    {}
func (*EmployeeForTrainingRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{59}
}

func (m *EmployeeForTrainingRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmployeeForTrainingRecord.Unmarshal(m, b)
}
func (m *EmployeeForTrainingRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmployeeForTrainingRecord.Marshal(b, m, deterministic)
}
func (m *EmployeeForTrainingRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmployeeForTrainingRecord.Merge(m, src)
}
func (m *EmployeeForTrainingRecord) XXX_Size() int {
	return xxx_messageInfo_EmployeeForTrainingRecord.Size(m)
}
func (m *EmployeeForTrainingRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_EmployeeForTrainingRecord.DiscardUnknown(m)
}

var xxx_messageInfo_EmployeeForTrainingRecord proto.InternalMessageInfo

func (m *EmployeeForTrainingRecord) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *EmployeeForTrainingRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EmployeeForTrainingRecord) GetSextyp() string {
	if m != nil {
		return m.Sextyp
	}
	return ""
}

func (m *EmployeeForTrainingRecord) GetBirthday() string {
	if m != nil {
		return m.Birthday
	}
	return ""
}

func (m *EmployeeForTrainingRecord) GetEntdat() string {
	if m != nil {
		return m.Entdat
	}
	return ""
}

func (m *EmployeeForTrainingRecord) GetEduDegree() string {
	if m != nil {
		return m.EduDegree
	}
	return ""
}

func (m *EmployeeForTrainingRecord) GetDepName() string {
	if m != nil {
		return m.DepName
	}
	return ""
}

func (m *EmployeeForTrainingRecord) GetJobname() string {
	if m != nil {
		return m.Jobname
	}
	return ""
}

func (m *EmployeeForTrainingRecord) GetPostn() string {
	if m != nil {
		return m.Postn
	}
	return ""
}

//教育訓練紀錄表內容
type TrainingRecordContent struct {
	Serno                string   `protobuf:"bytes,1,opt,name=serno,proto3" json:"serno,omitempty"`
	Factory              string   `protobuf:"bytes,2,opt,name=factory,proto3" json:"factory,omitempty"`
	CourseName           string   `protobuf:"bytes,3,opt,name=course_name,json=courseName,proto3" json:"course_name,omitempty"`
	CourseDescription    string   `protobuf:"bytes,4,opt,name=course_description,json=courseDescription,proto3" json:"course_description,omitempty"`
	TrainingUnit         string   `protobuf:"bytes,5,opt,name=training_unit,json=trainingUnit,proto3" json:"training_unit,omitempty"`
	Startdat             string   `protobuf:"bytes,6,opt,name=startdat,proto3" json:"startdat,omitempty"`
	Enddat               string   `protobuf:"bytes,7,opt,name=enddat,proto3" json:"enddat,omitempty"`
	Hours                float32  `protobuf:"fixed32,8,opt,name=hours,proto3" json:"hours,omitempty"`
	Cost                 uint64   `protobuf:"varint,9,opt,name=cost,proto3" json:"cost,omitempty"`
	Estimate             string   `protobuf:"bytes,10,opt,name=estimate,proto3" json:"estimate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrainingRecordContent) Reset()         { *m = TrainingRecordContent{} }
func (m *TrainingRecordContent) String() string { return proto.CompactTextString(m) }
func (*TrainingRecordContent) ProtoMessage()    {}
func (*TrainingRecordContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{60}
}

func (m *TrainingRecordContent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrainingRecordContent.Unmarshal(m, b)
}
func (m *TrainingRecordContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrainingRecordContent.Marshal(b, m, deterministic)
}
func (m *TrainingRecordContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingRecordContent.Merge(m, src)
}
func (m *TrainingRecordContent) XXX_Size() int {
	return xxx_messageInfo_TrainingRecordContent.Size(m)
}
func (m *TrainingRecordContent) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingRecordContent.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingRecordContent proto.InternalMessageInfo

func (m *TrainingRecordContent) GetSerno() string {
	if m != nil {
		return m.Serno
	}
	return ""
}

func (m *TrainingRecordContent) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *TrainingRecordContent) GetCourseName() string {
	if m != nil {
		return m.CourseName
	}
	return ""
}

func (m *TrainingRecordContent) GetCourseDescription() string {
	if m != nil {
		return m.CourseDescription
	}
	return ""
}

func (m *TrainingRecordContent) GetTrainingUnit() string {
	if m != nil {
		return m.TrainingUnit
	}
	return ""
}

func (m *TrainingRecordContent) GetStartdat() string {
	if m != nil {
		return m.Startdat
	}
	return ""
}

func (m *TrainingRecordContent) GetEnddat() string {
	if m != nil {
		return m.Enddat
	}
	return ""
}

func (m *TrainingRecordContent) GetHours() float32 {
	if m != nil {
		return m.Hours
	}
	return 0
}

func (m *TrainingRecordContent) GetCost() uint64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *TrainingRecordContent) GetEstimate() string {
	if m != nil {
		return m.Estimate
	}
	return ""
}

//教育訓練紀錄表
type SingleTrainingReport struct {
	Empno                string   `protobuf:"bytes,1,opt,name=empno,proto3" json:"empno,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sextyp               string   `protobuf:"bytes,3,opt,name=sextyp,proto3" json:"sextyp,omitempty"`
	Bithdat              string   `protobuf:"bytes,4,opt,name=bithdat,proto3" json:"bithdat,omitempty"`
	Entdat               string   `protobuf:"bytes,5,opt,name=entdat,proto3" json:"entdat,omitempty"`
	Eduno                string   `protobuf:"bytes,6,opt,name=eduno,proto3" json:"eduno,omitempty"`
	Jobtit               string   `protobuf:"bytes,7,opt,name=jobtit,proto3" json:"jobtit,omitempty"`
	Postn                string   `protobuf:"bytes,8,opt,name=postn,proto3" json:"postn,omitempty"`
	Serno                string   `protobuf:"bytes,9,opt,name=serno,proto3" json:"serno,omitempty"`
	Factory              string   `protobuf:"bytes,10,opt,name=factory,proto3" json:"factory,omitempty"`
	Currno               string   `protobuf:"bytes,11,opt,name=currno,proto3" json:"currno,omitempty"`
	Depno                string   `protobuf:"bytes,12,opt,name=depno,proto3" json:"depno,omitempty"`
	Explain              string   `protobuf:"bytes,13,opt,name=explain,proto3" json:"explain,omitempty"`
	Stadate              string   `protobuf:"bytes,14,opt,name=stadate,proto3" json:"stadate,omitempty"`
	Enddate              string   `protobuf:"bytes,15,opt,name=enddate,proto3" json:"enddate,omitempty"`
	Hour                 float32  `protobuf:"fixed32,16,opt,name=hour,proto3" json:"hour,omitempty"`
	Trainexp             float32  `protobuf:"fixed32,17,opt,name=trainexp,proto3" json:"trainexp,omitempty"`
	Estimate             string   `protobuf:"bytes,18,opt,name=estimate,proto3" json:"estimate,omitempty"`
	Teaunit              string   `protobuf:"bytes,19,opt,name=teaunit,proto3" json:"teaunit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleTrainingReport) Reset()         { *m = SingleTrainingReport{} }
func (m *SingleTrainingReport) String() string { return proto.CompactTextString(m) }
func (*SingleTrainingReport) ProtoMessage()    {}
func (*SingleTrainingReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{61}
}

func (m *SingleTrainingReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleTrainingReport.Unmarshal(m, b)
}
func (m *SingleTrainingReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleTrainingReport.Marshal(b, m, deterministic)
}
func (m *SingleTrainingReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleTrainingReport.Merge(m, src)
}
func (m *SingleTrainingReport) XXX_Size() int {
	return xxx_messageInfo_SingleTrainingReport.Size(m)
}
func (m *SingleTrainingReport) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleTrainingReport.DiscardUnknown(m)
}

var xxx_messageInfo_SingleTrainingReport proto.InternalMessageInfo

func (m *SingleTrainingReport) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *SingleTrainingReport) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SingleTrainingReport) GetSextyp() string {
	if m != nil {
		return m.Sextyp
	}
	return ""
}

func (m *SingleTrainingReport) GetBithdat() string {
	if m != nil {
		return m.Bithdat
	}
	return ""
}

func (m *SingleTrainingReport) GetEntdat() string {
	if m != nil {
		return m.Entdat
	}
	return ""
}

func (m *SingleTrainingReport) GetEduno() string {
	if m != nil {
		return m.Eduno
	}
	return ""
}

func (m *SingleTrainingReport) GetJobtit() string {
	if m != nil {
		return m.Jobtit
	}
	return ""
}

func (m *SingleTrainingReport) GetPostn() string {
	if m != nil {
		return m.Postn
	}
	return ""
}

func (m *SingleTrainingReport) GetSerno() string {
	if m != nil {
		return m.Serno
	}
	return ""
}

func (m *SingleTrainingReport) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *SingleTrainingReport) GetCurrno() string {
	if m != nil {
		return m.Currno
	}
	return ""
}

func (m *SingleTrainingReport) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *SingleTrainingReport) GetExplain() string {
	if m != nil {
		return m.Explain
	}
	return ""
}

func (m *SingleTrainingReport) GetStadate() string {
	if m != nil {
		return m.Stadate
	}
	return ""
}

func (m *SingleTrainingReport) GetEnddate() string {
	if m != nil {
		return m.Enddate
	}
	return ""
}

func (m *SingleTrainingReport) GetHour() float32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *SingleTrainingReport) GetTrainexp() float32 {
	if m != nil {
		return m.Trainexp
	}
	return 0
}

func (m *SingleTrainingReport) GetEstimate() string {
	if m != nil {
		return m.Estimate
	}
	return ""
}

func (m *SingleTrainingReport) GetTeaunit() string {
	if m != nil {
		return m.Teaunit
	}
	return ""
}

//多筆教育訓練紀錄表
type MultiTrainingReport struct {
	Dataset              []*SingleTrainingReport `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *MultiTrainingReport) Reset()         { *m = MultiTrainingReport{} }
func (m *MultiTrainingReport) String() string { return proto.CompactTextString(m) }
func (*MultiTrainingReport) ProtoMessage()    {}
func (*MultiTrainingReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{62}
}

func (m *MultiTrainingReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiTrainingReport.Unmarshal(m, b)
}
func (m *MultiTrainingReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiTrainingReport.Marshal(b, m, deterministic)
}
func (m *MultiTrainingReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiTrainingReport.Merge(m, src)
}
func (m *MultiTrainingReport) XXX_Size() int {
	return xxx_messageInfo_MultiTrainingReport.Size(m)
}
func (m *MultiTrainingReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiTrainingReport.DiscardUnknown(m)
}

var xxx_messageInfo_MultiTrainingReport proto.InternalMessageInfo

func (m *MultiTrainingReport) GetDataset() []*SingleTrainingReport {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//教育訓練成績表
type SingleTrainingScoreReport struct {
	Empno                string   `protobuf:"bytes,1,opt,name=empno,proto3" json:"empno,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Entdat               string   `protobuf:"bytes,3,opt,name=entdat,proto3" json:"entdat,omitempty"`
	Hour0                float32  `protobuf:"fixed32,4,opt,name=hour0,proto3" json:"hour0,omitempty"`
	Hour1                float32  `protobuf:"fixed32,5,opt,name=hour1,proto3" json:"hour1,omitempty"`
	Hour2                float32  `protobuf:"fixed32,6,opt,name=hour2,proto3" json:"hour2,omitempty"`
	Estimate             float32  `protobuf:"fixed32,7,opt,name=estimate,proto3" json:"estimate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleTrainingScoreReport) Reset()         { *m = SingleTrainingScoreReport{} }
func (m *SingleTrainingScoreReport) String() string { return proto.CompactTextString(m) }
func (*SingleTrainingScoreReport) ProtoMessage()    {}
func (*SingleTrainingScoreReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{63}
}

func (m *SingleTrainingScoreReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleTrainingScoreReport.Unmarshal(m, b)
}
func (m *SingleTrainingScoreReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleTrainingScoreReport.Marshal(b, m, deterministic)
}
func (m *SingleTrainingScoreReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleTrainingScoreReport.Merge(m, src)
}
func (m *SingleTrainingScoreReport) XXX_Size() int {
	return xxx_messageInfo_SingleTrainingScoreReport.Size(m)
}
func (m *SingleTrainingScoreReport) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleTrainingScoreReport.DiscardUnknown(m)
}

var xxx_messageInfo_SingleTrainingScoreReport proto.InternalMessageInfo

func (m *SingleTrainingScoreReport) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *SingleTrainingScoreReport) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SingleTrainingScoreReport) GetEntdat() string {
	if m != nil {
		return m.Entdat
	}
	return ""
}

func (m *SingleTrainingScoreReport) GetHour0() float32 {
	if m != nil {
		return m.Hour0
	}
	return 0
}

func (m *SingleTrainingScoreReport) GetHour1() float32 {
	if m != nil {
		return m.Hour1
	}
	return 0
}

func (m *SingleTrainingScoreReport) GetHour2() float32 {
	if m != nil {
		return m.Hour2
	}
	return 0
}

func (m *SingleTrainingScoreReport) GetEstimate() float32 {
	if m != nil {
		return m.Estimate
	}
	return 0
}

//多筆教育訓練成績表
type MultiTrainingScoreReport struct {
	Dataset              []*SingleTrainingScoreReport `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *MultiTrainingScoreReport) Reset()         { *m = MultiTrainingScoreReport{} }
func (m *MultiTrainingScoreReport) String() string { return proto.CompactTextString(m) }
func (*MultiTrainingScoreReport) ProtoMessage()    {}
func (*MultiTrainingScoreReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{64}
}

func (m *MultiTrainingScoreReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiTrainingScoreReport.Unmarshal(m, b)
}
func (m *MultiTrainingScoreReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiTrainingScoreReport.Marshal(b, m, deterministic)
}
func (m *MultiTrainingScoreReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiTrainingScoreReport.Merge(m, src)
}
func (m *MultiTrainingScoreReport) XXX_Size() int {
	return xxx_messageInfo_MultiTrainingScoreReport.Size(m)
}
func (m *MultiTrainingScoreReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiTrainingScoreReport.DiscardUnknown(m)
}

var xxx_messageInfo_MultiTrainingScoreReport proto.InternalMessageInfo

func (m *MultiTrainingScoreReport) GetDataset() []*SingleTrainingScoreReport {
	if m != nil {
		return m.Dataset
	}
	return nil
}

//單筆設定檔
type SingleSeccod struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Codekind             string   `protobuf:"bytes,2,opt,name=codekind,proto3" json:"codekind,omitempty"`
	Code                 string   `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Codsc                string   `protobuf:"bytes,4,opt,name=codsc,proto3" json:"codsc,omitempty"`
	Dtaco                string   `protobuf:"bytes,5,opt,name=dtaco,proto3" json:"dtaco,omitempty"`
	Accco                string   `protobuf:"bytes,6,opt,name=accco,proto3" json:"accco,omitempty"`
	Indat                string   `protobuf:"bytes,7,opt,name=indat,proto3" json:"indat,omitempty"`
	Usrno                string   `protobuf:"bytes,8,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleSeccod) Reset()         { *m = SingleSeccod{} }
func (m *SingleSeccod) String() string { return proto.CompactTextString(m) }
func (*SingleSeccod) ProtoMessage()    {}
func (*SingleSeccod) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{65}
}

func (m *SingleSeccod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleSeccod.Unmarshal(m, b)
}
func (m *SingleSeccod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleSeccod.Marshal(b, m, deterministic)
}
func (m *SingleSeccod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleSeccod.Merge(m, src)
}
func (m *SingleSeccod) XXX_Size() int {
	return xxx_messageInfo_SingleSeccod.Size(m)
}
func (m *SingleSeccod) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleSeccod.DiscardUnknown(m)
}

var xxx_messageInfo_SingleSeccod proto.InternalMessageInfo

func (m *SingleSeccod) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *SingleSeccod) GetCodekind() string {
	if m != nil {
		return m.Codekind
	}
	return ""
}

func (m *SingleSeccod) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *SingleSeccod) GetCodsc() string {
	if m != nil {
		return m.Codsc
	}
	return ""
}

func (m *SingleSeccod) GetDtaco() string {
	if m != nil {
		return m.Dtaco
	}
	return ""
}

func (m *SingleSeccod) GetAccco() string {
	if m != nil {
		return m.Accco
	}
	return ""
}

func (m *SingleSeccod) GetIndat() string {
	if m != nil {
		return m.Indat
	}
	return ""
}

func (m *SingleSeccod) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

//部門查詢
type DepartmentRequest struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Serno                string   `protobuf:"bytes,2,opt,name=serno,proto3" json:"serno,omitempty"`
	Depno                string   `protobuf:"bytes,3,opt,name=depno,proto3" json:"depno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepartmentRequest) Reset()         { *m = DepartmentRequest{} }
func (m *DepartmentRequest) String() string { return proto.CompactTextString(m) }
func (*DepartmentRequest) ProtoMessage()    {}
func (*DepartmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{66}
}

func (m *DepartmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartmentRequest.Unmarshal(m, b)
}
func (m *DepartmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartmentRequest.Marshal(b, m, deterministic)
}
func (m *DepartmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentRequest.Merge(m, src)
}
func (m *DepartmentRequest) XXX_Size() int {
	return xxx_messageInfo_DepartmentRequest.Size(m)
}
func (m *DepartmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentRequest proto.InternalMessageInfo

func (m *DepartmentRequest) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *DepartmentRequest) GetSerno() string {
	if m != nil {
		return m.Serno
	}
	return ""
}

func (m *DepartmentRequest) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

//單筆設定檔說明
type CodscReply struct {
	Codsc                string   `protobuf:"bytes,1,opt,name=codsc,proto3" json:"codsc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CodscReply) Reset()         { *m = CodscReply{} }
func (m *CodscReply) String() string { return proto.CompactTextString(m) }
func (*CodscReply) ProtoMessage()    {}
func (*CodscReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{67}
}

func (m *CodscReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CodscReply.Unmarshal(m, b)
}
func (m *CodscReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CodscReply.Marshal(b, m, deterministic)
}
func (m *CodscReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodscReply.Merge(m, src)
}
func (m *CodscReply) XXX_Size() int {
	return xxx_messageInfo_CodscReply.Size(m)
}
func (m *CodscReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CodscReply.DiscardUnknown(m)
}

var xxx_messageInfo_CodscReply proto.InternalMessageInfo

func (m *CodscReply) GetCodsc() string {
	if m != nil {
		return m.Codsc
	}
	return ""
}

//各廠部門
type EachFactoryRequest struct {
	ActionType           int32    `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Subno                string   `protobuf:"bytes,2,opt,name=subno,proto3" json:"subno,omitempty"`
	Serno                string   `protobuf:"bytes,3,opt,name=serno,proto3" json:"serno,omitempty"`
	Depno                string   `protobuf:"bytes,4,opt,name=depno,proto3" json:"depno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EachFactoryRequest) Reset()         { *m = EachFactoryRequest{} }
func (m *EachFactoryRequest) String() string { return proto.CompactTextString(m) }
func (*EachFactoryRequest) ProtoMessage()    {}
func (*EachFactoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{68}
}

func (m *EachFactoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EachFactoryRequest.Unmarshal(m, b)
}
func (m *EachFactoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EachFactoryRequest.Marshal(b, m, deterministic)
}
func (m *EachFactoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EachFactoryRequest.Merge(m, src)
}
func (m *EachFactoryRequest) XXX_Size() int {
	return xxx_messageInfo_EachFactoryRequest.Size(m)
}
func (m *EachFactoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EachFactoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EachFactoryRequest proto.InternalMessageInfo

func (m *EachFactoryRequest) GetActionType() int32 {
	if m != nil {
		return m.ActionType
	}
	return 0
}

func (m *EachFactoryRequest) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *EachFactoryRequest) GetSerno() string {
	if m != nil {
		return m.Serno
	}
	return ""
}

func (m *EachFactoryRequest) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

//多筆部門/課/組別
type EachFactoryReply struct {
	Arr                  []*FRep  `protobuf:"bytes,1,rep,name=arr,proto3" json:"arr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EachFactoryReply) Reset()         { *m = EachFactoryReply{} }
func (m *EachFactoryReply) String() string { return proto.CompactTextString(m) }
func (*EachFactoryReply) ProtoMessage()    {}
func (*EachFactoryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{69}
}

func (m *EachFactoryReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EachFactoryReply.Unmarshal(m, b)
}
func (m *EachFactoryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EachFactoryReply.Marshal(b, m, deterministic)
}
func (m *EachFactoryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EachFactoryReply.Merge(m, src)
}
func (m *EachFactoryReply) XXX_Size() int {
	return xxx_messageInfo_EachFactoryReply.Size(m)
}
func (m *EachFactoryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EachFactoryReply.DiscardUnknown(m)
}

var xxx_messageInfo_EachFactoryReply proto.InternalMessageInfo

func (m *EachFactoryReply) GetArr() []*FRep {
	if m != nil {
		return m.Arr
	}
	return nil
}

//單筆部門/課/組別
type FRep struct {
	Depno                string   `protobuf:"bytes,1,opt,name=depno,proto3" json:"depno,omitempty"`
	Depnodsc             string   `protobuf:"bytes,2,opt,name=depnodsc,proto3" json:"depnodsc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FRep) Reset()         { *m = FRep{} }
func (m *FRep) String() string { return proto.CompactTextString(m) }
func (*FRep) ProtoMessage()    {}
func (*FRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{70}
}

func (m *FRep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FRep.Unmarshal(m, b)
}
func (m *FRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FRep.Marshal(b, m, deterministic)
}
func (m *FRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FRep.Merge(m, src)
}
func (m *FRep) XXX_Size() int {
	return xxx_messageInfo_FRep.Size(m)
}
func (m *FRep) XXX_DiscardUnknown() {
	xxx_messageInfo_FRep.DiscardUnknown(m)
}

var xxx_messageInfo_FRep proto.InternalMessageInfo

func (m *FRep) GetDepno() string {
	if m != nil {
		return m.Depno
	}
	return ""
}

func (m *FRep) GetDepnodsc() string {
	if m != nil {
		return m.Depnodsc
	}
	return ""
}

//數量
type CountReply struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountReply) Reset()         { *m = CountReply{} }
func (m *CountReply) String() string { return proto.CompactTextString(m) }
func (*CountReply) ProtoMessage()    {}
func (*CountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{71}
}

func (m *CountReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountReply.Unmarshal(m, b)
}
func (m *CountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountReply.Marshal(b, m, deterministic)
}
func (m *CountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountReply.Merge(m, src)
}
func (m *CountReply) XXX_Size() int {
	return xxx_messageInfo_CountReply.Size(m)
}
func (m *CountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CountReply.DiscardUnknown(m)
}

var xxx_messageInfo_CountReply proto.InternalMessageInfo

func (m *CountReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

//異動資料數量
type AffectedReply struct {
	RowsAffected         int64    `protobuf:"varint,1,opt,name=rows_affected,json=rowsAffected,proto3" json:"rows_affected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AffectedReply) Reset()         { *m = AffectedReply{} }
func (m *AffectedReply) String() string { return proto.CompactTextString(m) }
func (*AffectedReply) ProtoMessage()    {}
func (*AffectedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{72}
}

func (m *AffectedReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AffectedReply.Unmarshal(m, b)
}
func (m *AffectedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AffectedReply.Marshal(b, m, deterministic)
}
func (m *AffectedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffectedReply.Merge(m, src)
}
func (m *AffectedReply) XXX_Size() int {
	return xxx_messageInfo_AffectedReply.Size(m)
}
func (m *AffectedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AffectedReply.DiscardUnknown(m)
}

var xxx_messageInfo_AffectedReply proto.InternalMessageInfo

func (m *AffectedReply) GetRowsAffected() int64 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

func init() {
	proto.RegisterEnum("proto.dm.per.EmployeeMaskRequest_Flag", EmployeeMaskRequest_Flag_name, EmployeeMaskRequest_Flag_value)
	proto.RegisterEnum("proto.dm.per.Employee_Flag", Employee_Flag_name, Employee_Flag_value)
	proto.RegisterEnum("proto.dm.per.QualifiedLectorRequest_ReplyFlag", QualifiedLectorRequest_ReplyFlag_name, QualifiedLectorRequest_ReplyFlag_value)
	proto.RegisterType((*File)(nil), "proto.dm.per.File")
	proto.RegisterType((*EmployeeMaskRequest)(nil), "proto.dm.per.EmployeeMaskRequest")
	proto.RegisterType((*Employee)(nil), "proto.dm.per.Employee")
	proto.RegisterType((*Employees)(nil), "proto.dm.per.Employees")
	proto.RegisterType((*EmployeeOtherCode)(nil), "proto.dm.per.EmployeeOtherCode")
	proto.RegisterType((*SingleEmployee)(nil), "proto.dm.per.SingleEmployee")
	proto.RegisterType((*SingleJob)(nil), "proto.dm.per.SingleJob")
	proto.RegisterType((*MultiJob)(nil), "proto.dm.per.MultiJob")
	proto.RegisterType((*QualifiedLectorRequest)(nil), "proto.dm.per.QualifiedLectorRequest")
	proto.RegisterType((*SingleQualifiedLector)(nil), "proto.dm.per.SingleQualifiedLector")
	proto.RegisterType((*MultiQualifiedLector)(nil), "proto.dm.per.MultiQualifiedLector")
	proto.RegisterType((*TeachingUnitName)(nil), "proto.dm.per.TeachingUnitName")
	proto.RegisterType((*SingleTeachingUnit)(nil), "proto.dm.per.SingleTeachingUnit")
	proto.RegisterType((*MultiTeachingUnit)(nil), "proto.dm.per.MultiTeachingUnit")
	proto.RegisterType((*MediumSortCouseName)(nil), "proto.dm.per.MediumSortCouseName")
	proto.RegisterType((*SingleMediumSortCouse)(nil), "proto.dm.per.SingleMediumSortCouse")
	proto.RegisterType((*MultiMediumSortCouse)(nil), "proto.dm.per.MultiMediumSortCouse")
	proto.RegisterType((*SingleCouse)(nil), "proto.dm.per.SingleCouse")
	proto.RegisterType((*MultiCouse)(nil), "proto.dm.per.MultiCouse")
	proto.RegisterType((*SingleStudy)(nil), "proto.dm.per.SingleStudy")
	proto.RegisterType((*MultiStudy)(nil), "proto.dm.per.MultiStudy")
	proto.RegisterType((*StudyInfoRequest)(nil), "proto.dm.per.StudyInfoRequest")
	proto.RegisterType((*SingleRequiredCouse)(nil), "proto.dm.per.SingleRequiredCouse")
	proto.RegisterType((*MultiRequiredCouse)(nil), "proto.dm.per.MultiRequiredCouse")
	proto.RegisterType((*SingleSign)(nil), "proto.dm.per.SingleSign")
	proto.RegisterType((*MultiSign)(nil), "proto.dm.per.MultiSign")
	proto.RegisterType((*SingleSignLevel)(nil), "proto.dm.per.SingleSignLevel")
	proto.RegisterType((*MultiSignLevel)(nil), "proto.dm.per.MultiSignLevel")
	proto.RegisterType((*SinglePlanSerial)(nil), "proto.dm.per.SinglePlanSerial")
	proto.RegisterType((*MultiPlanSerial)(nil), "proto.dm.per.MultiPlanSerial")
	proto.RegisterType((*SingleJobDuty)(nil), "proto.dm.per.SingleJobDuty")
	proto.RegisterType((*MultiJobDuty)(nil), "proto.dm.per.MultiJobDuty")
	proto.RegisterType((*SingleTrainingPlan)(nil), "proto.dm.per.SingleTrainingPlan")
	proto.RegisterType((*MultiTrainingPlan)(nil), "proto.dm.per.MultiTrainingPlan")
	proto.RegisterType((*SingleSpecialOperator)(nil), "proto.dm.per.SingleSpecialOperator")
	proto.RegisterType((*MultiSpecialOperator)(nil), "proto.dm.per.MultiSpecialOperator")
	proto.RegisterType((*SingleJobDutyRequiredCouse)(nil), "proto.dm.per.SingleJobDutyRequiredCouse")
	proto.RegisterType((*MultiJobDutyRequiredCouse)(nil), "proto.dm.per.MultiJobDutyRequiredCouse")
	proto.RegisterType((*SingleLearn)(nil), "proto.dm.per.SingleLearn")
	proto.RegisterType((*MultiLearn)(nil), "proto.dm.per.MultiLearn")
	proto.RegisterType((*SingleLearnCouse)(nil), "proto.dm.per.SingleLearnCouse")
	proto.RegisterType((*MultiLearnCouse)(nil), "proto.dm.per.MultiLearnCouse")
	proto.RegisterType((*SingleTrainingMaterials)(nil), "proto.dm.per.SingleTrainingMaterials")
	proto.RegisterType((*MultiTrainingMaterials)(nil), "proto.dm.per.MultiTrainingMaterials")
	proto.RegisterType((*SingleJobDutyPost)(nil), "proto.dm.per.SingleJobDutyPost")
	proto.RegisterType((*MultiJobDutyPost)(nil), "proto.dm.per.MultiJobDutyPost")
	proto.RegisterType((*SingleTrainingFees)(nil), "proto.dm.per.SingleTrainingFees")
	proto.RegisterType((*MultiTrainingFees)(nil), "proto.dm.per.MultiTrainingFees")
	proto.RegisterType((*SingleJobRequiredCouse)(nil), "proto.dm.per.SingleJobRequiredCouse")
	proto.RegisterType((*MultiJobRequiredCouse)(nil), "proto.dm.per.MultiJobRequiredCouse")
	proto.RegisterType((*SingleJobTitle)(nil), "proto.dm.per.SingleJobTitle")
	proto.RegisterType((*MultiJobTitle)(nil), "proto.dm.per.MultiJobTitle")
	proto.RegisterType((*SingleCredentialsManagement)(nil), "proto.dm.per.SingleCredentialsManagement")
	proto.RegisterType((*MultiCredentialsManagement)(nil), "proto.dm.per.MultiCredentialsManagement")
	proto.RegisterType((*SingleWorkQualification)(nil), "proto.dm.per.SingleWorkQualification")
	proto.RegisterType((*MultiWorkQualification)(nil), "proto.dm.per.MultiWorkQualification")
	proto.RegisterType((*SernoReply)(nil), "proto.dm.per.SernoReply")
	proto.RegisterType((*TrainingRecordRequest)(nil), "proto.dm.per.TrainingRecordRequest")
	proto.RegisterType((*TrainingRecord)(nil), "proto.dm.per.TrainingRecord")
	proto.RegisterType((*EmployeeForTrainingRecord)(nil), "proto.dm.per.EmployeeForTrainingRecord")
	proto.RegisterType((*TrainingRecordContent)(nil), "proto.dm.per.TrainingRecordContent")
	proto.RegisterType((*SingleTrainingReport)(nil), "proto.dm.per.SingleTrainingReport")
	proto.RegisterType((*MultiTrainingReport)(nil), "proto.dm.per.MultiTrainingReport")
	proto.RegisterType((*SingleTrainingScoreReport)(nil), "proto.dm.per.SingleTrainingScoreReport")
	proto.RegisterType((*MultiTrainingScoreReport)(nil), "proto.dm.per.MultiTrainingScoreReport")
	proto.RegisterType((*SingleSeccod)(nil), "proto.dm.per.SingleSeccod")
	proto.RegisterType((*DepartmentRequest)(nil), "proto.dm.per.DepartmentRequest")
	proto.RegisterType((*CodscReply)(nil), "proto.dm.per.CodscReply")
	proto.RegisterType((*EachFactoryRequest)(nil), "proto.dm.per.EachFactoryRequest")
	proto.RegisterType((*EachFactoryReply)(nil), "proto.dm.per.EachFactoryReply")
	proto.RegisterType((*FRep)(nil), "proto.dm.per.FRep")
	proto.RegisterType((*CountReply)(nil), "proto.dm.per.CountReply")
	proto.RegisterType((*AffectedReply)(nil), "proto.dm.per.AffectedReply")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 8014 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x7c, 0x5b, 0x73, 0x1c, 0xc7,
	0x75, 0xf0, 0xb7, 0xb8, 0xa3, 0x71, 0x5f, 0x90, 0xc0, 0x72, 0x79, 0x1f, 0x52, 0x12, 0x05, 0x4b,
	0x5c, 0x2f, 0x48, 0x5d, 0x2c, 0x5b, 0xd6, 0x07, 0x91, 0x20, 0x3f, 0xdb, 0xbc, 0x48, 0x4b, 0xd1,
	0xfa, 0xec, 0xaf, 0x6c, 0xd4, 0x60, 0xa7, 0x01, 0x2c, 0xb9, 0x3b, 0xb3, 0x9a, 0x99, 0xa5, 0x08,
	0xd1, 0x90, 0x6f, 0xfa, 0x64, 0x7f, 0x76, 0x7d, 0x96, 0x2f, 0x89, 0x2b, 0x49, 0x25, 0x95, 0x4b,
	0x55, 0xf2, 0x9e, 0x3c, 0xf8, 0x25, 0x6f, 0x49, 0x25, 0x7f, 0x20, 0x2f, 0x79, 0x4b, 0x1e, 0x52,
	0x79, 0x4b, 0xe5, 0x07, 0xa4, 0x52, 0x95, 0xea, 0x73, 0xfa, 0xbe, 0x3d, 0xb3, 0xb3, 0x20, 0xe8,
	0x3c, 0x90, 0xd8, 0xd3, 0xd3, 0x7d, 0xce, 0x99, 0x73, 0xeb, 0xd3, 0xa7, 0x7b, 0x9a, 0xcc, 0x25,
	0x34, 0x7e, 0xd4, 0x6a, 0xd2, 0xcb, 0xdd, 0x38, 0x4a, 0xa3, 0xf2, 0x2c, 0xfc, 0xb9, 0x1c, 0x74,
	0x2e, 0x77, 0x69, 0x5c, 0x3d, 0x01, 0x50, 0x2d, 0xe8, 0xd4, 0xba, 0x34, 0x66, 0xff, 0xd2, 0x98,
	0x77, 0xac, 0x9e, 0x31, 0x1e, 0xb5, 0x5b, 0x49, 0xba, 0xd5, 0xa5, 0x71, 0xc7, 0x4f, 0xf8, 0xf3,
	0x53, 0xbb, 0x51, 0xb4, 0xdb, 0xa6, 0x35, 0xbf, 0xdb, 0xaa, 0xf9, 0x61, 0x18, 0xa5, 0x7e, 0xda,
	0x8a, 0x42, 0xf1, 0xf4, 0x24, 0x7f, 0x0a, 0xd0, 0x76, 0x6f, 0xa7, 0x46, 0x3b, 0xdd, 0x74, 0x1f,
	0x1f, 0x7a, 0x55, 0x32, 0x76, 0xa3, 0xd5, 0xa6, 0xe5, 0x32, 0x19, 0xeb, 0xfa, 0xe9, 0x5e, 0xa5,
	0x74, 0xae, 0x74, 0x69, 0xba, 0x01, 0xbf, 0xbd, 0x7f, 0x1f, 0x21, 0xcb, 0x9b, 0x9d, 0x6e, 0x3b,
	0xda, 0xa7, 0xf4, 0xb6, 0x9f, 0x3c, 0x6c, 0xd0, 0x0f, 0x7a, 0x34, 0x49, 0xcb, 0xa7, 0x09, 0xf9,
	0xa0, 0x47, 0xe3, 0xfd, 0xad, 0x8e, 0x9f, 0x3c, 0x84, 0x11, 0xe3, 0x8d, 0x69, 0x68, 0x61, 0xbd,
	0xca, 0xc7, 0xc8, 0x78, 0xd2, 0xdb, 0x0e, 0xa3, 0xca, 0x08, 0xe0, 0x42, 0xa0, 0x7c, 0x81, 0xcc,
	0x05, 0xb4, 0xeb, 0xc7, 0x69, 0x87, 0x86, 0xe9, 0x56, 0x18, 0x55, 0x46, 0xe1, 0xe9, 0xac, 0x6a,
	0xbc, 0x13, 0x95, 0xcf, 0x92, 0x19, 0xca, 0x09, 0xb2, 0x2e, 0x63, 0xd0, 0x85, 0x88, 0xa6, 0x3b,
	0x11, 0x63, 0x33, 0xf4, 0x3b, 0xb4, 0x32, 0x8e, 0x6c, 0xb2, 0xdf, 0xe5, 0x13, 0x64, 0xaa, 0x97,
	0xd0, 0x78, 0x2b, 0x8c, 0xd6, 0x2b, 0x13, 0xd0, 0x3e, 0xc9, 0xe0, 0x3b, 0xd1, 0x7a, 0xf9, 0x12,
	0x59, 0x4c, 0x52, 0x3f, 0x4e, 0xb7, 0xda, 0xd4, 0x7f, 0x44, 0xb7, 0x02, 0x3f, 0xa5, 0x95, 0x49,
	0xe8, 0x32, 0x0f, 0xed, 0xb7, 0x58, 0xf3, 0x75, 0x3f, 0xa5, 0xe5, 0x8b, 0x64, 0x9e, 0x86, 0x81,
	0xde, 0x6f, 0x0a, 0xf9, 0xa3, 0x61, 0x20, 0x7b, 0x79, 0xdf, 0x26, 0x63, 0x37, 0xda, 0xfe, 0x6e,
	0x79, 0x9a, 0x8c, 0xdf, 0xbb, 0xff, 0xf6, 0x9d, 0xbb, 0x8b, 0xff, 0x83, 0xfd, 0xbc, 0xbe, 0xf9,
	0xce, 0x9d, 0xbb, 0x8b, 0x25, 0xf6, 0x73, 0xf3, 0x36, 0xfb, 0x39, 0x52, 0x9e, 0x22, 0x63, 0x77,
	0x36, 0x6e, 0x6f, 0x2e, 0x8e, 0x96, 0x67, 0xc9, 0xd4, 0xfd, 0x7b, 0x9b, 0x8d, 0xad, 0x3b, 0x77,
	0xd7, 0x17, 0xc7, 0xca, 0xf3, 0x84, 0xdc, 0xda, 0xdc, 0xf8, 0xfa, 0xe6, 0xd6, 0xf5, 0x8d, 0xf7,
	0x36, 0x17, 0xc7, 0xcb, 0x73, 0x64, 0xfa, 0xce, 0xfd, 0xdb, 0x5b, 0x37, 0x6e, 0x6d, 0xdc, 0xbc,
	0xb7, 0x38, 0xe1, 0xfd, 0xed, 0x08, 0x99, 0x12, 0x12, 0x57, 0x72, 0x2c, 0xe5, 0xca, 0x71, 0x64,
	0xb0, 0x1c, 0x47, 0x33, 0xe5, 0x38, 0x96, 0x21, 0xc7, 0x71, 0x53, 0x8e, 0xc7, 0xc8, 0x38, 0xed,
	0xf8, 0xad, 0x36, 0x97, 0x2f, 0x02, 0xcc, 0x0e, 0xfa, 0xe4, 0x3a, 0xdd, 0x96, 0xc2, 0xfa, 0xb0,
	0x5f, 0x58, 0x4b, 0x64, 0xee, 0xfa, 0xe6, 0x3b, 0x1b, 0x8d, 0xf7, 0x6e, 0x6f, 0xde, 0x79, 0x6f,
	0x0b, 0x84, 0xb6, 0x40, 0x66, 0x36, 0x6f, 0xbf, 0x73, 0xeb, 0xee, 0x37, 0x36, 0x37, 0xb7, 0x72,
	0x45, 0x07, 0xd2, 0xdd, 0xf8, 0xca, 0xad, 0xc5, 0x71, 0x4b, 0x8a, 0x13, 0xa6, 0x14, 0x27, 0xbd,
	0x0d, 0x32, 0x2d, 0x84, 0x98, 0x94, 0xaf, 0x92, 0x69, 0xf1, 0xde, 0x49, 0xa5, 0x74, 0x6e, 0xf4,
	0xd2, 0xcc, 0xfa, 0xca, 0x65, 0xdd, 0xf1, 0x2e, 0x8b, 0xbe, 0x0d, 0xd5, 0xd1, 0xbb, 0x42, 0x96,
	0x44, 0xf3, 0xdd, 0x74, 0x8f, 0xc6, 0xd7, 0xa2, 0x80, 0x96, 0xcf, 0x10, 0x12, 0x31, 0xa0, 0x19,
	0x05, 0x1c, 0xd7, 0x74, 0x43, 0x6b, 0xf1, 0xfe, 0x6a, 0x96, 0xcc, 0xdf, 0x6b, 0x85, 0xbb, 0x6d,
	0x3a, 0x40, 0x87, 0x20, 0xce, 0xae, 0xf2, 0x10, 0x00, 0x58, 0x6b, 0x40, 0xbb, 0x52, 0x5d, 0x08,
	0x38, 0x35, 0xb5, 0x42, 0x26, 0x68, 0xb8, 0x1b, 0xfa, 0x1d, 0xae, 0x27, 0x0e, 0xb1, 0xf6, 0x5e,
	0x12, 0x2b, 0x3f, 0xe0, 0x10, 0x6b, 0x6f, 0x53, 0x3f, 0xa0, 0x31, 0x57, 0x12, 0x87, 0x94, 0x5a,
	0xa7, 0x74, 0xb5, 0x02, 0xf6, 0x34, 0xf0, 0xd3, 0xca, 0xb4, 0xc0, 0xce, 0xa0, 0x72, 0x85, 0x4c,
	0xe2, 0xaf, 0xf5, 0x0a, 0x41, 0xf3, 0xe0, 0x20, 0x1b, 0x11, 0xb4, 0x98, 0x0c, 0x2a, 0x33, 0x38,
	0x02, 0x21, 0xd6, 0x9e, 0xf8, 0xed, 0x74, 0xbf, 0x5b, 0x99, 0xc5, 0x76, 0x84, 0x58, 0xfb, 0x83,
	0x68, 0x3b, 0x6d, 0xa5, 0x95, 0x39, 0x6c, 0x47, 0x08, 0xfa, 0xa7, 0x31, 0xa3, 0x3c, 0xcf, 0xfb,
	0x03, 0xc4, 0xf8, 0xec, 0x46, 0x49, 0x1a, 0x56, 0x16, 0x90, 0x4f, 0x00, 0x58, 0x6b, 0xaf, 0xcb,
	0x3a, 0x2f, 0x62, 0x2b, 0x00, 0x8c, 0xcb, 0xa4, 0x97, 0x40, 0xfb, 0x12, 0x72, 0xc9, 0x41, 0x86,
	0x3d, 0x4e, 0xe0, 0xbd, 0xca, 0x88, 0x1d, 0x21, 0x94, 0xce, 0x23, 0xd6, 0xbe, 0x2c, 0xa4, 0xf3,
	0x48, 0xb5, 0x33, 0xee, 0x8f, 0xc9, 0x76, 0xce, 0x7d, 0x4c, 0x01, 0xcf, 0x71, 0x8e, 0x87, 0x0a,
	0x3c, 0xbd, 0x84, 0xb2, 0xf6, 0x15, 0x21, 0x7d, 0xca, 0xdb, 0xd3, 0x5e, 0xc8, 0xda, 0x57, 0xb1,
	0x1d, 0x21, 0xb0, 0x8d, 0x36, 0xa5, 0xdd, 0x4a, 0x85, 0xdb, 0x06, 0x03, 0xe0, 0xad, 0x12, 0x1a,
	0x44, 0x95, 0x13, 0xfc, 0xad, 0x18, 0xc0, 0xde, 0xea, 0xa3, 0x3d, 0x3f, 0xfc, 0x68, 0xaf, 0x57,
	0xa9, 0xe2, 0x5b, 0x71, 0x90, 0x3d, 0xf9, 0x30, 0x8a, 0x1f, 0xb6, 0xc2, 0xa0, 0x72, 0x12, 0x9f,
	0x70, 0x90, 0xd1, 0x65, 0x5a, 0xa8, 0x5f, 0xad, 0x9c, 0x42, 0xba, 0x08, 0x89, 0xf6, 0x2b, 0xaf,
	0x55, 0x4e, 0xab, 0xf6, 0x2b, 0xaf, 0xc9, 0xfe, 0xaf, 0x54, 0xce, 0x68, 0xfd, 0x5f, 0x11, 0xed,
	0xeb, 0xf5, 0xca, 0x59, 0xd5, 0xbe, 0x5e, 0x97, 0xed, 0xeb, 0x95, 0x73, 0x5a, 0xfb, 0xba, 0x6c,
	0xbf, 0x52, 0x39, 0xaf, 0xb5, 0x5f, 0x61, 0x9c, 0x46, 0xe9, 0x5e, 0x33, 0x0a, 0xea, 0x15, 0x0f,
	0x39, 0xe5, 0xa0, 0x7a, 0xb2, 0x5e, 0xb9, 0xa0, 0x3f, 0x59, 0x57, 0x4f, 0xae, 0x54, 0x2e, 0xea,
	0x4f, 0xae, 0x00, 0x15, 0x1a, 0xa7, 0x61, 0x54, 0x79, 0x8e, 0x53, 0x01, 0x88, 0xc9, 0xaf, 0xb9,
	0xbf, 0xdf, 0xe9, 0x54, 0x9e, 0x47, 0xf9, 0x01, 0xc0, 0x7a, 0x77, 0xfd, 0x24, 0x09, 0xa3, 0xca,
	0x0b, 0xd8, 0x1b, 0x21, 0xd6, 0x1e, 0xfa, 0x69, 0xb7, 0xdd, 0xac, 0x5c, 0xc2, 0x76, 0x84, 0x58,
	0xfb, 0x76, 0x3b, 0x60, 0xba, 0x7f, 0x11, 0xdb, 0x11, 0x02, 0x0b, 0xa5, 0x8f, 0x59, 0xfb, 0x1a,
	0xb7, 0x50, 0x80, 0x18, 0x9f, 0xdb, 0xad, 0x74, 0x8f, 0x29, 0xf9, 0x73, 0xc8, 0x27, 0x07, 0x19,
	0x3f, 0x29, 0x6d, 0x87, 0x51, 0xe5, 0x25, 0xe4, 0x07, 0x00, 0xe4, 0xbe, 0xdd, 0xee, 0xee, 0x55,
	0x5e, 0x16, 0xdc, 0x33, 0x08, 0x65, 0x17, 0xa6, 0x34, 0xae, 0x5c, 0x16, 0xb2, 0x63, 0x10, 0xd0,
	0x8d, 0x92, 0x94, 0xb6, 0x2b, 0x35, 0x4e, 0x17, 0x20, 0x78, 0xaf, 0xb8, 0xe3, 0x07, 0x71, 0xe5,
	0xf3, 0xfc, 0xbd, 0x00, 0x42, 0x3c, 0xd0, 0x5e, 0x17, 0x78, 0xa0, 0x9d, 0x79, 0x7c, 0xd0, 0x0b,
	0xa3, 0xca, 0x3a, 0xf7, 0x78, 0x06, 0x00, 0xf6, 0x66, 0xc4, 0x98, 0xbc, 0xc2, 0xb1, 0x03, 0x04,
	0xed, 0xbd, 0xed, 0x07, 0x61, 0x54, 0xb9, 0xca, 0xdb, 0x01, 0x62, 0x58, 0xb6, 0x41, 0xc6, 0xaf,
	0x20, 0x96, 0x6d, 0x21, 0xe3, 0x66, 0xd4, 0xa1, 0x8f, 0xbb, 0x95, 0x57, 0x25, 0x4d, 0xfa, 0x18,
	0x64, 0xd6, 0xf1, 0xe3, 0x96, 0xdf, 0xae, 0xbc, 0x86, 0xed, 0x08, 0x01, 0xf6, 0x6e, 0xc2, 0xa2,
	0xd8, 0xeb, 0x1c, 0x3b, 0x40, 0x0c, 0x7b, 0xec, 0x33, 0x55, 0x7d, 0x01, 0xb1, 0x03, 0xc0, 0x35,
	0xc5, 0x24, 0xff, 0x86, 0xd4, 0x14, 0xd7, 0xc8, 0x4e, 0x6b, 0xb7, 0x17, 0xd3, 0xca, 0x17, 0xb1,
	0x1d, 0x21, 0x94, 0x58, 0x2f, 0x6e, 0xd2, 0xca, 0x97, 0x84, 0xc4, 0x18, 0xc4, 0x34, 0xd5, 0x0a,
	0x31, 0xfa, 0xbe, 0x89, 0x9a, 0xe2, 0x20, 0x1b, 0xd1, 0x0a, 0x53, 0xc6, 0xcf, 0x97, 0x71, 0x04,
	0x42, 0xe5, 0x53, 0x64, 0xba, 0x15, 0xa6, 0xd1, 0xce, 0x4e, 0xab, 0x49, 0x2b, 0x6f, 0xe1, 0x2c,
	0x27, 0x1b, 0x58, 0x7c, 0x6e, 0x46, 0x9d, 0x4e, 0xe5, 0x7f, 0x62, 0x7c, 0x66, 0xbf, 0xd9, 0x1b,
	0xb4, 0xc0, 0xe1, 0x37, 0xf0, 0x0d, 0x5a, 0xc2, 0xdf, 0x21, 0x1e, 0x57, 0xde, 0x16, 0x9e, 0x1d,
	0x87, 0x91, 0xf7, 0x2e, 0x99, 0xc6, 0x39, 0xe3, 0xab, 0xd1, 0x76, 0xf6, 0x74, 0xf1, 0x20, 0xd2,
	0x12, 0x2a, 0x00, 0xd8, 0x8b, 0xb0, 0x1f, 0x6c, 0x6e, 0xc0, 0x09, 0x43, 0x80, 0xde, 0x9b, 0x64,
	0xea, 0x76, 0xaf, 0x9d, 0xb6, 0x18, 0xc6, 0x3a, 0x99, 0x0c, 0xfc, 0xd4, 0x4f, 0x68, 0xca, 0x27,
	0xbf, 0x55, 0x73, 0xf2, 0x93, 0xb4, 0x1b, 0xa2, 0x9f, 0xf7, 0x27, 0x23, 0x64, 0xe5, 0xdd, 0x9e,
	0xdf, 0x6e, 0xed, 0xb4, 0x68, 0x70, 0x8b, 0x36, 0xd3, 0x28, 0x16, 0x99, 0x5f, 0x99, 0x8c, 0x69,
	0x39, 0x1f, 0xfc, 0xce, 0x48, 0xf7, 0x98, 0x31, 0xf4, 0xe2, 0x58, 0xce, 0x66, 0x1c, 0x52, 0x53,
	0xdf, 0x98, 0x3e, 0xf5, 0x55, 0xc9, 0xd4, 0x07, 0x3d, 0xbf, 0x0d, 0x79, 0x04, 0x4e, 0x69, 0x12,
	0x06, 0x57, 0x8c, 0xa2, 0x87, 0x61, 0x24, 0x26, 0x35, 0x84, 0xb4, 0xc9, 0x6e, 0x52, 0x9f, 0xec,
	0xbc, 0x6d, 0x32, 0xdd, 0xa0, 0xdd, 0xf6, 0xbe, 0x9d, 0x7b, 0x10, 0x32, 0x71, 0xed, 0x7e, 0xa3,
	0x61, 0x67, 0x6a, 0xb3, 0x64, 0xea, 0xdd, 0xfb, 0x1b, 0xb7, 0x20, 0x93, 0x18, 0x65, 0x9d, 0xde,
	0xbe, 0x7b, 0xf7, 0x6b, 0x77, 0xee, 0x2e, 0x8e, 0xb1, 0xdf, 0xf7, 0xef, 0x35, 0x58, 0xf2, 0xd1,
	0x97, 0xa7, 0x7d, 0x56, 0x22, 0xc7, 0x51, 0x72, 0x96, 0xa0, 0x32, 0x34, 0xa8, 0xa4, 0x31, 0xe2,
	0x96, 0xc6, 0x68, 0x96, 0x34, 0xc6, 0x32, 0xa5, 0x31, 0xae, 0x4b, 0xc3, 0xbb, 0x4f, 0x8e, 0x81,
	0xce, 0x6d, 0x7e, 0xde, 0xb4, 0xf5, 0x7f, 0xc1, 0xa5, 0x7f, 0x5b, 0xdd, 0xd2, 0x16, 0x5e, 0x22,
	0x8b, 0xef, 0x51, 0xbf, 0xb9, 0xd7, 0x0a, 0x77, 0xef, 0x87, 0xad, 0xf4, 0x0e, 0xcb, 0x3e, 0x2a,
	0x64, 0x32, 0xa5, 0x3e, 0x18, 0x1e, 0xbe, 0xa4, 0x00, 0xbd, 0x7f, 0x2d, 0x91, 0x32, 0x22, 0xd4,
	0x07, 0x65, 0xc8, 0x04, 0xd1, 0xf4, 0xc2, 0x56, 0xca, 0x85, 0x22, 0x40, 0x9d, 0xc0, 0xa8, 0x41,
	0x40, 0x3a, 0xdb, 0x98, 0xe6, 0x6c, 0x10, 0x02, 0x69, 0xd2, 0x0a, 0x84, 0x44, 0x10, 0x62, 0x58,
	0xfc, 0x20, 0x88, 0x69, 0x92, 0x88, 0x55, 0x01, 0x07, 0x55, 0x48, 0x9e, 0xd4, 0x43, 0xf2, 0x31,
	0x32, 0xbe, 0xe3, 0x3f, 0x0e, 0x23, 0x91, 0x0c, 0x01, 0xa0, 0x52, 0xa4, 0x69, 0x2d, 0x45, 0xf2,
	0xee, 0x92, 0x25, 0x90, 0xb6, 0xf1, 0x9a, 0x6f, 0xd8, 0xa2, 0x3e, 0xe7, 0x12, 0xb5, 0x3e, 0x44,
	0xc9, 0xb9, 0x46, 0x96, 0x6f, 0xd3, 0xa0, 0xd5, 0xeb, 0xdc, 0x8b, 0xe2, 0xf4, 0x5a, 0xd4, 0x4b,
	0xa8, 0x10, 0x75, 0x87, 0x06, 0xba, 0xa8, 0x39, 0xe8, 0xfd, 0xe7, 0xa8, 0xb0, 0x40, 0x6b, 0x5c,
	0x76, 0x0c, 0xd9, 0x6e, 0xed, 0x2a, 0x2f, 0x05, 0x80, 0xb5, 0x32, 0x84, 0xd2, 0xfe, 0x00, 0xd0,
	0xa9, 0x8e, 0x19, 0x54, 0x41, 0xd6, 0x2c, 0xf7, 0xaa, 0x4b, 0x59, 0x03, 0x24, 0xdb, 0x65, 0xe2,
	0x89, 0x10, 0xc3, 0xc4, 0x26, 0xb0, 0x87, 0x74, 0x9f, 0xcb, 0x5a, 0x80, 0x3c, 0x7a, 0xa5, 0xad,
	0xb4, 0xce, 0xe5, 0x2d, 0x40, 0xf5, 0x64, 0x9d, 0xcb, 0x5c, 0x80, 0xea, 0xc9, 0x15, 0x91, 0x80,
	0x72, 0x50, 0x3d, 0xb9, 0xca, 0x33, 0x50, 0x01, 0xaa, 0x27, 0xaf, 0xf0, 0x1c, 0x54, 0x80, 0x3c,
	0x09, 0x0d, 0xa3, 0xba, 0x96, 0x84, 0x86, 0x51, 0x5d, 0xb6, 0xaf, 0x8b, 0x24, 0x14, 0x21, 0xd9,
	0x7e, 0x85, 0x67, 0xa1, 0x1c, 0x92, 0xed, 0x57, 0x79, 0x1e, 0xca, 0x21, 0xd9, 0xfe, 0x0a, 0xcf,
	0x43, 0x39, 0xc4, 0x38, 0x8a, 0xe9, 0x07, 0xbd, 0x56, 0x4c, 0x79, 0x1e, 0x2a, 0x40, 0x35, 0x6d,
	0x2c, 0x3b, 0xa7, 0x8d, 0x63, 0xfa, 0xb4, 0x21, 0xfc, 0xdd, 0xd6, 0x7e, 0x31, 0x7f, 0xb7, 0x46,
	0x29, 0x3b, 0xfc, 0xf3, 0x31, 0x32, 0x83, 0x5d, 0xf2, 0x8c, 0xa9, 0x4c, 0xc6, 0xf6, 0xa9, 0x1f,
	0x73, 0x5b, 0x82, 0xdf, 0x19, 0xab, 0x17, 0x36, 0x9e, 0xc6, 0x2a, 0xdc, 0x03, 0xc0, 0x44, 0xb0,
	0xe3, 0xb3, 0x40, 0xb3, 0x2f, 0x16, 0x9a, 0x1c, 0xd4, 0x02, 0xe5, 0x84, 0x11, 0x28, 0x99, 0x81,
	0xb5, 0xfd, 0x50, 0xfa, 0x2c, 0x87, 0x60, 0x4d, 0xf2, 0xb8, 0xdb, 0xf6, 0x5b, 0xa1, 0x30, 0x23,
	0x0e, 0xc2, 0x3a, 0xa0, 0x1b, 0x85, 0x49, 0x14, 0x0b, 0x33, 0xe2, 0x20, 0xe6, 0xf5, 0x4d, 0x96,
	0x39, 0x12, 0x91, 0xd7, 0x33, 0x48, 0x0f, 0x48, 0x33, 0x66, 0x40, 0xaa, 0x92, 0x29, 0xe8, 0xc3,
	0x3c, 0x02, 0xad, 0x48, 0xc2, 0x68, 0x60, 0xad, 0xb0, 0xdb, 0xa6, 0x60, 0x47, 0xe3, 0x0d, 0x01,
	0x02, 0xcf, 0x34, 0x62, 0x0f, 0xe6, 0xe1, 0x01, 0x87, 0xd8, 0x08, 0x36, 0x9a, 0x25, 0x4a, 0xcc,
	0x92, 0x46, 0x1b, 0x02, 0x84, 0x2c, 0x32, 0x8a, 0x1e, 0xb2, 0x27, 0x8b, 0xf8, 0x84, 0x83, 0x8c,
	0x03, 0x58, 0x68, 0xb2, 0x47, 0x4b, 0xf0, 0x48, 0xc2, 0xf0, 0xa6, 0xa9, 0x0f, 0xb3, 0x05, 0x37,
	0x28, 0x0e, 0x42, 0xa0, 0x6b, 0x75, 0x68, 0x5d, 0x18, 0x14, 0x00, 0xb8, 0x8e, 0x0b, 0xa0, 0xff,
	0x31, 0xb1, 0x8e, 0x0b, 0xf4, 0xfe, 0xeb, 0x7c, 0x61, 0x83, 0x00, 0xd3, 0xf6, 0x5e, 0xd4, 0x8b,
	0x61, 0x55, 0x33, 0xd2, 0x80, 0xdf, 0xde, 0x06, 0x21, 0x60, 0x7e, 0x68, 0x25, 0x57, 0x6c, 0xa3,
	0x3b, 0xe1, 0x32, 0x3a, 0xcb, 0xd4, 0xfe, 0x6e, 0x44, 0x98, 0xda, 0xbd, 0xb4, 0x17, 0xec, 0x3f,
	0xb5, 0xa9, 0x69, 0x46, 0x35, 0x66, 0x1a, 0x95, 0x34, 0xc2, 0x71, 0xdd, 0x08, 0xb3, 0x4c, 0x4d,
	0xce, 0xc9, 0x93, 0xfa, 0x9c, 0xcc, 0xb2, 0x8d, 0xb0, 0x95, 0xca, 0xe9, 0x81, 0x43, 0x4c, 0x31,
	0x09, 0x63, 0x9f, 0x29, 0x66, 0x1a, 0xd4, 0x2c, 0x61, 0x30, 0xa8, 0xd8, 0x7f, 0xc4, 0x1e, 0x11,
	0x34, 0x0d, 0x0e, 0x1a, 0xea, 0x9c, 0xc1, 0x51, 0x52, 0x9d, 0x55, 0x32, 0x45, 0x93, 0xb4, 0xd5,
	0x61, 0xfa, 0xe1, 0xc6, 0x26, 0x60, 0x26, 0x0d, 0x66, 0x5d, 0x3c, 0x62, 0xc1, 0x6f, 0xa9, 0x0a,
	0x94, 0x62, 0x31, 0x55, 0x40, 0x5f, 0xa5, 0x8a, 0x8f, 0xc9, 0x22, 0xb4, 0x7c, 0x25, 0xdc, 0x89,
	0x44, 0xaa, 0xf7, 0x6c, 0x3c, 0x5f, 0x0a, 0x77, 0x5c, 0x13, 0xae, 0xf7, 0x97, 0x25, 0xb2, 0x8c,
	0x8c, 0x35, 0x30, 0x14, 0x06, 0x03, 0xa6, 0xb2, 0xdd, 0xd8, 0x0f, 0xa8, 0x98, 0xca, 0x00, 0xc8,
	0x4b, 0x38, 0xd3, 0xd8, 0xdf, 0x8b, 0x81, 0x8f, 0x91, 0x06, 0x02, 0x90, 0x52, 0xf7, 0x82, 0x5d,
	0x91, 0x6d, 0x22, 0xa0, 0x02, 0xf0, 0x84, 0x33, 0x00, 0x4f, 0x9a, 0x79, 0x7b, 0x19, 0xc4, 0x6e,
	0x72, 0xfc, 0x45, 0x5b, 0xfc, 0xe7, 0x5d, 0xe2, 0x37, 0xc6, 0x28, 0x35, 0x7c, 0x32, 0x42, 0x08,
	0xd7, 0x4f, 0x6b, 0x37, 0xcc, 0x7e, 0x7b, 0xbf, 0x99, 0xee, 0xef, 0x8b, 0xb7, 0x07, 0x20, 0x23,
	0x91, 0x64, 0x6b, 0xe1, 0x76, 0xa2, 0x74, 0x00, 0x00, 0xac, 0x8c, 0x5a, 0xbb, 0xec, 0x35, 0xf9,
	0x24, 0x8e, 0x10, 0x56, 0x5f, 0x22, 0xf5, 0xfa, 0x1c, 0x82, 0xfa, 0x45, 0xec, 0x33, 0x53, 0x9d,
	0x04, 0x11, 0x72, 0x48, 0xac, 0xc0, 0x5b, 0x3b, 0xc2, 0x25, 0x10, 0x62, 0x36, 0x92, 0xb4, 0x76,
	0x43, 0x1e, 0x76, 0xe1, 0xb7, 0x92, 0x2c, 0x71, 0x4a, 0x76, 0x46, 0x97, 0xec, 0x5b, 0x64, 0x1a,
	0x0d, 0x9a, 0x0d, 0x5c, 0xb7, 0x05, 0x5a, 0x71, 0xda, 0x73, 0x6b, 0x37, 0x54, 0x72, 0xfc, 0xa7,
	0x12, 0x59, 0x50, 0xed, 0xb7, 0xe8, 0x23, 0xda, 0xce, 0xce, 0xcb, 0x79, 0x88, 0xe6, 0x79, 0xb9,
	0x0a, 0xd1, 0x7e, 0x27, 0xea, 0x85, 0x69, 0x1d, 0x04, 0x3a, 0xd2, 0x10, 0xa0, 0x7a, 0xb2, 0xce,
	0x0d, 0x4a, 0x80, 0xe5, 0x45, 0x32, 0xea, 0x77, 0x84, 0x4c, 0xd9, 0x4f, 0x46, 0xb3, 0xcd, 0x88,
	0x0b, 0x73, 0x02, 0x40, 0x2b, 0x72, 0x4d, 0xda, 0x45, 0x2e, 0x14, 0xd1, 0x94, 0x53, 0x44, 0xd3,
	0xba, 0x88, 0xbe, 0x42, 0xe6, 0xa5, 0x88, 0xf0, 0xfd, 0x5e, 0xb3, 0xe5, 0x74, 0x3a, 0x4b, 0x4e,
	0xd0, 0x5f, 0x09, 0xeb, 0x27, 0xa3, 0x64, 0x11, 0x1f, 0xbe, 0xd3, 0xf6, 0xc3, 0x7b, 0x14, 0x96,
	0xe6, 0xc5, 0x9d, 0x9f, 0x4d, 0x3e, 0xd4, 0x4f, 0xa2, 0xb0, 0x2e, 0x72, 0x75, 0x0e, 0xaa, 0x27,
	0xeb, 0x22, 0x1e, 0x73, 0x50, 0x3d, 0xb9, 0x22, 0xa6, 0x7f, 0x0e, 0xaa, 0x27, 0x57, 0x45, 0xce,
	0xce, 0x41, 0x15, 0x64, 0x26, 0xad, 0xe2, 0x68, 0xba, 0xdf, 0x15, 0xb5, 0x7a, 0xf8, 0xad, 0xcf,
	0x03, 0xd3, 0x7d, 0xc9, 0x05, 0xd7, 0x36, 0x41, 0x43, 0xe6, 0xda, 0x16, 0x13, 0xdc, 0x8c, 0x9a,
	0xe0, 0x60, 0x9d, 0xc5, 0x62, 0x42, 0x0a, 0x31, 0x78, 0xa4, 0xc1, 0x21, 0x2d, 0x11, 0x99, 0xcb,
	0x4a, 0x44, 0xe6, 0xcd, 0x44, 0x44, 0xea, 0x75, 0xc1, 0xa9, 0xd7, 0x45, 0x5d, 0xaf, 0x5f, 0x23,
	0x0b, 0xa0, 0x57, 0x4d, 0x15, 0xaf, 0xdb, 0x8a, 0x3d, 0xe3, 0x52, 0xac, 0x1a, 0xa0, 0x34, 0xfb,
	0xfd, 0x12, 0x99, 0x93, 0xcb, 0xfb, 0xeb, 0xbd, 0x74, 0xff, 0x68, 0xca, 0x0b, 0xea, 0x85, 0xc6,
	0x9c, 0x2f, 0x34, 0xae, 0xbf, 0xd0, 0x26, 0x99, 0x15, 0xa5, 0x08, 0xe0, 0xe0, 0x15, 0xfb, 0x6d,
	0x4e, 0x66, 0x94, 0x23, 0x58, 0x6f, 0xf5, 0x2a, 0xff, 0x38, 0x22, 0x17, 0x96, 0xb1, 0xdf, 0x0a,
	0x5b, 0xe1, 0x2e, 0x7b, 0xe1, 0x8c, 0xf7, 0x99, 0x27, 0x23, 0xfc, 0x65, 0xc6, 0x1b, 0x23, 0x79,
	0x75, 0x75, 0x28, 0x61, 0xf1, 0xa5, 0x24, 0x54, 0xb0, 0xca, 0x64, 0x6c, 0xbb, 0x23, 0x5f, 0x01,
	0x7e, 0x4b, 0x13, 0x9b, 0x70, 0x9b, 0xd8, 0xa4, 0x69, 0x62, 0x5a, 0x0e, 0x39, 0x65, 0xe6, 0x90,
	0x3c, 0xb7, 0x4a, 0x84, 0x23, 0x03, 0x20, 0x4d, 0x8f, 0x68, 0xa6, 0x87, 0xa6, 0x44, 0xc3, 0x84,
	0x72, 0x8b, 0x14, 0x20, 0xeb, 0x0d, 0x85, 0x5e, 0x4c, 0x0b, 0xe0, 0xb7, 0x5c, 0x12, 0xcf, 0xb9,
	0xea, 0x4f, 0xf3, 0x4e, 0x0d, 0x2d, 0xe8, 0x1a, 0x92, 0x4b, 0x59, 0x5d, 0xb0, 0x05, 0x97, 0xb2,
	0xda, 0x10, 0xa5, 0xab, 0x3f, 0x1a, 0x13, 0x2b, 0xd3, 0x7b, 0x5d, 0xda, 0x6c, 0xf9, 0xed, 0xbb,
	0x5d, 0x1a, 0xfb, 0xd9, 0xb5, 0x11, 0x26, 0x60, 0x55, 0x19, 0x81, 0xdf, 0x19, 0xd3, 0x99, 0x6b,
	0x2b, 0x44, 0x2a, 0x77, 0x5c, 0x57, 0xae, 0x2a, 0xd3, 0x4e, 0x18, 0x65, 0x5a, 0x59, 0xfe, 0x9c,
	0xb4, 0xca, 0x9f, 0x7c, 0xc3, 0x63, 0xca, 0xd8, 0xf0, 0x50, 0x25, 0xe6, 0x69, 0xa3, 0xc4, 0x8c,
	0xa5, 0x48, 0x3f, 0x88, 0xc5, 0x02, 0x02, 0x21, 0x69, 0x2a, 0x33, 0x9a, 0xa9, 0xac, 0x90, 0x09,
	0x5e, 0x39, 0xe4, 0x5b, 0x20, 0xbc, 0x6c, 0xc8, 0x70, 0xf4, 0x3a, 0xdb, 0x34, 0x16, 0x71, 0x04,
	0x21, 0x98, 0xb2, 0xa3, 0x4e, 0x27, 0x10, 0xaa, 0x03, 0x00, 0xb0, 0x74, 0xa9, 0xd2, 0x1d, 0x87,
	0xb4, 0x2d, 0x87, 0x45, 0x63, 0xcb, 0x81, 0x49, 0xc5, 0x4f, 0x69, 0x9d, 0x2f, 0x3d, 0x11, 0x10,
	0xad, 0xeb, 0x7c, 0x99, 0x80, 0x80, 0x36, 0x1f, 0x2d, 0x1b, 0xf3, 0x11, 0xe8, 0x25, 0x11, 0x6b,
	0x04, 0xf8, 0xcd, 0xfa, 0xee, 0x1a, 0x5b, 0x1f, 0x08, 0x29, 0x83, 0x5b, 0x71, 0x1a, 0xdc, 0xaa,
	0x6b, 0xe5, 0x6a, 0x5b, 0x47, 0xb1, 0x95, 0xab, 0x35, 0x4a, 0xab, 0x5a, 0x96, 0x48, 0xd5, 0x8c,
	0x1e, 0x05, 0x52, 0x49, 0xd8, 0xca, 0x49, 0x5a, 0xfb, 0xa1, 0x98, 0xff, 0x11, 0x82, 0x12, 0x34,
	0x4d, 0x94, 0xfd, 0x01, 0x20, 0xc3, 0xc3, 0x98, 0x16, 0x1e, 0xe4, 0x9b, 0x8f, 0x3b, 0xdf, 0x7c,
	0x42, 0x7f, 0xf3, 0x2d, 0x72, 0x42, 0x0f, 0x86, 0x26, 0x83, 0x6f, 0xdb, 0xaf, 0x7f, 0x29, 0x2f,
	0x32, 0xba, 0x13, 0xc8, 0x5f, 0xc9, 0x25, 0xd5, 0x2d, 0xea, 0xc7, 0xe1, 0x6f, 0x7d, 0xf5, 0xae,
	0xad, 0x44, 0x27, 0xcc, 0x95, 0xa8, 0xb6, 0xe6, 0x9c, 0x34, 0xd7, 0x9c, 0x2a, 0x6f, 0x9f, 0x72,
	0x2f, 0xc3, 0xa6, 0xdd, 0xcb, 0x30, 0x62, 0x2f, 0xc3, 0xe4, 0xa2, 0x69, 0xc6, 0x5c, 0x34, 0xc9,
	0x05, 0x12, 0xca, 0xa4, 0xd8, 0x02, 0x09, 0xfa, 0x2a, 0xc1, 0xfe, 0x7a, 0x4c, 0x24, 0x49, 0xf0,
	0xe0, 0xbf, 0xad, 0x36, 0xd2, 0x4a, 0x69, 0x47, 0x2d, 0x58, 0x11, 0xd2, 0x24, 0x38, 0x69, 0x48,
	0xf0, 0x30, 0xb5, 0x11, 0x11, 0xc2, 0x88, 0x19, 0xc2, 0x78, 0xbd, 0x64, 0x26, 0xab, 0x5e, 0x32,
	0x9b, 0x5d, 0x2f, 0x99, 0xeb, 0xaf, 0x97, 0x08, 0x1b, 0x99, 0xcf, 0xa8, 0x56, 0x2c, 0x64, 0x54,
	0x2b, 0x16, 0x33, 0xaa, 0x15, 0x4b, 0x7a, 0xb5, 0x82, 0xb5, 0xee, 0x77, 0x69, 0x5d, 0x04, 0x39,
	0x00, 0xe4, 0x3c, 0xbb, 0x6c, 0xa6, 0x78, 0xbb, 0x34, 0xdd, 0xef, 0x76, 0xc4, 0xfe, 0x2e, 0x42,
	0xca, 0xa5, 0x8f, 0x3b, 0x5d, 0x7a, 0xc5, 0x95, 0xb0, 0x69, 0x66, 0x51, 0x2c, 0x61, 0x53, 0x03,
	0x94, 0x95, 0xfd, 0xe9, 0x08, 0x59, 0x35, 0x67, 0xd6, 0xdb, 0x7e, 0x0a, 0x49, 0x5d, 0x92, 0x1d,
	0xbf, 0xb8, 0x49, 0x8c, 0x18, 0x26, 0x21, 0x92, 0x9b, 0x51, 0x33, 0xb9, 0x01, 0xd5, 0x8e, 0x69,
	0xaa, 0x75, 0xcf, 0x9e, 0xd2, 0xf5, 0x26, 0xac, 0xd9, 0x17, 0xa2, 0xdf, 0xa4, 0x16, 0xfd, 0xb2,
	0x4d, 0x4c, 0xcd, 0x6f, 0xd3, 0xc6, 0xfc, 0x26, 0xd2, 0x15, 0xe2, 0x4a, 0x57, 0x66, 0x9c, 0x02,
	0x9f, 0xd5, 0x05, 0xfe, 0x0d, 0xb2, 0x62, 0xa4, 0x2b, 0x4a, 0x42, 0x6f, 0xd9, 0x72, 0x7f, 0x2e,
	0x2f, 0x67, 0x91, 0xe3, 0x94, 0xf8, 0x3f, 0x1b, 0x21, 0x4b, 0x46, 0x94, 0x7d, 0x27, 0xca, 0xac,
	0x83, 0x0c, 0x37, 0x71, 0xac, 0x90, 0x89, 0x3d, 0xea, 0x37, 0xdb, 0x42, 0xf8, 0x1c, 0xd2, 0xd4,
	0x37, 0x6e, 0xa8, 0x4f, 0xdb, 0xd3, 0x9f, 0xe8, 0xdb, 0xd3, 0xe7, 0x27, 0x27, 0x26, 0x8d, 0x93,
	0x13, 0x42, 0xac, 0x53, 0xa6, 0x58, 0xd9, 0xdf, 0xba, 0x88, 0xa0, 0x00, 0x0c, 0xb5, 0x12, 0xbf,
	0x4d, 0x16, 0xf5, 0x09, 0x0b, 0xe4, 0xf1, 0x05, 0x5b, 0xcc, 0x67, 0x73, 0xe6, 0x29, 0x36, 0x42,
	0x09, 0xf8, 0xef, 0x47, 0xed, 0x2c, 0xfe, 0x06, 0xa5, 0x39, 0xa6, 0xcd, 0x62, 0xa7, 0x32, 0x6d,
	0x84, 0xe0, 0xac, 0x09, 0xed, 0xa6, 0xaa, 0xce, 0x83, 0xd0, 0x30, 0xf5, 0x26, 0x99, 0x48, 0x4e,
	0xb8, 0x12, 0xc9, 0x49, 0x2b, 0x91, 0x4c, 0x69, 0x93, 0x3e, 0xee, 0x82, 0x64, 0x47, 0x1a, 0x1c,
	0xd2, 0x6a, 0x22, 0xd3, 0x76, 0x4d, 0x24, 0x4a, 0xf7, 0x44, 0xc5, 0x6f, 0xa4, 0xc1, 0x21, 0xc4,
	0xe3, 0x8b, 0x72, 0x1f, 0xe0, 0xf1, 0xad, 0x8a, 0x2f, 0xae, 0x33, 0x65, 0xc5, 0x77, 0x85, 0x4c,
	0xf8, 0xed, 0x36, 0x7b, 0x30, 0x87, 0x23, 0x10, 0x82, 0x64, 0x75, 0x67, 0x27, 0x49, 0x63, 0xb1,
	0x3d, 0x81, 0x10, 0x6f, 0xa7, 0x61, 0x20, 0x52, 0x44, 0x84, 0xa4, 0xdb, 0x2f, 0x6a, 0x6e, 0x2f,
	0xac, 0x65, 0xc9, 0xe5, 0x84, 0x65, 0xa7, 0x5d, 0x2c, 0xe7, 0xad, 0x19, 0x40, 0x8d, 0xc3, 0xad,
	0x19, 0xd8, 0x10, 0x65, 0x19, 0x29, 0x59, 0x51, 0x1b, 0xd1, 0x05, 0xf2, 0x36, 0x36, 0xf5, 0xb4,
	0xd2, 0x36, 0x95, 0xd6, 0x21, 0x40, 0xb5, 0xcf, 0x35, 0xea, 0xdc, 0xe7, 0x1a, 0xd3, 0xf6, 0xb9,
	0xbc, 0xf7, 0xc9, 0x71, 0x61, 0xde, 0x26, 0xd1, 0x2f, 0xdb, 0xaf, 0x72, 0x31, 0x6b, 0xd3, 0xdc,
	0x9d, 0x87, 0x7d, 0x24, 0xce, 0x81, 0x7d, 0x35, 0xda, 0x7e, 0x8f, 0x31, 0x36, 0xf4, 0x6b, 0x9c,
	0x22, 0xd3, 0xf8, 0x53, 0xad, 0xbf, 0x55, 0x03, 0x9b, 0x5f, 0x01, 0xa0, 0x8f, 0x7d, 0x78, 0xa3,
	0xf1, 0x86, 0x84, 0xbd, 0x9b, 0x64, 0x4e, 0xbc, 0x14, 0x92, 0x7e, 0xd5, 0x7e, 0x99, 0x53, 0x19,
	0x2f, 0x03, 0xdd, 0xb5, 0x70, 0x38, 0x4a, 0x4e, 0xf2, 0xc2, 0x7d, 0x4c, 0x03, 0x1a, 0xa6, 0x2c,
	0x5a, 0xde, 0xf6, 0x43, 0x7f, 0x97, 0x76, 0x68, 0x98, 0x0e, 0x75, 0xb4, 0x4d, 0x38, 0xdc, 0xa8,
	0xcb, 0xe1, 0xc6, 0xac, 0x2a, 0x3e, 0x1e, 0x66, 0x13, 0xa5, 0x59, 0x01, 0xb2, 0x97, 0xee, 0xf8,
	0xad, 0x36, 0x1c, 0x33, 0x43, 0xc7, 0x95, 0xb0, 0x7e, 0xfc, 0x66, 0xd2, 0x3c, 0x7e, 0x53, 0x25,
	0x53, 0xdd, 0x28, 0x4e, 0x61, 0x14, 0x06, 0x47, 0x09, 0xb3, 0x51, 0xec, 0x77, 0xd8, 0xeb, 0x88,
	0x34, 0x88, 0x83, 0xc0, 0xc5, 0xce, 0x4e, 0xe0, 0xa7, 0x75, 0x79, 0xd4, 0x0d, 0x41, 0xf5, 0x64,
	0x5d, 0x6c, 0x12, 0x71, 0x90, 0x3d, 0x09, 0xe9, 0x63, 0x58, 0x1c, 0xf1, 0x74, 0x88, 0x83, 0xb8,
	0xe3, 0xd7, 0x04, 0x16, 0xe6, 0xc4, 0x8e, 0x5f, 0x53, 0x1c, 0x90, 0x03, 0x3f, 0x13, 0xb9, 0x10,
	0x87, 0x32, 0x96, 0xea, 0x3e, 0xa9, 0xe2, 0xa6, 0x8b, 0x53, 0x1f, 0xd7, 0x6c, 0x3d, 0xbf, 0xe8,
	0xdc, 0x84, 0x71, 0x8d, 0x35, 0x36, 0x65, 0x78, 0x0a, 0xf2, 0x7e, 0x14, 0x3f, 0xe4, 0xc7, 0x02,
	0x9a, 0x70, 0x9c, 0xf8, 0x19, 0x29, 0x5c, 0x2d, 0xd5, 0xc7, 0x8d, 0xa5, 0x3a, 0xb3, 0x71, 0x1e,
	0x2b, 0x84, 0xba, 0x05, 0x0c, 0x9c, 0x3c, 0x6c, 0xb5, 0xdb, 0x22, 0x56, 0x03, 0x80, 0xaa, 0x4e,
	0x5a, 0x8c, 0x57, 0xa5, 0x6a, 0x84, 0x19, 0x3f, 0x6c, 0x6e, 0xe5, 0x5b, 0x34, 0xf0, 0x9b, 0xcf,
	0x24, 0x7e, 0x2c, 0xa6, 0x42, 0x0e, 0x41, 0x3e, 0xbd, 0x17, 0xa8, 0x95, 0x04, 0x87, 0x54, 0x84,
	0x9c, 0x75, 0x46, 0xc8, 0x39, 0x57, 0x9a, 0xd2, 0x2f, 0xc5, 0x62, 0x69, 0x4a, 0xdf, 0x38, 0xa5,
	0x22, 0x8f, 0x90, 0x7b, 0x6c, 0x6e, 0x83, 0x43, 0x2e, 0x6a, 0xda, 0x2b, 0x69, 0xd3, 0x9e, 0xf7,
	0x6f, 0x25, 0x72, 0x5c, 0x44, 0xda, 0x06, 0x6d, 0x46, 0x71, 0x90, 0xbf, 0xad, 0x23, 0x55, 0x33,
	0xe2, 0xcc, 0x03, 0x47, 0xad, 0x25, 0x18, 0xaf, 0x96, 0x8c, 0xd9, 0xd5, 0x12, 0x7e, 0x8c, 0x72,
	0xdc, 0x38, 0x46, 0xa9, 0x2d, 0x68, 0x26, 0xcc, 0x05, 0xcd, 0x73, 0x64, 0x5e, 0xa8, 0x74, 0x0b,
	0x8e, 0x63, 0x73, 0x7d, 0xce, 0x89, 0xd6, 0x7b, 0xac, 0xb1, 0x7c, 0x9e, 0xcc, 0xca, 0x6e, 0x6c,
	0x7e, 0x43, 0xdd, 0xce, 0x88, 0xb6, 0xcd, 0x30, 0xf0, 0x7e, 0x59, 0x22, 0xf3, 0xe6, 0xfb, 0x96,
	0xdf, 0x82, 0x9c, 0x2b, 0xa0, 0x31, 0xbc, 0xe9, 0xcc, 0xfa, 0x0b, 0xee, 0x43, 0xbf, 0x37, 0xa2,
	0xd8, 0x12, 0x14, 0x1f, 0x56, 0x7e, 0x8b, 0x4c, 0xc1, 0xe1, 0xbb, 0x30, 0x4d, 0x2a, 0x23, 0xae,
	0x82, 0x84, 0x39, 0xee, 0x1a, 0xf6, 0x6d, 0xc8, 0x41, 0xde, 0x7f, 0x94, 0xc8, 0x89, 0x4c, 0x32,
	0x4a, 0xb8, 0x25, 0x97, 0xdf, 0x8c, 0x98, 0xa7, 0x7d, 0xb9, 0x87, 0x8c, 0xda, 0x1e, 0xb2, 0xdd,
	0x8a, 0x59, 0x98, 0x13, 0x3b, 0x9e, 0x12, 0xd6, 0x94, 0x34, 0x6e, 0x28, 0xe9, 0x34, 0x21, 0x34,
	0xe8, 0x6d, 0x05, 0x74, 0x37, 0xa6, 0x22, 0x8c, 0x4e, 0xd3, 0xa0, 0x77, 0x1d, 0x1a, 0xca, 0x27,
	0xc8, 0x54, 0x40, 0xbb, 0x5b, 0xc0, 0x02, 0x0f, 0xa4, 0x01, 0xed, 0xde, 0x91, 0xfb, 0xdc, 0x58,
	0x0f, 0x9e, 0xea, 0xab, 0x07, 0xe3, 0xe9, 0xdc, 0x69, 0xed, 0x74, 0xae, 0xf7, 0x9b, 0x11, 0xdb,
	0x04, 0xb9, 0x84, 0xdc, 0x26, 0xab, 0x9b, 0xc9, 0x88, 0x69, 0x26, 0x67, 0xc9, 0x4c, 0x33, 0xea,
	0xc5, 0x09, 0xdd, 0xd2, 0x42, 0x0a, 0xc1, 0x26, 0x60, 0xed, 0x65, 0x52, 0xe6, 0x1d, 0x02, 0x9a,
	0x34, 0xe3, 0x56, 0x17, 0x42, 0x00, 0x8a, 0x64, 0x09, 0x9f, 0x5c, 0x57, 0x0f, 0xca, 0x17, 0x88,
	0x34, 0xb0, 0x2d, 0x58, 0xbd, 0xa2, 0x88, 0xa4, 0x91, 0xdd, 0xe7, 0x4b, 0x58, 0x30, 0x49, 0xb5,
	0x1d, 0x26, 0x61, 0x14, 0x6e, 0xa0, 0xed, 0xe0, 0x20, 0xc4, 0x5e, 0x8c, 0x2d, 0x2c, 0x13, 0x9e,
	0x2b, 0x22, 0x80, 0xc9, 0x56, 0x82, 0x87, 0xa9, 0xc7, 0x1a, 0xf0, 0xdb, 0x28, 0x57, 0x10, 0xab,
	0x5c, 0xf1, 0xcf, 0xa3, 0xe4, 0x98, 0x99, 0x2b, 0x35, 0x28, 0x9b, 0x97, 0x8e, 0xc0, 0x62, 0xb4,
	0x69, 0x72, 0xcc, 0x9c, 0x26, 0xb3, 0xec, 0x45, 0x16, 0x4c, 0x27, 0xac, 0x82, 0xa9, 0x73, 0x15,
	0x22, 0x2d, 0x61, 0xca, 0x3a, 0xa7, 0x8d, 0xfa, 0x9e, 0xce, 0xd0, 0x37, 0xc9, 0x3a, 0x03, 0x32,
	0x63, 0x57, 0x84, 0x30, 0x48, 0xcd, 0xda, 0x09, 0x03, 0x5f, 0x82, 0xce, 0xf5, 0x57, 0x39, 0xdc,
	0x95, 0x06, 0xad, 0xa6, 0xb0, 0x60, 0xd6, 0x14, 0x44, 0x9d, 0x60, 0x51, 0xab, 0x13, 0x88, 0x99,
	0x48, 0x9c, 0xbd, 0x18, 0x69, 0x48, 0xd8, 0x50, 0x64, 0xd9, 0xda, 0xac, 0xd7, 0xea, 0x23, 0xcb,
	0x46, 0x7d, 0xc4, 0xbb, 0x47, 0x96, 0x8d, 0xfc, 0x99, 0x2b, 0xf8, 0x4b, 0xf6, 0xd4, 0xe0, 0xe5,
	0x65, 0xd0, 0x38, 0x48, 0xcd, 0x0b, 0x7f, 0x5d, 0x22, 0x27, 0xcc, 0x1e, 0xf7, 0x9a, 0x51, 0x4c,
	0x0f, 0x63, 0x3c, 0xdc, 0x14, 0x46, 0x6d, 0x53, 0x60, 0xe2, 0xf8, 0xbc, 0xd8, 0x48, 0x07, 0x40,
	0xb4, 0xe2, 0x81, 0x30, 0xde, 0x5a, 0x17, 0xad, 0x78, 0x1c, 0x8c, 0xb7, 0xae, 0x1b, 0xc2, 0xc2,
	0xad, 0x64, 0x65, 0xf5, 0xdf, 0x22, 0x15, 0x43, 0x24, 0x3a, 0xef, 0x1b, 0xb6, 0x5c, 0x5e, 0xc8,
	0x93, 0x8b, 0x36, 0x52, 0x09, 0xe7, 0x6f, 0x4a, 0x64, 0x96, 0x17, 0x90, 0x21, 0xf5, 0xca, 0x98,
	0x07, 0xab, 0x2c, 0xe6, 0x07, 0x14, 0x56, 0xde, 0x28, 0x13, 0x09, 0xa3, 0x1f, 0x07, 0x32, 0xa5,
	0x81, 0xfc, 0x0d, 0x96, 0xd8, 0x41, 0xd2, 0x94, 0x1b, 0xec, 0x0c, 0x00, 0x43, 0x4d, 0xfd, 0xa6,
	0xaa, 0xaa, 0x30, 0x00, 0x37, 0xee, 0x9b, 0x4d, 0xe9, 0x4a, 0x00, 0xa8, 0xa4, 0x62, 0xd2, 0x99,
	0x54, 0x4c, 0x99, 0x95, 0xf3, 0xa5, 0xeb, 0xf2, 0x2b, 0x9f, 0x81, 0x13, 0x3a, 0xfa, 0xdc, 0x88,
	0xb5, 0x1a, 0xee, 0xaf, 0x43, 0xb2, 0x84, 0xe2, 0x1a, 0xe3, 0x5b, 0x26, 0x14, 0xf8, 0x4a, 0x25,
	0xed, 0x95, 0xbc, 0x0f, 0x49, 0x79, 0xd3, 0x6f, 0xee, 0xdd, 0x40, 0x17, 0x15, 0xb4, 0xcf, 0x92,
	0x19, 0xbf, 0xc9, 0x62, 0xea, 0x16, 0x2c, 0x31, 0xf1, 0x54, 0x30, 0xc1, 0xa6, 0xf7, 0x78, 0x7d,
	0xc9, 0x71, 0x36, 0x58, 0x32, 0x37, 0xea, 0x64, 0x4e, 0x4f, 0x0f, 0xbd, 0xd7, 0xc9, 0xa2, 0x41,
	0x98, 0xb1, 0x78, 0x91, 0x8c, 0xfa, 0x71, 0xcc, 0x6d, 0xa1, 0x6c, 0xda, 0xc2, 0x8d, 0x06, 0xed,
	0x36, 0xd8, 0x63, 0xef, 0x75, 0x32, 0xc6, 0x00, 0x85, 0xb7, 0xa4, 0x87, 0x8d, 0x2a, 0xcc, 0x74,
	0x21, 0xbc, 0x29, 0xd7, 0xb4, 0x80, 0x51, 0x20, 0x3d, 0x26, 0x62, 0x29, 0x90, 0x5e, 0x98, 0xc2,
	0xf8, 0xd1, 0x06, 0x02, 0xde, 0x55, 0x32, 0xb7, 0xb1, 0xb3, 0x43, 0x9b, 0x29, 0x0d, 0xb0, 0xdb,
	0x05, 0x32, 0x17, 0x47, 0x1f, 0x26, 0x5b, 0x3e, 0x6f, 0xe5, 0xdd, 0x67, 0x59, 0xa3, 0xe8, 0xb9,
	0xfe, 0x8b, 0xdf, 0x94, 0xc8, 0xe8, 0x3b, 0x9b, 0x8d, 0xf2, 0x16, 0x99, 0xb9, 0x49, 0xd3, 0xaf,
	0x46, 0xdb, 0x40, 0xa8, 0x9c, 0x75, 0x28, 0xbb, 0x6a, 0x9d, 0x76, 0x50, 0x6c, 0x79, 0xa7, 0x7f,
	0xf0, 0x0f, 0xff, 0xf2, 0xab, 0x91, 0x55, 0xaf, 0x0c, 0xdf, 0x04, 0x3e, 0x88, 0xb6, 0x6b, 0xc0,
	0x58, 0x6d, 0x97, 0xa6, 0x6f, 0x94, 0xd6, 0xca, 0x0d, 0x32, 0x81, 0x04, 0xb2, 0x71, 0x5b, 0x9f,
	0x41, 0x89, 0x55, 0xa3, 0xb7, 0x0a, 0x98, 0x97, 0xbc, 0x59, 0x89, 0x59, 0xe1, 0xdc, 0x08, 0x02,
	0x86, 0x33, 0x63, 0x68, 0xd5, 0xda, 0xcd, 0x35, 0x24, 0xe4, 0x2d, 0x03, 0xde, 0x39, 0x6f, 0x4a,
	0xe0, 0x65, 0x38, 0xef, 0x93, 0xe9, 0xfb, 0x5d, 0x16, 0x7a, 0x9f, 0x16, 0x6d, 0xd5, 0x40, 0xdb,
	0x24, 0xd3, 0xd7, 0x69, 0x9b, 0x22, 0xda, 0x4c, 0x09, 0xe4, 0xe2, 0x3d, 0x07, 0x78, 0xab, 0x6b,
	0x15, 0x29, 0x86, 0x27, 0x60, 0xbe, 0x07, 0xb5, 0x27, 0xb0, 0x43, 0x7e, 0x50, 0xfe, 0x36, 0x99,
	0x43, 0x19, 0x6f, 0x84, 0xc1, 0xad, 0xa8, 0xf9, 0x70, 0x78, 0x51, 0x9f, 0x02, 0x1a, 0x2b, 0xde,
	0x92, 0xa4, 0xd1, 0x8e, 0x9a, 0x0f, 0x85, 0xbc, 0xdf, 0x27, 0xd3, 0xf7, 0x43, 0xd6, 0x90, 0x27,
	0x9b, 0x95, 0xcb, 0xf8, 0x79, 0xe7, 0x65, 0xf1, 0x79, 0x27, 0x4b, 0x6d, 0xd3, 0x7d, 0xaf, 0x0a,
	0xa8, 0x8f, 0x55, 0x17, 0x24, 0xea, 0x1e, 0xe0, 0x62, 0x88, 0x7f, 0x58, 0x22, 0xab, 0x37, 0x69,
	0x6a, 0x9d, 0xfa, 0x46, 0x53, 0x2c, 0x72, 0x3e, 0x3c, 0xc7, 0x2c, 0x5f, 0x04, 0xb2, 0x17, 0xbc,
	0x33, 0x40, 0xf6, 0x03, 0x73, 0x9c, 0x69, 0xa2, 0x3f, 0x2c, 0x91, 0x72, 0x3f, 0x17, 0x65, 0xab,
	0xd6, 0xe2, 0xfe, 0x12, 0xa1, 0xea, 0x39, 0xc4, 0x61, 0x75, 0xf5, 0x2e, 0x00, 0x2f, 0xa7, 0xbd,
	0x8a, 0x93, 0x17, 0xce, 0xc5, 0x23, 0x52, 0xde, 0x08, 0x02, 0x9b, 0x89, 0x02, 0xe8, 0xf3, 0xad,
	0xe7, 0x2c, 0xd0, 0x3e, 0xe1, 0x1d, 0x73, 0xd1, 0x66, 0x74, 0xf7, 0xc9, 0x71, 0x34, 0xfc, 0x67,
	0x45, 0xba, 0x9a, 0x49, 0xfa, 0xe7, 0x25, 0x72, 0x1c, 0xbd, 0xc3, 0xa6, 0x5d, 0x48, 0xf9, 0xb9,
	0xc4, 0x5f, 0x01, 0xe2, 0xb5, 0xb5, 0x97, 0x9d, 0x32, 0x97, 0x1e, 0x84, 0x29, 0xdd, 0x41, 0xed,
	0x09, 0xe4, 0x21, 0x07, 0xe5, 0xcf, 0x4a, 0xe4, 0x44, 0xbf, 0x2d, 0x08, 0xbf, 0x3a, 0x3a, 0x93,
	0xb8, 0x04, 0xec, 0x79, 0xde, 0x69, 0x27, 0x7b, 0xba, 0xf3, 0x3d, 0x21, 0xc7, 0xd1, 0xf9, 0x0e,
	0xa3, 0x9f, 0x2c, 0xa7, 0x7c, 0x1e, 0xc8, 0x9f, 0xab, 0x9e, 0x74, 0x92, 0x57, 0x0e, 0xfa, 0x11,
	0x39, 0x76, 0x93, 0xa6, 0xfa, 0xa7, 0x02, 0xe8, 0x9c, 0x03, 0xbf, 0x28, 0xc8, 0xf1, 0x4c, 0x4e,
	0xdb, 0x43, 0xda, 0xa9, 0x36, 0xc8, 0x74, 0xcb, 0x8f, 0xc9, 0xb2, 0x45, 0x1b, 0x16, 0x59, 0x83,
	0x49, 0x5b, 0xfb, 0x5c, 0x36, 0x06, 0xef, 0x39, 0x60, 0xe0, 0xac, 0x57, 0xed, 0x67, 0x80, 0x25,
	0x9e, 0xca, 0x21, 0x17, 0x2c, 0xfa, 0x05, 0x68, 0x9f, 0x75, 0x28, 0x45, 0xef, 0x20, 0xa2, 0xb9,
	0x77, 0xbc, 0x9f, 0x38, 0xa7, 0xdb, 0x21, 0x0b, 0x1b, 0x41, 0x60, 0xd0, 0x1d, 0x84, 0x35, 0xdf,
	0x15, 0xcc, 0xe0, 0xae, 0x93, 0x64, 0xe4, 0xba, 0xa4, 0x8c, 0xfe, 0x7f, 0xf4, 0x14, 0xab, 0x6e,
	0x8a, 0xdf, 0x2b, 0x91, 0x32, 0xba, 0xfd, 0x90, 0xc2, 0xcd, 0xa5, 0xf9, 0x39, 0xa0, 0xf9, 0xdc,
	0xda, 0x85, 0x7e, 0xc1, 0x4a, 0x6f, 0xe7, 0xeb, 0x9e, 0x83, 0xf2, 0x0f, 0x4a, 0x64, 0xc5, 0x52,
	0xae, 0xf0, 0xf1, 0x23, 0xd0, 0x71, 0x8e, 0x81, 0xe9, 0x9e, 0x1d, 0x93, 0x32, 0x7a, 0xf6, 0x70,
	0x92, 0xcf, 0xf2, 0x69, 0x3e, 0xcb, 0x54, 0x2b, 0xfd, 0x54, 0xfb, 0x66, 0x5c, 0xeb, 0xbb, 0x8b,
	0x9c, 0x19, 0xd7, 0xea, 0x59, 0x78, 0xc6, 0xed, 0x98, 0xe3, 0x4c, 0xd7, 0xfe, 0x09, 0x8a, 0xdf,
	0xf5, 0xa5, 0x51, 0x21, 0x26, 0xac, 0xc3, 0xcc, 0x0e, 0x3c, 0x56, 0x80, 0xb5, 0xb9, 0xd1, 0xfd,
	0xfc, 0x07, 0x38, 0xfd, 0xdb, 0x1f, 0xb0, 0x14, 0x62, 0xc4, 0x15, 0x83, 0xad, 0x3e, 0xd6, 0xec,
	0x6f, 0x73, 0x62, 0xcc, 0xfe, 0x36, 0x0f, 0x05, 0xd0, 0x0f, 0x33, 0xfb, 0x5b, 0xb4, 0x8d, 0xd9,
	0xff, 0x59, 0x91, 0xae, 0x66, 0x92, 0xfe, 0x4c, 0xce, 0xfe, 0x87, 0x12, 0x7d, 0x2e, 0xf1, 0xab,
	0x40, 0xfc, 0xf2, 0xda, 0x4b, 0x4e, 0x99, 0xcb, 0x78, 0x00, 0x9b, 0x72, 0x07, 0xb5, 0x27, 0xb0,
	0x0d, 0x77, 0x50, 0xfe, 0x19, 0x4e, 0xfe, 0x16, 0x25, 0x11, 0x18, 0x8e, 0xcc, 0x20, 0xf2, 0x4d,
	0xd3, 0x39, 0xf7, 0x1f, 0x46, 0x3b, 0xc5, 0xe6, 0x7e, 0x9b, 0xbc, 0x0a, 0x15, 0x14, 0x56, 0x15,
	0x5a, 0x7c, 0xc8, 0xfe, 0x98, 0x26, 0x27, 0x2a, 0x98, 0x16, 0xd8, 0xec, 0x8f, 0x05, 0x1a, 0x19,
	0xd8, 0x4e, 0x18, 0x82, 0x8c, 0xda, 0x7e, 0x70, 0x92, 0x81, 0xe5, 0xbc, 0x20, 0xf3, 0x4d, 0x32,
	0x25, 0xc8, 0x0c, 0x41, 0x41, 0x7d, 0x5b, 0xe4, 0x9d, 0x00, 0x0a, 0xcb, 0xde, 0xbc, 0x46, 0x81,
	0xe3, 0xfe, 0xdf, 0x64, 0x6a, 0x23, 0xe0, 0x5b, 0xb6, 0x99, 0x08, 0xf2, 0x0d, 0xf6, 0x38, 0x60,
	0x5f, 0xf0, 0x88, 0xc2, 0xce, 0x30, 0xff, 0x1f, 0x32, 0x83, 0xee, 0x79, 0x14, 0xc8, 0xab, 0x16,
	0xf2, 0xc7, 0x64, 0x06, 0xfd, 0x6f, 0xa0, 0x54, 0x72, 0xb1, 0xd7, 0x01, 0xfb, 0xe7, 0xd6, 0x5e,
	0xd4, 0x04, 0x23, 0x3d, 0x6c, 0x9f, 0xfa, 0xf1, 0x41, 0xed, 0x09, 0x94, 0x34, 0x0e, 0x6a, 0x4f,
	0x40, 0x25, 0x07, 0xe5, 0x1d, 0x48, 0xad, 0x0c, 0xef, 0x3a, 0x94, 0x4e, 0xce, 0x00, 0xe9, 0x8a,
	0xb7, 0xac, 0x91, 0xd6, 0xfd, 0xe7, 0x5b, 0x64, 0x06, 0xfd, 0x67, 0x90, 0xf8, 0xb2, 0x7c, 0xc5,
	0x4c, 0x64, 0x9a, 0x4e, 0x0f, 0x81, 0x2f, 0x96, 0x72, 0x3c, 0x04, 0x9e, 0x17, 0xf6, 0x10, 0xf8,
	0x68, 0xcb, 0xe5, 0x21, 0x80, 0x26, 0xc7, 0x43, 0x9c, 0x64, 0xd4, 0x07, 0x59, 0x4e, 0x32, 0x0e,
	0x0f, 0xc1, 0xaf, 0xb7, 0x0e, 0x45, 0xc1, 0xf4, 0x10, 0xa4, 0x60, 0x78, 0x08, 0xe2, 0xce, 0x44,
	0x30, 0x8c, 0x87, 0x00, 0x76, 0xc3, 0x43, 0x8e, 0x02, 0x79, 0xd5, 0x42, 0xbe, 0x4d, 0x66, 0x35,
	0xe4, 0xf5, 0xc3, 0x62, 0x3f, 0x09, 0xd8, 0x8f, 0x57, 0x17, 0x4d, 0x0d, 0x5b, 0x5e, 0x38, 0x50,
	0xf2, 0x43, 0x78, 0x21, 0xd2, 0x28, 0xe4, 0x85, 0x80, 0x3b, 0xd7, 0x0b, 0x07, 0xe9, 0xdd, 0xf4,
	0x42, 0x24, 0xed, 0xf4, 0xc2, 0x41, 0x2a, 0x2a, 0xe6, 0x85, 0x48, 0x40, 0x79, 0xe1, 0x01, 0x39,
	0x7e, 0x93, 0xa6, 0xc6, 0x09, 0x18, 0xf4, 0xc6, 0xc1, 0x9f, 0xbc, 0xe5, 0x78, 0xe5, 0x0b, 0x40,
	0xf3, 0xbc, 0x77, 0x0a, 0x68, 0xc6, 0xfa, 0x28, 0xd3, 0x3b, 0x3f, 0x22, 0x8b, 0x36, 0xf9, 0x22,
	0x94, 0xcf, 0x39, 0xa4, 0x60, 0xf4, 0xf0, 0xce, 0x03, 0x07, 0x27, 0xbd, 0x15, 0x07, 0x07, 0x9c,
	0x76, 0x97, 0x2c, 0x6e, 0x04, 0x81, 0x49, 0x7b, 0x20, 0xe2, 0x7c, 0x3b, 0x32, 0xcb, 0xb9, 0x06,
	0x55, 0x46, 0x31, 0x21, 0xcb, 0xe8, 0x11, 0xcf, 0x82, 0x68, 0x35, 0x83, 0xe8, 0xf7, 0x4b, 0x64,
	0x19, 0x7d, 0x64, 0x68, 0x31, 0xe7, 0x92, 0x5d, 0x03, 0xb2, 0x17, 0xd7, 0x3c, 0x87, 0x84, 0xa5,
	0xef, 0xc0, 0x57, 0x9d, 0x07, 0xe5, 0x4f, 0x71, 0xe1, 0x64, 0x60, 0x17, 0x5e, 0x73, 0x24, 0xea,
	0x36, 0xcb, 0x22, 0x26, 0x33, 0xba, 0x37, 0xf5, 0xc8, 0x32, 0x7a, 0xd3, 0xb0, 0x1a, 0xc8, 0xf2,
	0xae, 0x8b, 0x40, 0xf8, 0x4c, 0xf5, 0x84, 0x83, 0xb0, 0xf2, 0xb2, 0x6d, 0x32, 0xcb, 0x82, 0x45,
	0x6b, 0x37, 0x44, 0xe7, 0xca, 0xfc, 0xfc, 0x31, 0xc7, 0xa7, 0xac, 0x40, 0xd1, 0xda, 0x0d, 0x4d,
	0x57, 0xfa, 0x3a, 0x99, 0xe4, 0x34, 0x72, 0xd0, 0xaf, 0xba, 0xc2, 0x47, 0x6b, 0x37, 0xf4, 0x2a,
	0x80, 0xbd, 0xec, 0xcd, 0x29, 0xec, 0x1c, 0xef, 0x7d, 0x32, 0xc9, 0x66, 0x1f, 0x86, 0x37, 0x6b,
	0x74, 0xbe, 0xa1, 0x1c, 0x03, 0xd4, 0xf3, 0xde, 0xb4, 0x44, 0x8d, 0x93, 0x1a, 0xe1, 0xb3, 0xc3,
	0x53, 0x63, 0xae, 0x9a, 0x98, 0x43, 0x42, 0xf8, 0x9c, 0x90, 0x2f, 0x8b, 0x5c, 0xd4, 0x7c, 0x3d,
	0xbe, 0x76, 0x5e, 0xc9, 0x43, 0x1a, 0x35, 0x7c, 0xac, 0xab, 0xaa, 0x9e, 0xdb, 0x64, 0x9e, 0x0b,
	0x5e, 0x98, 0xf4, 0x21, 0xe4, 0x6f, 0x46, 0x0e, 0xa0, 0xa7, 0xdb, 0xed, 0x37, 0x09, 0xe1, 0xb3,
	0x40, 0xae, 0xb4, 0xb2, 0xac, 0xd4, 0x9a, 0x43, 0x19, 0x76, 0x65, 0x9c, 0x1f, 0x90, 0x25, 0xce,
	0x3f, 0x7c, 0x54, 0x8a, 0x16, 0x9a, 0xff, 0xe1, 0x69, 0x8e, 0x99, 0x9a, 0x0b, 0xf6, 0x44, 0x8c,
	0x30, 0x6d, 0xf5, 0x81, 0xf4, 0x07, 0xfc, 0xee, 0x75, 0x00, 0xb5, 0x53, 0x19, 0xef, 0x0b, 0x4f,
	0x1d, 0xa2, 0x43, 0x8a, 0x9c, 0x56, 0x40, 0x66, 0xb9, 0xfd, 0x22, 0xad, 0x5c, 0x64, 0xf9, 0x46,
	0x61, 0xe5, 0x68, 0x62, 0x10, 0xa3, 0xb2, 0x4b, 0x16, 0x94, 0x39, 0x1f, 0x15, 0xa1, 0xaa, 0x83,
	0xd0, 0xc7, 0x64, 0x41, 0x59, 0x77, 0x21, 0xe9, 0xe5, 0x52, 0xaa, 0x01, 0xa5, 0x17, 0xd7, 0x5e,
	0xb0, 0x84, 0x27, 0x8d, 0x1d, 0xbf, 0xae, 0x3d, 0xa8, 0x3d, 0x81, 0xef, 0x9e, 0x0f, 0xca, 0x8f,
	0xa0, 0xb0, 0x2c, 0xb1, 0x0b, 0x93, 0x7f, 0x2a, 0x0d, 0x7a, 0xc0, 0xc4, 0x29, 0x6f, 0xd5, 0x62,
	0x42, 0xf7, 0x80, 0x16, 0x59, 0x50, 0x1e, 0x50, 0x44, 0xc0, 0x59, 0xbe, 0xc0, 0x6b, 0xc8, 0xd5,
	0xe3, 0x16, 0x31, 0xe5, 0x10, 0x29, 0x94, 0xb4, 0xd4, 0xc7, 0xb8, 0xe8, 0x11, 0x03, 0xbe, 0xd8,
	0xcd, 0x71, 0x09, 0x3e, 0x47, 0x78, 0x38, 0x47, 0x74, 0xe5, 0x10, 0xd3, 0x27, 0x42, 0x58, 0xa8,
	0x68, 0xdf, 0x0c, 0x0f, 0x22, 0x78, 0xda, 0xf1, 0xfa, 0xea, 0xb1, 0x35, 0x5f, 0x68, 0x54, 0x39,
	0xbd, 0x5d, 0x32, 0xb7, 0x11, 0x04, 0x1a, 0xbd, 0x7c, 0x7c, 0xf9, 0x66, 0xc4, 0xf7, 0x29, 0xbd,
	0x05, 0x8b, 0x18, 0x3a, 0xfb, 0x22, 0xba, 0xc6, 0xd1, 0xd2, 0xaa, 0xba, 0x68, 0xfd, 0xb8, 0x44,
	0x16, 0xd1, 0x3d, 0x86, 0x10, 0x64, 0x2e, 0xb5, 0xd7, 0x80, 0x5a, 0x7d, 0xad, 0x66, 0x8b, 0x31,
	0x6b, 0x7d, 0x80, 0x9f, 0x92, 0x1f, 0xf0, 0xdd, 0x1f, 0x45, 0x46, 0x78, 0xca, 0x53, 0xaa, 0xd5,
	0x8c, 0xaf, 0x1a, 0x3f, 0xba, 0xb3, 0xb4, 0xc9, 0x22, 0x3a, 0x4b, 0x71, 0x91, 0x67, 0xb9, 0x0b,
	0x4f, 0xa4, 0xab, 0x2b, 0x36, 0x3d, 0xe5, 0x2f, 0x0f, 0x61, 0x29, 0xc4, 0x3f, 0x16, 0x41, 0x67,
	0xc9, 0xfb, 0x20, 0x3c, 0xc7, 0x53, 0xcc, 0xac, 0xfd, 0x01, 0xf6, 0x37, 0xdd, 0x64, 0x9b, 0x10,
	0x45, 0x2c, 0x9f, 0x4e, 0xd5, 0xbd, 0xd9, 0xce, 0x9e, 0x89, 0x19, 0xd1, 0x5b, 0x34, 0x28, 0x71,
	0x1a, 0xdf, 0x26, 0x04, 0x8f, 0x48, 0x00, 0x8d, 0x1c, 0x34, 0xf9, 0xa6, 0xd3, 0x77, 0x04, 0x83,
	0x0d, 0x61, 0xf8, 0x7d, 0x32, 0x27, 0x8f, 0x4b, 0x1c, 0x09, 0x89, 0x6a, 0x1f, 0x89, 0x88, 0xcc,
	0xc9, 0xa3, 0x13, 0x83, 0x25, 0x95, 0x4b, 0x83, 0x87, 0xaf, 0xb5, 0x53, 0x86, 0xa8, 0xec, 0x63,
	0x14, 0x21, 0x64, 0x11, 0x1c, 0xa1, 0xb0, 0xf5, 0x43, 0xab, 0xc7, 0xdc, 0xe8, 0x13, 0x34, 0x75,
	0x13, 0x6f, 0x92, 0x39, 0x79, 0xac, 0x62, 0xa0, 0x0c, 0xb3, 0x8c, 0x9b, 0xc7, 0xc8, 0xea, 0xb2,
	0x41, 0xa6, 0x6f, 0x07, 0x57, 0xfb, 0x42, 0x3e, 0x6f, 0x07, 0x57, 0xeb, 0x56, 0x7c, 0x07, 0x57,
	0x1b, 0x64, 0x1a, 0x3a, 0xdf, 0x41, 0xd5, 0x3f, 0xe8, 0x1f, 0x4c, 0xd6, 0xb9, 0xff, 0xa5, 0x75,
	0xb0, 0x77, 0x50, 0x75, 0xea, 0xe6, 0x0e, 0xaa, 0x4e, 0x77, 0x10, 0xd6, 0xa1, 0x76, 0x50, 0xb5,
	0x71, 0xe6, 0x0e, 0xea, 0x91, 0x53, 0xac, 0xba, 0x29, 0xfe, 0x42, 0xed, 0xa0, 0x0e, 0x27, 0xdc,
	0x5c, 0x9a, 0x5f, 0x02, 0x9a, 0xaf, 0xae, 0x5d, 0xed, 0x17, 0xac, 0x74, 0x15, 0xf8, 0x4f, 0xcc,
	0x13, 0xfb, 0xfb, 0x9d, 0xce, 0x41, 0xed, 0xc9, 0x76, 0x87, 0x79, 0x8f, 0xd8, 0x52, 0xd5, 0x86,
	0xe5, 0x6f, 0xa9, 0x0e, 0xa5, 0x74, 0x6b, 0x4b, 0x55, 0xe7, 0xcd, 0xbd, 0xa5, 0x3a, 0x94, 0x2a,
	0x0a, 0x6e, 0xa9, 0xea, 0x54, 0xfb, 0xb6, 0x54, 0xad, 0x0b, 0x01, 0x72, 0xb6, 0x54, 0xad, 0x9e,
	0x85, 0xb7, 0x54, 0x13, 0x73, 0x9c, 0xe9, 0x6b, 0x7c, 0x17, 0xd3, 0xbe, 0xcc, 0xa0, 0x10, 0x03,
	0xae, 0xdd, 0x24, 0xab, 0x8f, 0xbd, 0x28, 0xb2, 0x58, 0xe1, 0x4c, 0x7c, 0x52, 0xc2, 0xd4, 0xda,
	0x7c, 0x5a, 0x3f, 0x3a, 0x2e, 0xcc, 0x3c, 0xd4, 0xe2, 0xa2, 0x6e, 0x6e, 0xa6, 0xda, 0xa2, 0x28,
	0x80, 0x7f, 0x98, 0xcd, 0x54, 0x8b, 0xb8, 0xb1, 0x99, 0xfa, 0xac, 0x48, 0x57, 0x33, 0x49, 0x7f,
	0x2a, 0x37, 0x53, 0x0f, 0x65, 0x01, 0x43, 0x9c, 0xac, 0xb0, 0x55, 0xaf, 0x0e, 0x57, 0xc4, 0xda,
	0x1e, 0xaa, 0x45, 0x20, 0x77, 0x0f, 0xf5, 0x30, 0x86, 0x60, 0xee, 0xa1, 0xda, 0x3c, 0x39, 0xf7,
	0x50, 0x0f, 0xa3, 0x94, 0x62, 0x7b, 0xa8, 0x36, 0x79, 0x15, 0x1b, 0x7e, 0x59, 0x22, 0xa7, 0x54,
	0x4e, 0xe1, 0xa8, 0x51, 0x17, 0xbe, 0x5c, 0x23, 0x27, 0x4a, 0x5c, 0x06, 0x66, 0x2e, 0x79, 0x17,
	0xf4, 0x14, 0xa0, 0x91, 0x5d, 0xb1, 0xfe, 0x35, 0x06, 0x2c, 0xe7, 0xed, 0x1f, 0xc5, 0xf9, 0x79,
	0x21, 0x3b, 0x59, 0x31, 0x0b, 0x9b, 0xa6, 0xaa, 0x9c, 0xec, 0x71, 0xc6, 0xfe, 0x6f, 0x89, 0xac,
	0xaa, 0xac, 0xd5, 0x64, 0xac, 0x28, 0xb9, 0x42, 0x89, 0x20, 0x8f, 0x1f, 0x2e, 0x5e, 0xf8, 0x12,
	0xac, 0x6a, 0x64, 0xb7, 0xcf, 0x90, 0x95, 0x6a, 0x3e, 0x2b, 0x7f, 0x5c, 0x22, 0x55, 0x23, 0x0b,
	0x3e, 0xac, 0xba, 0x72, 0x79, 0x79, 0x03, 0x78, 0xb9, 0xba, 0xb6, 0x9e, 0xad, 0x22, 0xe9, 0xe6,
	0x78, 0xc1, 0x00, 0xfe, 0x60, 0x0e, 0xff, 0x67, 0x25, 0x72, 0x26, 0xc3, 0x9a, 0x84, 0xd7, 0x3f,
	0x03, 0xa3, 0x7a, 0x19, 0x38, 0x7e, 0xc1, 0xf3, 0xb2, 0x39, 0xd6, 0x83, 0xc0, 0x4f, 0x98, 0x46,
	0xf5, 0x5c, 0xfb, 0x90, 0x1a, 0xcd, 0x8a, 0x07, 0x3c, 0x44, 0x56, 0xcf, 0x65, 0xb3, 0x93, 0x95,
	0x92, 0xdf, 0xa0, 0x34, 0x29, 0x90, 0x92, 0xb3, 0x6e, 0x43, 0xa7, 0xe4, 0x6c, 0x50, 0x5e, 0x4a,
	0x0e, 0xdf, 0xcb, 0x0f, 0x26, 0x9b, 0x97, 0x3f, 0xb1, 0x0e, 0x19, 0x29, 0x39, 0x50, 0x77, 0xa6,
	0xe4, 0x40, 0x77, 0x10, 0xd6, 0xc3, 0xa4, 0xe4, 0x6c, 0x9c, 0x33, 0x25, 0x3f, 0x3a, 0x8a, 0x55,
	0x37, 0xc5, 0xdf, 0xeb, 0x4b, 0xc9, 0x0b, 0x0a, 0x37, 0x97, 0xe6, 0x35, 0xa0, 0xf9, 0xe6, 0xda,
	0x17, 0xfb, 0x05, 0x6b, 0x14, 0x6f, 0x44, 0x5a, 0x9e, 0x6a, 0xfb, 0xbb, 0xb2, 0xba, 0x6f, 0x65,
	0xe6, 0x6c, 0x74, 0xa1, 0xcc, 0xbc, 0x98, 0xee, 0xdd, 0x99, 0x39, 0xb0, 0x98, 0x9b, 0x99, 0x17,
	0xd3, 0xc8, 0x70, 0x99, 0x39, 0x50, 0xb5, 0xcf, 0x67, 0x88, 0x1b, 0x6e, 0xb2, 0xce, 0x67, 0xc0,
	0xf3, 0xc2, 0xe7, 0x33, 0xda, 0xac, 0xb7, 0xe9, 0x53, 0x78, 0x70, 0x02, 0x6f, 0x75, 0x2a, 0x4e,
	0x41, 0x5d, 0xd7, 0x63, 0x15, 0xe5, 0x91, 0x82, 0x71, 0x70, 0x02, 0x71, 0x67, 0x22, 0x18, 0xe6,
	0xe0, 0x04, 0x60, 0x47, 0xae, 0xa7, 0x05, 0xe6, 0xfa, 0x61, 0x51, 0xaf, 0x00, 0xea, 0x45, 0x6f,
	0x46, 0xa1, 0xae, 0x1b, 0x87, 0x32, 0x8e, 0x82, 0xf1, 0xaa, 0xc5, 0xf8, 0x1e, 0x59, 0xd2, 0x90,
	0xdf, 0xc7, 0x7b, 0xb7, 0x0e, 0x49, 0xc2, 0xf4, 0x69, 0x94, 0x3c, 0xde, 0xe4, 0x65, 0x1c, 0xcd,
	0x18, 0xa8, 0xdb, 0x21, 0x8e, 0x66, 0x20, 0x91, 0x42, 0x47, 0x33, 0x00, 0x77, 0xee, 0xd1, 0x8c,
	0x41, 0x96, 0x65, 0x56, 0xd0, 0x91, 0xb4, 0xf3, 0x68, 0xc6, 0x20, 0x45, 0x15, 0x3b, 0x9a, 0x21,
	0x04, 0x68, 0x6e, 0x43, 0xa8, 0x2b, 0xa6, 0x72, 0xb6, 0x21, 0x54, 0xa7, 0xc2, 0xdb, 0x10, 0x6d,
	0x39, 0xc4, 0xf4, 0x47, 0x9b, 0x2a, 0x1e, 0x9a, 0x1a, 0x92, 0xaa, 0x76, 0xb6, 0x30, 0x93, 0xaa,
	0x71, 0x7c, 0x2a, 0x34, 0x82, 0x4d, 0x42, 0x07, 0x12, 0x3c, 0x9d, 0x25, 0x6c, 0xd7, 0xd9, 0x36,
	0x8d, 0xaa, 0xb1, 0xf9, 0xa1, 0xd1, 0xcb, 0xc7, 0x37, 0xcc, 0xe6, 0x87, 0x22, 0x86, 0xdb, 0x56,
	0xf3, 0x06, 0xa1, 0xfa, 0x53, 0x51, 0x32, 0xab, 0xd6, 0x8a, 0x52, 0xdd, 0xd8, 0x67, 0x39, 0xda,
	0xd7, 0xaa, 0xba, 0x5e, 0xeb, 0x47, 0x72, 0x9f, 0x65, 0x08, 0x9d, 0xe5, 0x52, 0x7b, 0x15, 0xa8,
	0x7d, 0x7e, 0xed, 0xb2, 0xad, 0xb1, 0x01, 0xce, 0x8e, 0xf9, 0xa0, 0xa2, 0x92, 0xbb, 0xcd, 0x52,
	0xdc, 0x80, 0xcc, 0x8a, 0x8d, 0xc6, 0x8e, 0x73, 0x9b, 0xa5, 0xb8, 0xc4, 0x8b, 0x6d, 0xb3, 0x68,
	0xf4, 0x54, 0x3c, 0xf8, 0x7f, 0x58, 0x1c, 0xe8, 0xbb, 0xfb, 0x0c, 0xe3, 0x42, 0xb1, 0x7b, 0xd2,
	0x72, 0xc2, 0x03, 0xcf, 0xc2, 0xbd, 0x73, 0x46, 0x52, 0x20, 0x47, 0xf6, 0x7d, 0x83, 0x70, 0xcc,
	0xc5, 0x4b, 0x51, 0x36, 0x2e, 0xe6, 0xa4, 0x2e, 0xb2, 0x57, 0x46, 0x76, 0xa4, 0x58, 0xe2, 0xcc,
	0x64, 0x09, 0x06, 0x43, 0xd7, 0xe1, 0x04, 0xa3, 0x45, 0xb0, 0x41, 0x82, 0x31, 0x02, 0xd9, 0x77,
	0xc8, 0x31, 0x2d, 0x55, 0x57, 0x72, 0x29, 0xf4, 0xc2, 0xf9, 0x1e, 0x62, 0x6e, 0x8e, 0xf5, 0xf1,
	0xc1, 0xa8, 0x7f, 0x97, 0xac, 0x9a, 0x99, 0xfb, 0xb3, 0x60, 0xa0, 0x9a, 0xc3, 0xc0, 0xcf, 0x4a,
	0x64, 0xd5, 0x4c, 0xe4, 0x87, 0x36, 0x8d, 0x21, 0x8e, 0x2b, 0xf4, 0xeb, 0x42, 0x06, 0x0b, 0xbc,
	0x83, 0xef, 0xa0, 0xfc, 0xeb, 0x12, 0x39, 0xe9, 0xb2, 0x0d, 0x11, 0x26, 0x8e, 0xd4, 0x5e, 0xf9,
	0x91, 0x38, 0xef, 0x6c, 0x06, 0x77, 0x7a, 0xec, 0xf8, 0x7e, 0x89, 0xac, 0x9a, 0x39, 0xfd, 0xb0,
	0xba, 0xca, 0x0a, 0x25, 0xbc, 0x64, 0x54, 0x3d, 0x9d, 0xc1, 0x85, 0x8a, 0x28, 0x1f, 0x42, 0xc1,
	0x59, 0xbb, 0xe5, 0x0f, 0x43, 0xc9, 0xa0, 0xbb, 0x00, 0x73, 0x82, 0x88, 0xe9, 0xb1, 0x0f, 0xd4,
	0x18, 0x33, 0x7c, 0xc4, 0x70, 0x64, 0x4a, 0xbf, 0x90, 0x70, 0x20, 0xcd, 0x33, 0xd9, 0x55, 0x06,
	0xf6, 0xdc, 0x5a, 0x68, 0xe8, 0x94, 0xe5, 0x99, 0xa3, 0x79, 0x55, 0x1e, 0x03, 0x9a, 0x03, 0x50,
	0x0e, 0x33, 0x15, 0x6b, 0xf4, 0x70, 0xc1, 0xbe, 0x64, 0x94, 0xc0, 0x8e, 0x8c, 0x5c, 0xd5, 0x49,
	0xee, 0x93, 0x12, 0x59, 0x32, 0xea, 0x5c, 0xc5, 0x44, 0x3a, 0x44, 0xde, 0xad, 0xcb, 0x33, 0xb3,
	0x98, 0xf5, 0x31, 0x9c, 0x25, 0xd6, 0x28, 0x08, 0x27, 0x7b, 0x6a, 0xe5, 0x3a, 0x2b, 0x8f, 0xc0,
	0x8c, 0xee, 0x52, 0x11, 0x59, 0x32, 0xca, 0x54, 0x85, 0xa4, 0x9e, 0xe5, 0x45, 0xfc, 0x4c, 0x52,
	0x75, 0xb5, 0x8f, 0xa4, 0xf2, 0x9f, 0xdf, 0x2d, 0x91, 0xd3, 0x37, 0x69, 0xea, 0xbc, 0x8d, 0x0d,
	0x5d, 0xa9, 0xf8, 0xed, 0x6d, 0x39, 0x4e, 0xc5, 0x83, 0x9e, 0x77, 0x11, 0xbf, 0xa3, 0x70, 0x8d,
	0x36, 0xdd, 0xeb, 0x0f, 0x4a, 0xa4, 0x92, 0xc5, 0xd7, 0x30, 0x2c, 0x5d, 0x72, 0x7d, 0xf2, 0xe1,
	0xea, 0x69, 0xed, 0xb5, 0xb9, 0x59, 0xe4, 0xcc, 0xfd, 0xb8, 0x44, 0x2a, 0x1b, 0x41, 0xe0, 0x66,
	0xae, 0x30, 0xc5, 0x7c, 0xe3, 0x35, 0xc3, 0x90, 0x93, 0x1d, 0xc6, 0xca, 0x4f, 0x4b, 0xe4, 0x24,
	0xff, 0x42, 0xe8, 0xb7, 0xc0, 0x4d, 0x75, 0x00, 0x37, 0xbf, 0x5f, 0x22, 0x27, 0xf9, 0x27, 0x45,
	0x4f, 0xab, 0xb8, 0x5c, 0x76, 0xd6, 0x81, 0x9d, 0x97, 0xd6, 0xd6, 0x72, 0x74, 0x25, 0x7d, 0x9c,
	0x57, 0xc1, 0xfe, 0xa2, 0x44, 0xce, 0x66, 0x59, 0x94, 0xf0, 0xf2, 0x67, 0x62, 0x58, 0xe6, 0xf6,
	0x8c, 0x9b, 0x59, 0x3d, 0x06, 0xfc, 0x7f, 0xa6, 0x52, 0xfc, 0x6a, 0xe9, 0x29, 0x55, 0x9a, 0x15,
	0x18, 0x5e, 0x02, 0x8e, 0x9e, 0xaf, 0x9e, 0xcf, 0xe1, 0x48, 0x85, 0x88, 0x4f, 0xd1, 0x15, 0xed,
	0x5b, 0x46, 0x31, 0x3a, 0x14, 0xba, 0x90, 0x34, 0x27, 0x30, 0x98, 0xf9, 0xc6, 0x03, 0x6b, 0xa0,
	0x19, 0x13, 0x3e, 0x2d, 0x89, 0xc9, 0xde, 0xac, 0xde, 0x17, 0xe3, 0xe1, 0x82, 0x3b, 0x8a, 0x9a,
	0xdb, 0x0a, 0x7d, 0x51, 0xda, 0xb9, 0x4f, 0xb5, 0x4f, 0x96, 0x71, 0x1e, 0x36, 0xf9, 0x28, 0x42,
	0xa1, 0xd0, 0x55, 0x2f, 0xea, 0xcc, 0x50, 0xdf, 0x7e, 0xd0, 0x77, 0xc8, 0x8a, 0x9c, 0x96, 0x9f,
	0x11, 0xf5, 0x6a, 0x36, 0xf5, 0x3f, 0x2c, 0x91, 0x15, 0x39, 0x4b, 0x1f, 0x46, 0x09, 0xb9, 0xf4,
	0xdf, 0x02, 0xfa, 0x5f, 0x58, 0x7b, 0xcd, 0x2d, 0x7c, 0xb5, 0xd1, 0x8c, 0x77, 0xd3, 0xf6, 0x7f,
	0xbf, 0xfb, 0xcb, 0x12, 0xa9, 0x3a, 0x0c, 0x24, 0xe3, 0xf6, 0x8e, 0xa7, 0xb1, 0x13, 0x73, 0xb2,
	0xe8, 0x63, 0x55, 0x77, 0xe7, 0x8f, 0xc9, 0x8a, 0x9c, 0xd2, 0x0f, 0xa1, 0xb1, 0x2c, 0x1f, 0xe6,
	0xdf, 0x27, 0x55, 0x4f, 0xb9, 0x39, 0x50, 0xee, 0x1b, 0xc2, 0xf7, 0x49, 0xe2, 0x5a, 0x5d, 0xf4,
	0xda, 0xdc, 0x9b, 0x77, 0x73, 0xbc, 0xd5, 0x3c, 0xe5, 0xfc, 0x80, 0x0f, 0x30, 0xbd, 0x74, 0x47,
	0xdc, 0x28, 0x85, 0xb7, 0xfe, 0xe6, 0x93, 0x3a, 0xe9, 0x16, 0x01, 0x3c, 0xec, 0xbf, 0x94, 0x08,
	0xa9, 0x71, 0x3a, 0x3e, 0x99, 0x41, 0x27, 0x44, 0x3a, 0x79, 0x98, 0xf2, 0xcd, 0xce, 0xfc, 0x6e,
	0x44, 0x90, 0xc1, 0x73, 0xf7, 0xf3, 0xd2, 0xd9, 0x8e, 0x88, 0x4a, 0xb5, 0x9f, 0x4a, 0x4a, 0xe6,
	0xa5, 0x4f, 0x1d, 0x42, 0x66, 0x26, 0x19, 0x6e, 0x16, 0x6b, 0x67, 0x4d, 0x99, 0xf5, 0xf9, 0x4e,
	0x39, 0x86, 0x22, 0xa9, 0x40, 0x2a, 0x5c, 0xe4, 0x29, 0xb4, 0xd5, 0x77, 0xf0, 0x15, 0x29, 0xeb,
	0xae, 0xb0, 0x43, 0xe6, 0xa5, 0x2b, 0x14, 0x90, 0x67, 0x96, 0xe9, 0x9b, 0x87, 0x61, 0x24, 0xa5,
	0xbe, 0x32, 0x53, 0xdf, 0xdd, 0xb5, 0x39, 0x65, 0xa6, 0xbe, 0xbe, 0x85, 0xcb, 0x4c, 0x1f, 0xda,
	0x23, 0x9d, 0x65, 0xa6, 0xfe, 0xfb, 0x77, 0x0b, 0xb2, 0xe1, 0x5a, 0x48, 0xf7, 0xf5, 0xb2, 0xb2,
	0xc5, 0x7e, 0x96, 0x8c, 0xd2, 0x4e, 0x3f, 0x2f, 0x85, 0x88, 0x0c, 0x53, 0xda, 0xe9, 0xe3, 0xc0,
	0x28, 0xed, 0x3c, 0x4b, 0x06, 0xaa, 0x39, 0x0c, 0xfc, 0x8e, 0x2c, 0xed, 0x1c, 0x5a, 0x1d, 0x43,
	0xdc, 0x39, 0xd5, 0xaf, 0x05, 0x2b, 0x25, 0xc5, 0x12, 0x8f, 0x2c, 0xf0, 0xf4, 0x11, 0xcb, 0x2d,
	0xf0, 0x1c, 0xd6, 0x52, 0xcc, 0x84, 0xab, 0x9f, 0x47, 0x77, 0x81, 0xe7, 0xb0, 0x1a, 0x2b, 0x56,
	0xe0, 0xe9, 0xe7, 0x42, 0xf9, 0xf2, 0x27, 0x25, 0x58, 0x92, 0x8b, 0xfb, 0x8b, 0xef, 0xa6, 0x7b,
	0x34, 0xbe, 0x16, 0x05, 0xb4, 0x6e, 0x7f, 0x75, 0x29, 0x7a, 0xdc, 0xf6, 0x93, 0x87, 0xe2, 0x26,
	0xae, 0xb3, 0xee, 0x2e, 0x12, 0x89, 0xf5, 0x95, 0x2f, 0xe5, 0xcf, 0x6b, 0x91, 0xa4, 0xa2, 0x76,
	0x5b, 0x66, 0x34, 0x2e, 0x8a, 0xd0, 0x5e, 0x75, 0x77, 0x49, 0xac, 0x69, 0x4d, 0xd2, 0x94, 0x1f,
	0x09, 0xcd, 0x6a, 0x84, 0x12, 0x77, 0x44, 0x16, 0x8f, 0xab, 0xb9, 0x4f, 0xad, 0xcf, 0xca, 0x04,
	0x25, 0x59, 0x74, 0xde, 0xc3, 0xaf, 0xfe, 0xe0, 0x1e, 0x52, 0xb8, 0x78, 0xd3, 0x3e, 0x80, 0xae,
	0x5f, 0x54, 0xda, 0x1f, 0x0f, 0xc5, 0x4d, 0x9d, 0x56, 0xd6, 0x9a, 0x40, 0xf7, 0x1a, 0x5c, 0xd7,
	0x29, 0x28, 0x25, 0x70, 0xb2, 0x5e, 0xdd, 0x19, 0x7a, 0x9d, 0x26, 0x4d, 0xbb, 0xa4, 0xd2, 0x77,
	0xa3, 0x68, 0x0e, 0x45, 0x73, 0x6b, 0x23, 0x90, 0x23, 0x6b, 0x01, 0x55, 0x44, 0xf7, 0x21, 0xf1,
	0xb9, 0x4e, 0xbb, 0xd7, 0xda, 0x7e, 0x92, 0xdc, 0x8c, 0xa3, 0x5e, 0xd7, 0x3e, 0xef, 0xd0, 0x7f,
	0x95, 0xa8, 0x5d, 0xc7, 0xb1, 0xef, 0xfc, 0xec, 0x27, 0x5d, 0x6b, 0x32, 0xf4, 0xb5, 0x5d, 0x86,
	0x5f, 0x90, 0xfe, 0x39, 0x1e, 0xfb, 0xcb, 0xbe, 0x74, 0xbb, 0x80, 0xfd, 0x14, 0xbd, 0x27, 0x5c,
	0xac, 0x59, 0xca, 0x96, 0x0d, 0xa7, 0x26, 0xc5, 0xef, 0x82, 0x0a, 0xac, 0x8b, 0x7e, 0x73, 0x2f,
	0x12, 0x17, 0x8c, 0x9c, 0xcf, 0x29, 0xe5, 0x22, 0x1e, 0x2b, 0x2f, 0x4c, 0x8d, 0x87, 0x42, 0x26,
	0x3f, 0x32, 0xcb, 0xd8, 0x48, 0xe3, 0xfd, 0x56, 0xba, 0x77, 0x37, 0xa4, 0xf7, 0xde, 0xbd, 0x55,
	0x8c, 0x97, 0x53, 0x79, 0x9d, 0x32, 0x36, 0x5b, 0xf0, 0x61, 0xed, 0xd1, 0xba, 0xb6, 0xd9, 0x72,
	0xda, 0xc9, 0x09, 0x1e, 0x01, 0xfd, 0x6d, 0xf0, 0x22, 0xe3, 0xca, 0xcf, 0xcc, 0xb3, 0x39, 0xfa,
	0x6d, 0xc3, 0x85, 0x98, 0x78, 0x3e, 0x47, 0x39, 0x1a, 0x32, 0x2b, 0xd0, 0xa5, 0xfd, 0x3d, 0x34,
	0x35, 0xb1, 0x45, 0xf6, 0x8d, 0x36, 0x7d, 0xdc, 0xda, 0xc6, 0x69, 0xe6, 0x7f, 0x45, 0xbd, 0xd8,
	0x9e, 0x84, 0xec, 0xe7, 0x82, 0x1f, 0xd7, 0x9a, 0xc6, 0xee, 0x6b, 0xad, 0xb2, 0x77, 0xac, 0xc7,
	0xea, 0xe0, 0x2e, 0x5b, 0x65, 0x1f, 0x96, 0x91, 0x21, 0xd6, 0xd9, 0x36, 0x03, 0x62, 0xd5, 0x06,
	0xb9, 0xca, 0xb3, 0xa4, 0x5f, 0xcd, 0xa6, 0xff, 0x53, 0xb9, 0xd2, 0x7e, 0x26, 0x0c, 0xf0, 0xe3,
	0x93, 0x6b, 0xcf, 0xb9, 0x35, 0x60, 0xd7, 0xce, 0x7e, 0x85, 0x0b, 0x6b, 0x9b, 0x54, 0x46, 0x82,
	0xf2, 0x54, 0xb6, 0x61, 0xae, 0xac, 0xfb, 0x38, 0xd3, 0xd3, 0x93, 0xef, 0x95, 0xc8, 0x8a, 0x3d,
	0x1e, 0xd3, 0x95, 0xa2, 0x1c, 0x15, 0x5b, 0x5c, 0xf7, 0x31, 0xa1, 0xb2, 0x93, 0xf7, 0xc8, 0xe4,
	0xad, 0xc8, 0x87, 0xab, 0x88, 0xed, 0xfb, 0x9f, 0x5b, 0x43, 0xaf, 0x3b, 0x6b, 0xed, 0xc8, 0x0f,
	0x10, 0x2b, 0xdc, 0xb7, 0x8b, 0x78, 0x33, 0xef, 0xf2, 0x75, 0x10, 0xb4, 0xce, 0x71, 0x88, 0xcb,
	0x76, 0x11, 0xeb, 0x37, 0xf0, 0x03, 0x7c, 0xc0, 0x5a, 0x1f, 0x0e, 0xad, 0x79, 0x16, 0x45, 0xa1,
	0xad, 0xa5, 0x8f, 0xf5, 0x6f, 0xfb, 0x01, 0xf5, 0xfa, 0x70, 0xa8, 0xfb, 0x36, 0xbd, 0x34, 0xd4,
	0x75, 0xcc, 0x52, 0xc8, 0xad, 0x56, 0x92, 0xbe, 0x43, 0xe3, 0x8e, 0xdf, 0x77, 0x60, 0x50, 0x3d,
	0x11, 0x2a, 0x3d, 0x9d, 0xdd, 0xc1, 0x71, 0xd0, 0x45, 0x3e, 0x7d, 0xa3, 0xb4, 0xf6, 0xf6, 0x1b,
	0xdf, 0x7c, 0x7d, 0xb7, 0x95, 0xb6, 0xfd, 0xed, 0xcb, 0x0f, 0x69, 0x18, 0xf8, 0x97, 0x9b, 0x51,
	0xe7, 0x72, 0xfa, 0x61, 0x0d, 0x80, 0x5a, 0x33, 0xea, 0x74, 0xa2, 0x30, 0x61, 0xd3, 0x08, 0x10,
	0xa8, 0xed, 0x46, 0x6d, 0x3f, 0xdc, 0xad, 0x05, 0x1d, 0x86, 0x69, 0x7b, 0x02, 0x1a, 0xaf, 0xfc,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x63, 0xde, 0x91, 0x5a, 0x93, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PERClient is the client API for PER service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PERClient interface {
	//取得職能數量
	GetJobCount(ctx context.Context, in *SingleJob, opts ...grpc.CallOption) (*CountReply, error)
	//取得職能代號
	GetJob(ctx context.Context, in *SingleJob, opts ...grpc.CallOption) (*MultiJob, error)
	//新增職能代號
	AddJob(ctx context.Context, in *MultiJob, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改職能代號
	UpdateJob(ctx context.Context, in *MultiJob, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除職能代號
	DeleteJob(ctx context.Context, in *SingleJob, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得職能代號並 lock
	GetJobAndLock(ctx context.Context, in *SingleJob, opts ...grpc.CallOption) (*MultiJob, error)
	// unlock 職能代號
	UnlockJob(ctx context.Context, in *MultiJob, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得合格講師數量
	GetQualifiedLectorCount(ctx context.Context, in *SingleQualifiedLector, opts ...grpc.CallOption) (*CountReply, error)
	//取得合格講師資料
	GetQualifiedLector(ctx context.Context, in *QualifiedLectorRequest, opts ...grpc.CallOption) (*MultiQualifiedLector, error)
	//新增合格講師
	AddQualifiedLector(ctx context.Context, in *MultiQualifiedLector, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改合格講師
	UpdateQualifiedLector(ctx context.Context, in *MultiQualifiedLector, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除合格講師
	DeleteQualifiedLector(ctx context.Context, in *SingleQualifiedLector, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得合格講師並 lock
	GetQualifiedLectorAndLock(ctx context.Context, in *QualifiedLectorRequest, opts ...grpc.CallOption) (*MultiQualifiedLector, error)
	// unlock 合格講師
	UnlockQualifiedLector(ctx context.Context, in *MultiQualifiedLector, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得授課單位數量
	GetTeachingUnitCount(ctx context.Context, in *SingleTeachingUnit, opts ...grpc.CallOption) (*CountReply, error)
	//取得授課單位名稱
	GetTeachingUnitName(ctx context.Context, in *SingleTeachingUnit, opts ...grpc.CallOption) (*TeachingUnitName, error)
	//取得授課單位資料
	GetTeachingUnit(ctx context.Context, in *SingleTeachingUnit, opts ...grpc.CallOption) (*MultiTeachingUnit, error)
	//新增授課單位
	AddTeachingUnit(ctx context.Context, in *MultiTeachingUnit, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改授課單位
	UpdateTeachingUnit(ctx context.Context, in *MultiTeachingUnit, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除授課單位
	DeleteTeachingUnit(ctx context.Context, in *SingleTeachingUnit, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得授課單位並 lock
	GetTeachingUnitAndLock(ctx context.Context, in *SingleTeachingUnit, opts ...grpc.CallOption) (*MultiTeachingUnit, error)
	// unlock 授課單位
	UnlockTeachingUnit(ctx context.Context, in *MultiTeachingUnit, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得中分類課程數量
	GetMediumSortCouseCount(ctx context.Context, in *SingleMediumSortCouse, opts ...grpc.CallOption) (*CountReply, error)
	//取得中分類課程名稱
	GetMediumSortCouseName(ctx context.Context, in *SingleMediumSortCouse, opts ...grpc.CallOption) (*MediumSortCouseName, error)
	//取得中分類課程
	GetMediumSortCouse(ctx context.Context, in *SingleMediumSortCouse, opts ...grpc.CallOption) (*MultiMediumSortCouse, error)
	//新增中分類課程
	AddMediumSortCouse(ctx context.Context, in *MultiMediumSortCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改中分類課程
	UpdateMediumSortCouse(ctx context.Context, in *MultiMediumSortCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除中分類課程
	DeleteMediumSortCouse(ctx context.Context, in *SingleMediumSortCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得中分類課程並 lock
	GetMediumSortCouseAndLock(ctx context.Context, in *SingleMediumSortCouse, opts ...grpc.CallOption) (*MultiMediumSortCouse, error)
	// unlock 中分類課程
	UnlockMediumSortCouse(ctx context.Context, in *MultiMediumSortCouse, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得開課資料數量
	GetCouseCount(ctx context.Context, in *SingleCouse, opts ...grpc.CallOption) (*CountReply, error)
	//取得開課資料最大流水號
	GetCouseSerno(ctx context.Context, in *SingleCouse, opts ...grpc.CallOption) (*SernoReply, error)
	//取得開課資料
	GetCouse(ctx context.Context, in *SingleCouse, opts ...grpc.CallOption) (*MultiCouse, error)
	//新增開課資料
	AddCouse(ctx context.Context, in *MultiCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改開課資料
	UpdateCouse(ctx context.Context, in *MultiCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除開課資料
	DeleteCouse(ctx context.Context, in *SingleCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得開課資料並 lock
	GetCouseAndLock(ctx context.Context, in *SingleCouse, opts ...grpc.CallOption) (*MultiCouse, error)
	// unlock 開課資料
	UnlockCouse(ctx context.Context, in *MultiCouse, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得學習資料數量
	GetStudyCount(ctx context.Context, in *SingleStudy, opts ...grpc.CallOption) (*CountReply, error)
	//取得學習資料
	GetStudySerno(ctx context.Context, in *SingleStudy, opts ...grpc.CallOption) (*MultiStudy, error)
	//取得學習資料
	GetStudy(ctx context.Context, in *SingleStudy, opts ...grpc.CallOption) (*MultiStudy, error)
	//新增學習資料
	AddStudy(ctx context.Context, in *MultiStudy, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改學習資料
	UpdateStudy(ctx context.Context, in *MultiStudy, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改學習資料(依percur更新資料)
	UpdateStudy1(ctx context.Context, in *MultiStudy, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除學習資料
	DeleteStudy(ctx context.Context, in *SingleStudy, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得學習資料並 lock
	GetStudyAndLock(ctx context.Context, in *SingleStudy, opts ...grpc.CallOption) (*MultiStudy, error)
	// unlock 學習資料
	UnlockStudy(ctx context.Context, in *MultiStudy, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得應修課程數量
	GetRequiredCouseCount(ctx context.Context, in *SingleRequiredCouse, opts ...grpc.CallOption) (*CountReply, error)
	//取得應修課程
	GetRequiredCouse(ctx context.Context, in *SingleRequiredCouse, opts ...grpc.CallOption) (*MultiRequiredCouse, error)
	//新增應修課程
	AddRequiredCouse(ctx context.Context, in *MultiRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改應修課程
	UpdateRequiredCouse(ctx context.Context, in *MultiRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除應修課程
	DeleteRequiredCouse(ctx context.Context, in *SingleRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得應修課程並 lock
	GetRequiredCouseAndLock(ctx context.Context, in *SingleRequiredCouse, opts ...grpc.CallOption) (*MultiRequiredCouse, error)
	// unlock 應修課程
	UnlockRequiredCouse(ctx context.Context, in *MultiRequiredCouse, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得教育訓練承諾書簽約資料數量
	GetSignCount(ctx context.Context, in *SingleSign, opts ...grpc.CallOption) (*CountReply, error)
	//取得教育訓練承諾書簽約資料
	GetSign(ctx context.Context, in *SingleSign, opts ...grpc.CallOption) (*MultiSign, error)
	//新增教育訓練承諾書簽約資料
	AddSign(ctx context.Context, in *MultiSign, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改教育訓練承諾書簽約資料
	UpdateSign(ctx context.Context, in *MultiSign, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除教育訓練承諾書簽約資料
	DeleteSign(ctx context.Context, in *SingleSign, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得教育訓練承諾書簽約資料並 lock
	GetSignAndLock(ctx context.Context, in *SingleSign, opts ...grpc.CallOption) (*MultiSign, error)
	// unlock 教育訓練承諾書簽約資料
	UnlockSign(ctx context.Context, in *MultiSign, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得教育訓練簽核層級資料數量
	GetSignLevelCount(ctx context.Context, in *SingleSignLevel, opts ...grpc.CallOption) (*CountReply, error)
	//取得教育訓練簽核層級資料
	GetSignLevel(ctx context.Context, in *SingleSignLevel, opts ...grpc.CallOption) (*MultiSignLevel, error)
	//新增教育訓練簽核層級資料
	AddSignLevel(ctx context.Context, in *MultiSignLevel, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改教育訓練簽核層級資料
	UpdateSignLevel(ctx context.Context, in *MultiSignLevel, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除教育訓練簽核層級資料
	DeleteSignLevel(ctx context.Context, in *SingleSignLevel, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得教育訓練簽核層級資料並 lock
	GetSignLevelAndLock(ctx context.Context, in *SingleSignLevel, opts ...grpc.CallOption) (*MultiSignLevel, error)
	// unlock 教育訓練簽核層級資料
	UnlockSignLevel(ctx context.Context, in *MultiSignLevel, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得年度計畫序號數量
	GetPlanSerialCount(ctx context.Context, in *SinglePlanSerial, opts ...grpc.CallOption) (*CountReply, error)
	//取得年度計畫序號
	GetPlanSerial(ctx context.Context, in *SinglePlanSerial, opts ...grpc.CallOption) (*MultiPlanSerial, error)
	//新增年度計畫序號
	AddPlanSerial(ctx context.Context, in *MultiPlanSerial, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改年度計畫序號
	UpdatePlanSerial(ctx context.Context, in *MultiPlanSerial, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除年度計畫序號
	DeletePlanSerial(ctx context.Context, in *SinglePlanSerial, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得年度計畫序號並 lock
	GetPlanSerialAndLock(ctx context.Context, in *SinglePlanSerial, opts ...grpc.CallOption) (*MultiPlanSerial, error)
	// unlock 年度計畫序號
	UnlockPlanSerial(ctx context.Context, in *MultiPlanSerial, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得職能數量
	GetJobDutyCount(ctx context.Context, in *SingleJobDuty, opts ...grpc.CallOption) (*CountReply, error)
	//取得職能代號
	GetJobDuty(ctx context.Context, in *SingleJobDuty, opts ...grpc.CallOption) (*MultiJobDuty, error)
	//新增職能代號
	AddJobDuty(ctx context.Context, in *MultiJobDuty, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改職能代號
	UpdateJobDuty(ctx context.Context, in *MultiJobDuty, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除職能代號
	DeleteJobDuty(ctx context.Context, in *SingleJobDuty, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得職能代號並 lock
	GetJobDutyAndLock(ctx context.Context, in *SingleJobDuty, opts ...grpc.CallOption) (*MultiJobDuty, error)
	// unlock 職能代號
	UnlockJobDuty(ctx context.Context, in *MultiJobDuty, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得教育訓練計畫數量
	GetTrainingPlanCount(ctx context.Context, in *SingleTrainingPlan, opts ...grpc.CallOption) (*CountReply, error)
	//取得教育訓練計畫
	GetTrainingPlan(ctx context.Context, in *SingleTrainingPlan, opts ...grpc.CallOption) (*MultiTrainingPlan, error)
	//新增教育訓練計畫代
	AddTrainingPlan(ctx context.Context, in *MultiTrainingPlan, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改教育訓練計畫
	UpdateTrainingPlan(ctx context.Context, in *MultiTrainingPlan, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除教育訓練計畫
	DeleteTrainingPlan(ctx context.Context, in *SingleTrainingPlan, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得教育訓練計畫並 lock
	GetTrainingPlanAndLock(ctx context.Context, in *SingleTrainingPlan, opts ...grpc.CallOption) (*MultiTrainingPlan, error)
	// unlock 教育訓練計畫
	UnlockTrainingPlan(ctx context.Context, in *MultiTrainingPlan, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得特種作業人員數量
	GetSpecialOperatorCount(ctx context.Context, in *SingleSpecialOperator, opts ...grpc.CallOption) (*CountReply, error)
	//取得特種作業人員資料
	GetSpecialOperator(ctx context.Context, in *SingleSpecialOperator, opts ...grpc.CallOption) (*MultiSpecialOperator, error)
	//取得特種作業人員資料(不含離職人員)
	GetSpecialOperator1(ctx context.Context, in *SingleSpecialOperator, opts ...grpc.CallOption) (*MultiSpecialOperator, error)
	//新增特種作業人員
	AddSpecialOperator(ctx context.Context, in *MultiSpecialOperator, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改特種作業人員
	UpdateSpecialOperator(ctx context.Context, in *MultiSpecialOperator, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除特種作業人員
	DeleteSpecialOperator(ctx context.Context, in *SingleSpecialOperator, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得特種作業人員並 lock
	GetSpecialOperatorAndLock(ctx context.Context, in *SingleSpecialOperator, opts ...grpc.CallOption) (*MultiSpecialOperator, error)
	// unlock 特種作業人員
	UnlockSpecialOperator(ctx context.Context, in *MultiSpecialOperator, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得職能必修課程數量
	GetJobDutyRequiredCouseCount(ctx context.Context, in *SingleJobDutyRequiredCouse, opts ...grpc.CallOption) (*CountReply, error)
	//取得職能必修課程
	GetJobDutyRequiredCouse(ctx context.Context, in *SingleJobDutyRequiredCouse, opts ...grpc.CallOption) (*MultiJobDutyRequiredCouse, error)
	//新增職能必修課程
	AddJobDutyRequiredCouse(ctx context.Context, in *MultiJobDutyRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改職能必修課程
	UpdateJobDutyRequiredCouse(ctx context.Context, in *MultiJobDutyRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除職能必修課程
	DeleteJobDutyRequiredCouse(ctx context.Context, in *SingleJobDutyRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得職能必修課程並 lock
	GetJobDutyRequiredCouseAndLock(ctx context.Context, in *SingleJobDutyRequiredCouse, opts ...grpc.CallOption) (*MultiJobDutyRequiredCouse, error)
	// unlock 職能必修課程
	UnlockJobDutyRequiredCouse(ctx context.Context, in *MultiJobDutyRequiredCouse, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得培訓費用數量
	GetTrainingFeesCount(ctx context.Context, in *SingleTrainingFees, opts ...grpc.CallOption) (*CountReply, error)
	//取得培訓費用資料
	GetTrainingFees(ctx context.Context, in *SingleTrainingFees, opts ...grpc.CallOption) (*MultiTrainingFees, error)
	//新增培訓費用資料
	AddTrainingFees(ctx context.Context, in *MultiTrainingFees, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改培訓費用資料
	UpdateTrainingFees(ctx context.Context, in *MultiTrainingFees, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除培訓費用資料
	DeleteTrainingFees(ctx context.Context, in *SingleTrainingFees, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得培訓費用並 lock
	GetTrainingFeesAndLock(ctx context.Context, in *SingleTrainingFees, opts ...grpc.CallOption) (*MultiTrainingFees, error)
	// unlock 培訓費用
	UnlockTrainingFees(ctx context.Context, in *MultiTrainingFees, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得學習資料數量
	GetLearnCount(ctx context.Context, in *SingleLearn, opts ...grpc.CallOption) (*CountReply, error)
	//取得學習資料
	GetLearn(ctx context.Context, in *SingleLearn, opts ...grpc.CallOption) (*MultiLearn, error)
	//新增學習資料
	AddLearn(ctx context.Context, in *MultiLearn, opts ...grpc.CallOption) (*AffectedReply, error)
	//新增學習資料1
	AddLearn1(ctx context.Context, in *MultiLearn, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改學習資料
	UpdateLearn(ctx context.Context, in *MultiLearn, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改學習資料
	UpdateLearnUnitno(ctx context.Context, in *MultiLearn, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除學習資料
	DeleteLearn(ctx context.Context, in *SingleLearn, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得學習資料並 lock
	GetLearnAndLock(ctx context.Context, in *SingleLearn, opts ...grpc.CallOption) (*MultiLearn, error)
	// unlock 學習資料
	UnlockLearn(ctx context.Context, in *MultiLearn, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得開課資料數量
	GetLearnCouseCount(ctx context.Context, in *SingleLearnCouse, opts ...grpc.CallOption) (*CountReply, error)
	//取得開課資料最大流水號
	GetLearnCouseSerno(ctx context.Context, in *SingleLearnCouse, opts ...grpc.CallOption) (*SernoReply, error)
	//取得開課資料
	GetLearnCouse(ctx context.Context, in *SingleLearnCouse, opts ...grpc.CallOption) (*MultiLearnCouse, error)
	//新增開課資料
	AddLearnCouse(ctx context.Context, in *MultiLearnCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//新增開課資料1
	AddLearnCouse1(ctx context.Context, in *MultiLearnCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改開課資料
	UpdateLearnCouse(ctx context.Context, in *MultiLearnCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除開課資料
	DeleteLearnCouse(ctx context.Context, in *SingleLearnCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得開課資料並 lock
	GetLearnCouseAndLock(ctx context.Context, in *SingleLearnCouse, opts ...grpc.CallOption) (*MultiLearnCouse, error)
	// unlock 開課資料
	UnlockLearnCouse(ctx context.Context, in *MultiLearnCouse, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得教育訓練教材數量
	GetTrainingMaterialsCount(ctx context.Context, in *SingleTrainingMaterials, opts ...grpc.CallOption) (*CountReply, error)
	//取得教育訓練教材資料
	GetTrainingMaterials(ctx context.Context, in *SingleTrainingMaterials, opts ...grpc.CallOption) (*MultiTrainingMaterials, error)
	//取得教育訓練教材資料
	GetTrainingMaterialsSerno(ctx context.Context, in *SingleTrainingMaterials, opts ...grpc.CallOption) (*SernoReply, error)
	//新增教育訓練教材資料
	AddTrainingMaterials(ctx context.Context, in *MultiTrainingMaterials, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改教育訓練教材資料
	UpdateTrainingMaterials(ctx context.Context, in *MultiTrainingMaterials, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除教育訓練教材資料
	DeleteTrainingMaterials(ctx context.Context, in *SingleTrainingMaterials, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得教育訓練教材資料並 lock
	GetTrainingMaterialsAndLock(ctx context.Context, in *SingleTrainingMaterials, opts ...grpc.CallOption) (*MultiTrainingMaterials, error)
	// unlock 教育訓練教材資料
	UnlockTrainingMaterials(ctx context.Context, in *MultiTrainingMaterials, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得職能崗位數量
	GetJobDutyPostCount(ctx context.Context, in *SingleJobDutyPost, opts ...grpc.CallOption) (*CountReply, error)
	//取得職能崗位資料
	GetJobDutyPost(ctx context.Context, in *SingleJobDutyPost, opts ...grpc.CallOption) (*MultiJobDutyPost, error)
	//新增職能崗位資料
	AddJobDutyPost(ctx context.Context, in *MultiJobDutyPost, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改職能崗位資料
	UpdateJobDutyPost(ctx context.Context, in *MultiJobDutyPost, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除職能崗位資料
	DeleteJobDutyPost(ctx context.Context, in *SingleJobDutyPost, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得職能崗位並 lock
	GetJobDutyPostAndLock(ctx context.Context, in *SingleJobDutyPost, opts ...grpc.CallOption) (*MultiJobDutyPost, error)
	// unlock 職能崗位
	UnlockJobDutyPost(ctx context.Context, in *MultiJobDutyPost, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得證件管理數量
	GetCredentialsManagementCount(ctx context.Context, in *SingleCredentialsManagement, opts ...grpc.CallOption) (*CountReply, error)
	//取得證件管理資料
	GetCredentialsManagement(ctx context.Context, in *SingleCredentialsManagement, opts ...grpc.CallOption) (*MultiCredentialsManagement, error)
	//新增證件管理資料
	AddCredentialsManagement(ctx context.Context, in *MultiCredentialsManagement, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改證件管理資料
	UpdateCredentialsManagement(ctx context.Context, in *MultiCredentialsManagement, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除證件管理資料
	DeleteCredentialsManagement(ctx context.Context, in *SingleCredentialsManagement, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得證件管理並 lock
	GetCredentialsManagementAndLock(ctx context.Context, in *SingleCredentialsManagement, opts ...grpc.CallOption) (*MultiCredentialsManagement, error)
	// unlock 證件管理
	UnlockCredentialsManagement(ctx context.Context, in *MultiCredentialsManagement, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得教育訓練基准檔案數量
	GetJobRequiredCouseCount(ctx context.Context, in *SingleJobRequiredCouse, opts ...grpc.CallOption) (*CountReply, error)
	//取得教育訓練基准檔案資料
	GetJobRequiredCouse(ctx context.Context, in *SingleJobRequiredCouse, opts ...grpc.CallOption) (*MultiJobRequiredCouse, error)
	//新增教育訓練基准檔案資料
	AddJobRequiredCouse(ctx context.Context, in *MultiJobRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改教育訓練基准檔案資料
	UpdateJobRequiredCouse(ctx context.Context, in *MultiJobRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除教育訓練基准檔案資料
	DeleteJobRequiredCouse(ctx context.Context, in *SingleJobRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得教育訓練基准檔案並 lock
	GetJobRequiredCouseAndLock(ctx context.Context, in *SingleJobRequiredCouse, opts ...grpc.CallOption) (*MultiJobRequiredCouse, error)
	// unlock 教育訓練基准檔案
	UnlockJobRequiredCouse(ctx context.Context, in *MultiJobRequiredCouse, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得職稱說明數量
	GetJobTitleCount(ctx context.Context, in *SingleJobTitle, opts ...grpc.CallOption) (*CountReply, error)
	//取得職稱說明資料
	GetJobTitle(ctx context.Context, in *SingleJobTitle, opts ...grpc.CallOption) (*MultiJobTitle, error)
	//新增職稱說明資料
	AddJobTitle(ctx context.Context, in *MultiJobTitle, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改職稱說明資料
	UpdateJobTitle(ctx context.Context, in *MultiJobTitle, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除職稱說明資料
	DeleteJobTitle(ctx context.Context, in *SingleJobTitle, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得職稱說明並 lock
	GetJobTitleAndLock(ctx context.Context, in *SingleJobTitle, opts ...grpc.CallOption) (*MultiJobTitle, error)
	// unlock 職稱說明
	UnlockJobTitle(ctx context.Context, in *MultiJobTitle, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得上崗資格數量
	GetWorkQualificationCount(ctx context.Context, in *SingleWorkQualification, opts ...grpc.CallOption) (*CountReply, error)
	//取得上崗資格資料
	GetWorkQualification(ctx context.Context, in *SingleWorkQualification, opts ...grpc.CallOption) (*MultiWorkQualification, error)
	//新增上崗資格資料
	AddWorkQualification(ctx context.Context, in *MultiWorkQualification, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改上崗資格資料
	UpdateWorkQualification(ctx context.Context, in *MultiWorkQualification, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除上崗資格資料
	DeleteWorkQualification(ctx context.Context, in *SingleWorkQualification, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得上崗資格並 lock
	GetWorkQualificationAndLock(ctx context.Context, in *SingleWorkQualification, opts ...grpc.CallOption) (*MultiWorkQualification, error)
	// unlock 上崗資格
	UnlockWorkQualification(ctx context.Context, in *MultiWorkQualification, opts ...grpc.CallOption) (*empty.Empty, error)
	//取得人事主檔之其他代號
	GetEmployeeOtherCode1(ctx context.Context, in *EmployeeMaskRequest, opts ...grpc.CallOption) (*EmployeeOtherCode, error)
	//取得員工資料
	GetEmployee(ctx context.Context, in *EmployeeMaskRequest, opts ...grpc.CallOption) (*Employees, error)
	//取得員工資料
	GetEmployees(ctx context.Context, in *SingleEmployee, opts ...grpc.CallOption) (*SingleEmployee, error)
	//取得設定檔說明
	GetSeccodCodsc(ctx context.Context, in *SingleSeccod, opts ...grpc.CallOption) (*CodscReply, error)
	//取得部門說明
	GetDepartmentDesc(ctx context.Context, in *DepartmentRequest, opts ...grpc.CallOption) (*CodscReply, error)
	//以廠別取得全部部門
	GetDepClassGroup(ctx context.Context, in *EachFactoryRequest, opts ...grpc.CallOption) (*EachFactoryReply, error)
	//取得員工資料 for 教育訓練紀錄表
	GetEmployeeForTrainingRecord(ctx context.Context, in *EmployeeMaskRequest, opts ...grpc.CallOption) (*EmployeeForTrainingRecord, error)
	//取得教育訓練紀錄表
	GetTrainingReport(ctx context.Context, in *TrainingRecordRequest, opts ...grpc.CallOption) (*MultiTrainingReport, error)
	//取得教育訓練紀錄表(一個SQL)
	GetTrainingRecordWithOneSQL(ctx context.Context, in *TrainingRecordRequest, opts ...grpc.CallOption) (*TrainingRecord, error)
	//取得教育訓練紀錄表(多個SQL)
	GetTrainingRecordWithMultiSQL(ctx context.Context, in *TrainingRecordRequest, opts ...grpc.CallOption) (*TrainingRecord, error)
	//取得教育訓練成績表
	GetTrainingScoreReport(ctx context.Context, in *TrainingRecordRequest, opts ...grpc.CallOption) (*MultiTrainingScoreReport, error)
	//取得彈性工時資料
	GetFlexibleWorkHour(ctx context.Context, in *FlexibleWorkHourRequest, opts ...grpc.CallOption) (*MultiFlexibleWorkHour, error)
	//新增彈性工時資料
	AddFlexibleWorkHour(ctx context.Context, in *FlexibleWorkHourRequest, opts ...grpc.CallOption) (*AffectedReply, error)
	//修改彈性工時資料
	UpdateFlexibleWorkHour(ctx context.Context, in *FlexibleWorkHourRequest, opts ...grpc.CallOption) (*AffectedReply, error)
	//刪除彈性工時資料
	DeleteFlexibleWorkHour(ctx context.Context, in *FlexibleWorkHourRequest, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得彈性工時資料並lock
	GetFlexibleWorkHourAndLock(ctx context.Context, in *FlexibleWorkHourRequest, opts ...grpc.CallOption) (*MultiFlexibleWorkHour, error)
	// unlock彈性工時資料
	FlexibleWorkHourUnlock(ctx context.Context, in *FlexibleWorkHourRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// LOAD 範例
	LoadJob(ctx context.Context, in *File, opts ...grpc.CallOption) (*AffectedReply, error)
	// UNLOAD 範例
	UnloadJob(ctx context.Context, in *SingleJob, opts ...grpc.CallOption) (*File, error)
	UnloadJob1(ctx context.Context, in *SingleJob, opts ...grpc.CallOption) (*File, error)
	UnloadJob2(ctx context.Context, in *SingleJob, opts ...grpc.CallOption) (*File, error)
	//人員列表
	ListPermas(ctx context.Context, in *ListPermasRequest, opts ...grpc.CallOption) (*ListPermasReply, error)
}

type pERClient struct {
	cc *grpc.ClientConn
}

func NewPERClient(cc *grpc.ClientConn) PERClient {
	return &pERClient{cc}
}

func (c *pERClient) GetJobCount(ctx context.Context, in *SingleJob, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJob(ctx context.Context, in *SingleJob, opts ...grpc.CallOption) (*MultiJob, error) {
	out := new(MultiJob)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddJob(ctx context.Context, in *MultiJob, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateJob(ctx context.Context, in *MultiJob, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteJob(ctx context.Context, in *SingleJob, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobAndLock(ctx context.Context, in *SingleJob, opts ...grpc.CallOption) (*MultiJob, error) {
	out := new(MultiJob)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockJob(ctx context.Context, in *MultiJob, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetQualifiedLectorCount(ctx context.Context, in *SingleQualifiedLector, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetQualifiedLectorCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetQualifiedLector(ctx context.Context, in *QualifiedLectorRequest, opts ...grpc.CallOption) (*MultiQualifiedLector, error) {
	out := new(MultiQualifiedLector)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetQualifiedLector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddQualifiedLector(ctx context.Context, in *MultiQualifiedLector, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddQualifiedLector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateQualifiedLector(ctx context.Context, in *MultiQualifiedLector, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateQualifiedLector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteQualifiedLector(ctx context.Context, in *SingleQualifiedLector, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteQualifiedLector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetQualifiedLectorAndLock(ctx context.Context, in *QualifiedLectorRequest, opts ...grpc.CallOption) (*MultiQualifiedLector, error) {
	out := new(MultiQualifiedLector)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetQualifiedLectorAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockQualifiedLector(ctx context.Context, in *MultiQualifiedLector, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockQualifiedLector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTeachingUnitCount(ctx context.Context, in *SingleTeachingUnit, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTeachingUnitCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTeachingUnitName(ctx context.Context, in *SingleTeachingUnit, opts ...grpc.CallOption) (*TeachingUnitName, error) {
	out := new(TeachingUnitName)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTeachingUnitName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTeachingUnit(ctx context.Context, in *SingleTeachingUnit, opts ...grpc.CallOption) (*MultiTeachingUnit, error) {
	out := new(MultiTeachingUnit)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTeachingUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddTeachingUnit(ctx context.Context, in *MultiTeachingUnit, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddTeachingUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateTeachingUnit(ctx context.Context, in *MultiTeachingUnit, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateTeachingUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteTeachingUnit(ctx context.Context, in *SingleTeachingUnit, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteTeachingUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTeachingUnitAndLock(ctx context.Context, in *SingleTeachingUnit, opts ...grpc.CallOption) (*MultiTeachingUnit, error) {
	out := new(MultiTeachingUnit)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTeachingUnitAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockTeachingUnit(ctx context.Context, in *MultiTeachingUnit, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockTeachingUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetMediumSortCouseCount(ctx context.Context, in *SingleMediumSortCouse, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetMediumSortCouseCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetMediumSortCouseName(ctx context.Context, in *SingleMediumSortCouse, opts ...grpc.CallOption) (*MediumSortCouseName, error) {
	out := new(MediumSortCouseName)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetMediumSortCouseName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetMediumSortCouse(ctx context.Context, in *SingleMediumSortCouse, opts ...grpc.CallOption) (*MultiMediumSortCouse, error) {
	out := new(MultiMediumSortCouse)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetMediumSortCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddMediumSortCouse(ctx context.Context, in *MultiMediumSortCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddMediumSortCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateMediumSortCouse(ctx context.Context, in *MultiMediumSortCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateMediumSortCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteMediumSortCouse(ctx context.Context, in *SingleMediumSortCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteMediumSortCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetMediumSortCouseAndLock(ctx context.Context, in *SingleMediumSortCouse, opts ...grpc.CallOption) (*MultiMediumSortCouse, error) {
	out := new(MultiMediumSortCouse)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetMediumSortCouseAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockMediumSortCouse(ctx context.Context, in *MultiMediumSortCouse, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockMediumSortCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetCouseCount(ctx context.Context, in *SingleCouse, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetCouseCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetCouseSerno(ctx context.Context, in *SingleCouse, opts ...grpc.CallOption) (*SernoReply, error) {
	out := new(SernoReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetCouseSerno", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetCouse(ctx context.Context, in *SingleCouse, opts ...grpc.CallOption) (*MultiCouse, error) {
	out := new(MultiCouse)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddCouse(ctx context.Context, in *MultiCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateCouse(ctx context.Context, in *MultiCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteCouse(ctx context.Context, in *SingleCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetCouseAndLock(ctx context.Context, in *SingleCouse, opts ...grpc.CallOption) (*MultiCouse, error) {
	out := new(MultiCouse)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetCouseAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockCouse(ctx context.Context, in *MultiCouse, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetStudyCount(ctx context.Context, in *SingleStudy, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetStudyCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetStudySerno(ctx context.Context, in *SingleStudy, opts ...grpc.CallOption) (*MultiStudy, error) {
	out := new(MultiStudy)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetStudySerno", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetStudy(ctx context.Context, in *SingleStudy, opts ...grpc.CallOption) (*MultiStudy, error) {
	out := new(MultiStudy)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddStudy(ctx context.Context, in *MultiStudy, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateStudy(ctx context.Context, in *MultiStudy, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateStudy1(ctx context.Context, in *MultiStudy, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateStudy1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteStudy(ctx context.Context, in *SingleStudy, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetStudyAndLock(ctx context.Context, in *SingleStudy, opts ...grpc.CallOption) (*MultiStudy, error) {
	out := new(MultiStudy)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetStudyAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockStudy(ctx context.Context, in *MultiStudy, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetRequiredCouseCount(ctx context.Context, in *SingleRequiredCouse, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetRequiredCouseCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetRequiredCouse(ctx context.Context, in *SingleRequiredCouse, opts ...grpc.CallOption) (*MultiRequiredCouse, error) {
	out := new(MultiRequiredCouse)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddRequiredCouse(ctx context.Context, in *MultiRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateRequiredCouse(ctx context.Context, in *MultiRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteRequiredCouse(ctx context.Context, in *SingleRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetRequiredCouseAndLock(ctx context.Context, in *SingleRequiredCouse, opts ...grpc.CallOption) (*MultiRequiredCouse, error) {
	out := new(MultiRequiredCouse)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetRequiredCouseAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockRequiredCouse(ctx context.Context, in *MultiRequiredCouse, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetSignCount(ctx context.Context, in *SingleSign, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetSignCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetSign(ctx context.Context, in *SingleSign, opts ...grpc.CallOption) (*MultiSign, error) {
	out := new(MultiSign)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddSign(ctx context.Context, in *MultiSign, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateSign(ctx context.Context, in *MultiSign, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteSign(ctx context.Context, in *SingleSign, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetSignAndLock(ctx context.Context, in *SingleSign, opts ...grpc.CallOption) (*MultiSign, error) {
	out := new(MultiSign)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetSignAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockSign(ctx context.Context, in *MultiSign, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetSignLevelCount(ctx context.Context, in *SingleSignLevel, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetSignLevelCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetSignLevel(ctx context.Context, in *SingleSignLevel, opts ...grpc.CallOption) (*MultiSignLevel, error) {
	out := new(MultiSignLevel)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetSignLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddSignLevel(ctx context.Context, in *MultiSignLevel, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddSignLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateSignLevel(ctx context.Context, in *MultiSignLevel, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateSignLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteSignLevel(ctx context.Context, in *SingleSignLevel, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteSignLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetSignLevelAndLock(ctx context.Context, in *SingleSignLevel, opts ...grpc.CallOption) (*MultiSignLevel, error) {
	out := new(MultiSignLevel)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetSignLevelAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockSignLevel(ctx context.Context, in *MultiSignLevel, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockSignLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetPlanSerialCount(ctx context.Context, in *SinglePlanSerial, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetPlanSerialCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetPlanSerial(ctx context.Context, in *SinglePlanSerial, opts ...grpc.CallOption) (*MultiPlanSerial, error) {
	out := new(MultiPlanSerial)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetPlanSerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddPlanSerial(ctx context.Context, in *MultiPlanSerial, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddPlanSerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdatePlanSerial(ctx context.Context, in *MultiPlanSerial, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdatePlanSerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeletePlanSerial(ctx context.Context, in *SinglePlanSerial, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeletePlanSerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetPlanSerialAndLock(ctx context.Context, in *SinglePlanSerial, opts ...grpc.CallOption) (*MultiPlanSerial, error) {
	out := new(MultiPlanSerial)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetPlanSerialAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockPlanSerial(ctx context.Context, in *MultiPlanSerial, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockPlanSerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobDutyCount(ctx context.Context, in *SingleJobDuty, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobDutyCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobDuty(ctx context.Context, in *SingleJobDuty, opts ...grpc.CallOption) (*MultiJobDuty, error) {
	out := new(MultiJobDuty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobDuty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddJobDuty(ctx context.Context, in *MultiJobDuty, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddJobDuty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateJobDuty(ctx context.Context, in *MultiJobDuty, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateJobDuty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteJobDuty(ctx context.Context, in *SingleJobDuty, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteJobDuty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobDutyAndLock(ctx context.Context, in *SingleJobDuty, opts ...grpc.CallOption) (*MultiJobDuty, error) {
	out := new(MultiJobDuty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobDutyAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockJobDuty(ctx context.Context, in *MultiJobDuty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockJobDuty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTrainingPlanCount(ctx context.Context, in *SingleTrainingPlan, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTrainingPlanCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTrainingPlan(ctx context.Context, in *SingleTrainingPlan, opts ...grpc.CallOption) (*MultiTrainingPlan, error) {
	out := new(MultiTrainingPlan)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTrainingPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddTrainingPlan(ctx context.Context, in *MultiTrainingPlan, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddTrainingPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateTrainingPlan(ctx context.Context, in *MultiTrainingPlan, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateTrainingPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteTrainingPlan(ctx context.Context, in *SingleTrainingPlan, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteTrainingPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTrainingPlanAndLock(ctx context.Context, in *SingleTrainingPlan, opts ...grpc.CallOption) (*MultiTrainingPlan, error) {
	out := new(MultiTrainingPlan)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTrainingPlanAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockTrainingPlan(ctx context.Context, in *MultiTrainingPlan, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockTrainingPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetSpecialOperatorCount(ctx context.Context, in *SingleSpecialOperator, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetSpecialOperatorCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetSpecialOperator(ctx context.Context, in *SingleSpecialOperator, opts ...grpc.CallOption) (*MultiSpecialOperator, error) {
	out := new(MultiSpecialOperator)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetSpecialOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetSpecialOperator1(ctx context.Context, in *SingleSpecialOperator, opts ...grpc.CallOption) (*MultiSpecialOperator, error) {
	out := new(MultiSpecialOperator)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetSpecialOperator1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddSpecialOperator(ctx context.Context, in *MultiSpecialOperator, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddSpecialOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateSpecialOperator(ctx context.Context, in *MultiSpecialOperator, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateSpecialOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteSpecialOperator(ctx context.Context, in *SingleSpecialOperator, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteSpecialOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetSpecialOperatorAndLock(ctx context.Context, in *SingleSpecialOperator, opts ...grpc.CallOption) (*MultiSpecialOperator, error) {
	out := new(MultiSpecialOperator)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetSpecialOperatorAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockSpecialOperator(ctx context.Context, in *MultiSpecialOperator, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockSpecialOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobDutyRequiredCouseCount(ctx context.Context, in *SingleJobDutyRequiredCouse, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobDutyRequiredCouseCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobDutyRequiredCouse(ctx context.Context, in *SingleJobDutyRequiredCouse, opts ...grpc.CallOption) (*MultiJobDutyRequiredCouse, error) {
	out := new(MultiJobDutyRequiredCouse)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobDutyRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddJobDutyRequiredCouse(ctx context.Context, in *MultiJobDutyRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddJobDutyRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateJobDutyRequiredCouse(ctx context.Context, in *MultiJobDutyRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateJobDutyRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteJobDutyRequiredCouse(ctx context.Context, in *SingleJobDutyRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteJobDutyRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobDutyRequiredCouseAndLock(ctx context.Context, in *SingleJobDutyRequiredCouse, opts ...grpc.CallOption) (*MultiJobDutyRequiredCouse, error) {
	out := new(MultiJobDutyRequiredCouse)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobDutyRequiredCouseAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockJobDutyRequiredCouse(ctx context.Context, in *MultiJobDutyRequiredCouse, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockJobDutyRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTrainingFeesCount(ctx context.Context, in *SingleTrainingFees, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTrainingFeesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTrainingFees(ctx context.Context, in *SingleTrainingFees, opts ...grpc.CallOption) (*MultiTrainingFees, error) {
	out := new(MultiTrainingFees)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTrainingFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddTrainingFees(ctx context.Context, in *MultiTrainingFees, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddTrainingFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateTrainingFees(ctx context.Context, in *MultiTrainingFees, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateTrainingFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteTrainingFees(ctx context.Context, in *SingleTrainingFees, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteTrainingFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTrainingFeesAndLock(ctx context.Context, in *SingleTrainingFees, opts ...grpc.CallOption) (*MultiTrainingFees, error) {
	out := new(MultiTrainingFees)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTrainingFeesAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockTrainingFees(ctx context.Context, in *MultiTrainingFees, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockTrainingFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetLearnCount(ctx context.Context, in *SingleLearn, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetLearnCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetLearn(ctx context.Context, in *SingleLearn, opts ...grpc.CallOption) (*MultiLearn, error) {
	out := new(MultiLearn)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetLearn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddLearn(ctx context.Context, in *MultiLearn, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddLearn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddLearn1(ctx context.Context, in *MultiLearn, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddLearn1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateLearn(ctx context.Context, in *MultiLearn, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateLearn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateLearnUnitno(ctx context.Context, in *MultiLearn, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateLearnUnitno", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteLearn(ctx context.Context, in *SingleLearn, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteLearn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetLearnAndLock(ctx context.Context, in *SingleLearn, opts ...grpc.CallOption) (*MultiLearn, error) {
	out := new(MultiLearn)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetLearnAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockLearn(ctx context.Context, in *MultiLearn, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockLearn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetLearnCouseCount(ctx context.Context, in *SingleLearnCouse, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetLearnCouseCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetLearnCouseSerno(ctx context.Context, in *SingleLearnCouse, opts ...grpc.CallOption) (*SernoReply, error) {
	out := new(SernoReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetLearnCouseSerno", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetLearnCouse(ctx context.Context, in *SingleLearnCouse, opts ...grpc.CallOption) (*MultiLearnCouse, error) {
	out := new(MultiLearnCouse)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetLearnCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddLearnCouse(ctx context.Context, in *MultiLearnCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddLearnCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddLearnCouse1(ctx context.Context, in *MultiLearnCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddLearnCouse1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateLearnCouse(ctx context.Context, in *MultiLearnCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateLearnCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteLearnCouse(ctx context.Context, in *SingleLearnCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteLearnCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetLearnCouseAndLock(ctx context.Context, in *SingleLearnCouse, opts ...grpc.CallOption) (*MultiLearnCouse, error) {
	out := new(MultiLearnCouse)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetLearnCouseAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockLearnCouse(ctx context.Context, in *MultiLearnCouse, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockLearnCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTrainingMaterialsCount(ctx context.Context, in *SingleTrainingMaterials, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTrainingMaterialsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTrainingMaterials(ctx context.Context, in *SingleTrainingMaterials, opts ...grpc.CallOption) (*MultiTrainingMaterials, error) {
	out := new(MultiTrainingMaterials)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTrainingMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTrainingMaterialsSerno(ctx context.Context, in *SingleTrainingMaterials, opts ...grpc.CallOption) (*SernoReply, error) {
	out := new(SernoReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTrainingMaterialsSerno", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddTrainingMaterials(ctx context.Context, in *MultiTrainingMaterials, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddTrainingMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateTrainingMaterials(ctx context.Context, in *MultiTrainingMaterials, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateTrainingMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteTrainingMaterials(ctx context.Context, in *SingleTrainingMaterials, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteTrainingMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTrainingMaterialsAndLock(ctx context.Context, in *SingleTrainingMaterials, opts ...grpc.CallOption) (*MultiTrainingMaterials, error) {
	out := new(MultiTrainingMaterials)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTrainingMaterialsAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockTrainingMaterials(ctx context.Context, in *MultiTrainingMaterials, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockTrainingMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobDutyPostCount(ctx context.Context, in *SingleJobDutyPost, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobDutyPostCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobDutyPost(ctx context.Context, in *SingleJobDutyPost, opts ...grpc.CallOption) (*MultiJobDutyPost, error) {
	out := new(MultiJobDutyPost)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobDutyPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddJobDutyPost(ctx context.Context, in *MultiJobDutyPost, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddJobDutyPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateJobDutyPost(ctx context.Context, in *MultiJobDutyPost, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateJobDutyPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteJobDutyPost(ctx context.Context, in *SingleJobDutyPost, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteJobDutyPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobDutyPostAndLock(ctx context.Context, in *SingleJobDutyPost, opts ...grpc.CallOption) (*MultiJobDutyPost, error) {
	out := new(MultiJobDutyPost)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobDutyPostAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockJobDutyPost(ctx context.Context, in *MultiJobDutyPost, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockJobDutyPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetCredentialsManagementCount(ctx context.Context, in *SingleCredentialsManagement, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetCredentialsManagementCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetCredentialsManagement(ctx context.Context, in *SingleCredentialsManagement, opts ...grpc.CallOption) (*MultiCredentialsManagement, error) {
	out := new(MultiCredentialsManagement)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetCredentialsManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddCredentialsManagement(ctx context.Context, in *MultiCredentialsManagement, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddCredentialsManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateCredentialsManagement(ctx context.Context, in *MultiCredentialsManagement, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateCredentialsManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteCredentialsManagement(ctx context.Context, in *SingleCredentialsManagement, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteCredentialsManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetCredentialsManagementAndLock(ctx context.Context, in *SingleCredentialsManagement, opts ...grpc.CallOption) (*MultiCredentialsManagement, error) {
	out := new(MultiCredentialsManagement)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetCredentialsManagementAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockCredentialsManagement(ctx context.Context, in *MultiCredentialsManagement, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockCredentialsManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobRequiredCouseCount(ctx context.Context, in *SingleJobRequiredCouse, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobRequiredCouseCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobRequiredCouse(ctx context.Context, in *SingleJobRequiredCouse, opts ...grpc.CallOption) (*MultiJobRequiredCouse, error) {
	out := new(MultiJobRequiredCouse)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddJobRequiredCouse(ctx context.Context, in *MultiJobRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddJobRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateJobRequiredCouse(ctx context.Context, in *MultiJobRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateJobRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteJobRequiredCouse(ctx context.Context, in *SingleJobRequiredCouse, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteJobRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobRequiredCouseAndLock(ctx context.Context, in *SingleJobRequiredCouse, opts ...grpc.CallOption) (*MultiJobRequiredCouse, error) {
	out := new(MultiJobRequiredCouse)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobRequiredCouseAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockJobRequiredCouse(ctx context.Context, in *MultiJobRequiredCouse, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockJobRequiredCouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobTitleCount(ctx context.Context, in *SingleJobTitle, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobTitleCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobTitle(ctx context.Context, in *SingleJobTitle, opts ...grpc.CallOption) (*MultiJobTitle, error) {
	out := new(MultiJobTitle)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddJobTitle(ctx context.Context, in *MultiJobTitle, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddJobTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateJobTitle(ctx context.Context, in *MultiJobTitle, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateJobTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteJobTitle(ctx context.Context, in *SingleJobTitle, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteJobTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetJobTitleAndLock(ctx context.Context, in *SingleJobTitle, opts ...grpc.CallOption) (*MultiJobTitle, error) {
	out := new(MultiJobTitle)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetJobTitleAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockJobTitle(ctx context.Context, in *MultiJobTitle, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockJobTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetWorkQualificationCount(ctx context.Context, in *SingleWorkQualification, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetWorkQualificationCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetWorkQualification(ctx context.Context, in *SingleWorkQualification, opts ...grpc.CallOption) (*MultiWorkQualification, error) {
	out := new(MultiWorkQualification)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetWorkQualification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddWorkQualification(ctx context.Context, in *MultiWorkQualification, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddWorkQualification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateWorkQualification(ctx context.Context, in *MultiWorkQualification, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateWorkQualification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteWorkQualification(ctx context.Context, in *SingleWorkQualification, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteWorkQualification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetWorkQualificationAndLock(ctx context.Context, in *SingleWorkQualification, opts ...grpc.CallOption) (*MultiWorkQualification, error) {
	out := new(MultiWorkQualification)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetWorkQualificationAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnlockWorkQualification(ctx context.Context, in *MultiWorkQualification, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnlockWorkQualification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetEmployeeOtherCode1(ctx context.Context, in *EmployeeMaskRequest, opts ...grpc.CallOption) (*EmployeeOtherCode, error) {
	out := new(EmployeeOtherCode)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetEmployeeOtherCode1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetEmployee(ctx context.Context, in *EmployeeMaskRequest, opts ...grpc.CallOption) (*Employees, error) {
	out := new(Employees)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetEmployees(ctx context.Context, in *SingleEmployee, opts ...grpc.CallOption) (*SingleEmployee, error) {
	out := new(SingleEmployee)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetEmployees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetSeccodCodsc(ctx context.Context, in *SingleSeccod, opts ...grpc.CallOption) (*CodscReply, error) {
	out := new(CodscReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetSeccodCodsc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetDepartmentDesc(ctx context.Context, in *DepartmentRequest, opts ...grpc.CallOption) (*CodscReply, error) {
	out := new(CodscReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetDepartmentDesc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetDepClassGroup(ctx context.Context, in *EachFactoryRequest, opts ...grpc.CallOption) (*EachFactoryReply, error) {
	out := new(EachFactoryReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetDepClassGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetEmployeeForTrainingRecord(ctx context.Context, in *EmployeeMaskRequest, opts ...grpc.CallOption) (*EmployeeForTrainingRecord, error) {
	out := new(EmployeeForTrainingRecord)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetEmployeeForTrainingRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTrainingReport(ctx context.Context, in *TrainingRecordRequest, opts ...grpc.CallOption) (*MultiTrainingReport, error) {
	out := new(MultiTrainingReport)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTrainingReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTrainingRecordWithOneSQL(ctx context.Context, in *TrainingRecordRequest, opts ...grpc.CallOption) (*TrainingRecord, error) {
	out := new(TrainingRecord)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTrainingRecordWithOneSQL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTrainingRecordWithMultiSQL(ctx context.Context, in *TrainingRecordRequest, opts ...grpc.CallOption) (*TrainingRecord, error) {
	out := new(TrainingRecord)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTrainingRecordWithMultiSQL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetTrainingScoreReport(ctx context.Context, in *TrainingRecordRequest, opts ...grpc.CallOption) (*MultiTrainingScoreReport, error) {
	out := new(MultiTrainingScoreReport)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetTrainingScoreReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetFlexibleWorkHour(ctx context.Context, in *FlexibleWorkHourRequest, opts ...grpc.CallOption) (*MultiFlexibleWorkHour, error) {
	out := new(MultiFlexibleWorkHour)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetFlexibleWorkHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) AddFlexibleWorkHour(ctx context.Context, in *FlexibleWorkHourRequest, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/AddFlexibleWorkHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UpdateFlexibleWorkHour(ctx context.Context, in *FlexibleWorkHourRequest, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UpdateFlexibleWorkHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) DeleteFlexibleWorkHour(ctx context.Context, in *FlexibleWorkHourRequest, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/DeleteFlexibleWorkHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) GetFlexibleWorkHourAndLock(ctx context.Context, in *FlexibleWorkHourRequest, opts ...grpc.CallOption) (*MultiFlexibleWorkHour, error) {
	out := new(MultiFlexibleWorkHour)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/GetFlexibleWorkHourAndLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) FlexibleWorkHourUnlock(ctx context.Context, in *FlexibleWorkHourRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/FlexibleWorkHourUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) LoadJob(ctx context.Context, in *File, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/LoadJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnloadJob(ctx context.Context, in *SingleJob, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnloadJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnloadJob1(ctx context.Context, in *SingleJob, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnloadJob1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) UnloadJob2(ctx context.Context, in *SingleJob, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/UnloadJob2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pERClient) ListPermas(ctx context.Context, in *ListPermasRequest, opts ...grpc.CallOption) (*ListPermasReply, error) {
	out := new(ListPermasReply)
	err := c.cc.Invoke(ctx, "/proto.dm.per.PER/ListPermas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PERServer is the server API for PER service.
type PERServer interface {
	//取得職能數量
	GetJobCount(context.Context, *SingleJob) (*CountReply, error)
	//取得職能代號
	GetJob(context.Context, *SingleJob) (*MultiJob, error)
	//新增職能代號
	AddJob(context.Context, *MultiJob) (*AffectedReply, error)
	//修改職能代號
	UpdateJob(context.Context, *MultiJob) (*AffectedReply, error)
	//刪除職能代號
	DeleteJob(context.Context, *SingleJob) (*AffectedReply, error)
	//取得職能代號並 lock
	GetJobAndLock(context.Context, *SingleJob) (*MultiJob, error)
	// unlock 職能代號
	UnlockJob(context.Context, *MultiJob) (*empty.Empty, error)
	//取得合格講師數量
	GetQualifiedLectorCount(context.Context, *SingleQualifiedLector) (*CountReply, error)
	//取得合格講師資料
	GetQualifiedLector(context.Context, *QualifiedLectorRequest) (*MultiQualifiedLector, error)
	//新增合格講師
	AddQualifiedLector(context.Context, *MultiQualifiedLector) (*AffectedReply, error)
	//修改合格講師
	UpdateQualifiedLector(context.Context, *MultiQualifiedLector) (*AffectedReply, error)
	//刪除合格講師
	DeleteQualifiedLector(context.Context, *SingleQualifiedLector) (*AffectedReply, error)
	//取得合格講師並 lock
	GetQualifiedLectorAndLock(context.Context, *QualifiedLectorRequest) (*MultiQualifiedLector, error)
	// unlock 合格講師
	UnlockQualifiedLector(context.Context, *MultiQualifiedLector) (*empty.Empty, error)
	//取得授課單位數量
	GetTeachingUnitCount(context.Context, *SingleTeachingUnit) (*CountReply, error)
	//取得授課單位名稱
	GetTeachingUnitName(context.Context, *SingleTeachingUnit) (*TeachingUnitName, error)
	//取得授課單位資料
	GetTeachingUnit(context.Context, *SingleTeachingUnit) (*MultiTeachingUnit, error)
	//新增授課單位
	AddTeachingUnit(context.Context, *MultiTeachingUnit) (*AffectedReply, error)
	//修改授課單位
	UpdateTeachingUnit(context.Context, *MultiTeachingUnit) (*AffectedReply, error)
	//刪除授課單位
	DeleteTeachingUnit(context.Context, *SingleTeachingUnit) (*AffectedReply, error)
	//取得授課單位並 lock
	GetTeachingUnitAndLock(context.Context, *SingleTeachingUnit) (*MultiTeachingUnit, error)
	// unlock 授課單位
	UnlockTeachingUnit(context.Context, *MultiTeachingUnit) (*empty.Empty, error)
	//取得中分類課程數量
	GetMediumSortCouseCount(context.Context, *SingleMediumSortCouse) (*CountReply, error)
	//取得中分類課程名稱
	GetMediumSortCouseName(context.Context, *SingleMediumSortCouse) (*MediumSortCouseName, error)
	//取得中分類課程
	GetMediumSortCouse(context.Context, *SingleMediumSortCouse) (*MultiMediumSortCouse, error)
	//新增中分類課程
	AddMediumSortCouse(context.Context, *MultiMediumSortCouse) (*AffectedReply, error)
	//修改中分類課程
	UpdateMediumSortCouse(context.Context, *MultiMediumSortCouse) (*AffectedReply, error)
	//刪除中分類課程
	DeleteMediumSortCouse(context.Context, *SingleMediumSortCouse) (*AffectedReply, error)
	//取得中分類課程並 lock
	GetMediumSortCouseAndLock(context.Context, *SingleMediumSortCouse) (*MultiMediumSortCouse, error)
	// unlock 中分類課程
	UnlockMediumSortCouse(context.Context, *MultiMediumSortCouse) (*empty.Empty, error)
	//取得開課資料數量
	GetCouseCount(context.Context, *SingleCouse) (*CountReply, error)
	//取得開課資料最大流水號
	GetCouseSerno(context.Context, *SingleCouse) (*SernoReply, error)
	//取得開課資料
	GetCouse(context.Context, *SingleCouse) (*MultiCouse, error)
	//新增開課資料
	AddCouse(context.Context, *MultiCouse) (*AffectedReply, error)
	//修改開課資料
	UpdateCouse(context.Context, *MultiCouse) (*AffectedReply, error)
	//刪除開課資料
	DeleteCouse(context.Context, *SingleCouse) (*AffectedReply, error)
	//取得開課資料並 lock
	GetCouseAndLock(context.Context, *SingleCouse) (*MultiCouse, error)
	// unlock 開課資料
	UnlockCouse(context.Context, *MultiCouse) (*empty.Empty, error)
	//取得學習資料數量
	GetStudyCount(context.Context, *SingleStudy) (*CountReply, error)
	//取得學習資料
	GetStudySerno(context.Context, *SingleStudy) (*MultiStudy, error)
	//取得學習資料
	GetStudy(context.Context, *SingleStudy) (*MultiStudy, error)
	//新增學習資料
	AddStudy(context.Context, *MultiStudy) (*AffectedReply, error)
	//修改學習資料
	UpdateStudy(context.Context, *MultiStudy) (*AffectedReply, error)
	//修改學習資料(依percur更新資料)
	UpdateStudy1(context.Context, *MultiStudy) (*AffectedReply, error)
	//刪除學習資料
	DeleteStudy(context.Context, *SingleStudy) (*AffectedReply, error)
	//取得學習資料並 lock
	GetStudyAndLock(context.Context, *SingleStudy) (*MultiStudy, error)
	// unlock 學習資料
	UnlockStudy(context.Context, *MultiStudy) (*empty.Empty, error)
	//取得應修課程數量
	GetRequiredCouseCount(context.Context, *SingleRequiredCouse) (*CountReply, error)
	//取得應修課程
	GetRequiredCouse(context.Context, *SingleRequiredCouse) (*MultiRequiredCouse, error)
	//新增應修課程
	AddRequiredCouse(context.Context, *MultiRequiredCouse) (*AffectedReply, error)
	//修改應修課程
	UpdateRequiredCouse(context.Context, *MultiRequiredCouse) (*AffectedReply, error)
	//刪除應修課程
	DeleteRequiredCouse(context.Context, *SingleRequiredCouse) (*AffectedReply, error)
	//取得應修課程並 lock
	GetRequiredCouseAndLock(context.Context, *SingleRequiredCouse) (*MultiRequiredCouse, error)
	// unlock 應修課程
	UnlockRequiredCouse(context.Context, *MultiRequiredCouse) (*empty.Empty, error)
	//取得教育訓練承諾書簽約資料數量
	GetSignCount(context.Context, *SingleSign) (*CountReply, error)
	//取得教育訓練承諾書簽約資料
	GetSign(context.Context, *SingleSign) (*MultiSign, error)
	//新增教育訓練承諾書簽約資料
	AddSign(context.Context, *MultiSign) (*AffectedReply, error)
	//修改教育訓練承諾書簽約資料
	UpdateSign(context.Context, *MultiSign) (*AffectedReply, error)
	//刪除教育訓練承諾書簽約資料
	DeleteSign(context.Context, *SingleSign) (*AffectedReply, error)
	//取得教育訓練承諾書簽約資料並 lock
	GetSignAndLock(context.Context, *SingleSign) (*MultiSign, error)
	// unlock 教育訓練承諾書簽約資料
	UnlockSign(context.Context, *MultiSign) (*empty.Empty, error)
	//取得教育訓練簽核層級資料數量
	GetSignLevelCount(context.Context, *SingleSignLevel) (*CountReply, error)
	//取得教育訓練簽核層級資料
	GetSignLevel(context.Context, *SingleSignLevel) (*MultiSignLevel, error)
	//新增教育訓練簽核層級資料
	AddSignLevel(context.Context, *MultiSignLevel) (*AffectedReply, error)
	//修改教育訓練簽核層級資料
	UpdateSignLevel(context.Context, *MultiSignLevel) (*AffectedReply, error)
	//刪除教育訓練簽核層級資料
	DeleteSignLevel(context.Context, *SingleSignLevel) (*AffectedReply, error)
	//取得教育訓練簽核層級資料並 lock
	GetSignLevelAndLock(context.Context, *SingleSignLevel) (*MultiSignLevel, error)
	// unlock 教育訓練簽核層級資料
	UnlockSignLevel(context.Context, *MultiSignLevel) (*empty.Empty, error)
	//取得年度計畫序號數量
	GetPlanSerialCount(context.Context, *SinglePlanSerial) (*CountReply, error)
	//取得年度計畫序號
	GetPlanSerial(context.Context, *SinglePlanSerial) (*MultiPlanSerial, error)
	//新增年度計畫序號
	AddPlanSerial(context.Context, *MultiPlanSerial) (*AffectedReply, error)
	//修改年度計畫序號
	UpdatePlanSerial(context.Context, *MultiPlanSerial) (*AffectedReply, error)
	//刪除年度計畫序號
	DeletePlanSerial(context.Context, *SinglePlanSerial) (*AffectedReply, error)
	//取得年度計畫序號並 lock
	GetPlanSerialAndLock(context.Context, *SinglePlanSerial) (*MultiPlanSerial, error)
	// unlock 年度計畫序號
	UnlockPlanSerial(context.Context, *MultiPlanSerial) (*empty.Empty, error)
	//取得職能數量
	GetJobDutyCount(context.Context, *SingleJobDuty) (*CountReply, error)
	//取得職能代號
	GetJobDuty(context.Context, *SingleJobDuty) (*MultiJobDuty, error)
	//新增職能代號
	AddJobDuty(context.Context, *MultiJobDuty) (*AffectedReply, error)
	//修改職能代號
	UpdateJobDuty(context.Context, *MultiJobDuty) (*AffectedReply, error)
	//刪除職能代號
	DeleteJobDuty(context.Context, *SingleJobDuty) (*AffectedReply, error)
	//取得職能代號並 lock
	GetJobDutyAndLock(context.Context, *SingleJobDuty) (*MultiJobDuty, error)
	// unlock 職能代號
	UnlockJobDuty(context.Context, *MultiJobDuty) (*empty.Empty, error)
	//取得教育訓練計畫數量
	GetTrainingPlanCount(context.Context, *SingleTrainingPlan) (*CountReply, error)
	//取得教育訓練計畫
	GetTrainingPlan(context.Context, *SingleTrainingPlan) (*MultiTrainingPlan, error)
	//新增教育訓練計畫代
	AddTrainingPlan(context.Context, *MultiTrainingPlan) (*AffectedReply, error)
	//修改教育訓練計畫
	UpdateTrainingPlan(context.Context, *MultiTrainingPlan) (*AffectedReply, error)
	//刪除教育訓練計畫
	DeleteTrainingPlan(context.Context, *SingleTrainingPlan) (*AffectedReply, error)
	//取得教育訓練計畫並 lock
	GetTrainingPlanAndLock(context.Context, *SingleTrainingPlan) (*MultiTrainingPlan, error)
	// unlock 教育訓練計畫
	UnlockTrainingPlan(context.Context, *MultiTrainingPlan) (*empty.Empty, error)
	//取得特種作業人員數量
	GetSpecialOperatorCount(context.Context, *SingleSpecialOperator) (*CountReply, error)
	//取得特種作業人員資料
	GetSpecialOperator(context.Context, *SingleSpecialOperator) (*MultiSpecialOperator, error)
	//取得特種作業人員資料(不含離職人員)
	GetSpecialOperator1(context.Context, *SingleSpecialOperator) (*MultiSpecialOperator, error)
	//新增特種作業人員
	AddSpecialOperator(context.Context, *MultiSpecialOperator) (*AffectedReply, error)
	//修改特種作業人員
	UpdateSpecialOperator(context.Context, *MultiSpecialOperator) (*AffectedReply, error)
	//刪除特種作業人員
	DeleteSpecialOperator(context.Context, *SingleSpecialOperator) (*AffectedReply, error)
	//取得特種作業人員並 lock
	GetSpecialOperatorAndLock(context.Context, *SingleSpecialOperator) (*MultiSpecialOperator, error)
	// unlock 特種作業人員
	UnlockSpecialOperator(context.Context, *MultiSpecialOperator) (*empty.Empty, error)
	//取得職能必修課程數量
	GetJobDutyRequiredCouseCount(context.Context, *SingleJobDutyRequiredCouse) (*CountReply, error)
	//取得職能必修課程
	GetJobDutyRequiredCouse(context.Context, *SingleJobDutyRequiredCouse) (*MultiJobDutyRequiredCouse, error)
	//新增職能必修課程
	AddJobDutyRequiredCouse(context.Context, *MultiJobDutyRequiredCouse) (*AffectedReply, error)
	//修改職能必修課程
	UpdateJobDutyRequiredCouse(context.Context, *MultiJobDutyRequiredCouse) (*AffectedReply, error)
	//刪除職能必修課程
	DeleteJobDutyRequiredCouse(context.Context, *SingleJobDutyRequiredCouse) (*AffectedReply, error)
	//取得職能必修課程並 lock
	GetJobDutyRequiredCouseAndLock(context.Context, *SingleJobDutyRequiredCouse) (*MultiJobDutyRequiredCouse, error)
	// unlock 職能必修課程
	UnlockJobDutyRequiredCouse(context.Context, *MultiJobDutyRequiredCouse) (*empty.Empty, error)
	//取得培訓費用數量
	GetTrainingFeesCount(context.Context, *SingleTrainingFees) (*CountReply, error)
	//取得培訓費用資料
	GetTrainingFees(context.Context, *SingleTrainingFees) (*MultiTrainingFees, error)
	//新增培訓費用資料
	AddTrainingFees(context.Context, *MultiTrainingFees) (*AffectedReply, error)
	//修改培訓費用資料
	UpdateTrainingFees(context.Context, *MultiTrainingFees) (*AffectedReply, error)
	//刪除培訓費用資料
	DeleteTrainingFees(context.Context, *SingleTrainingFees) (*AffectedReply, error)
	//取得培訓費用並 lock
	GetTrainingFeesAndLock(context.Context, *SingleTrainingFees) (*MultiTrainingFees, error)
	// unlock 培訓費用
	UnlockTrainingFees(context.Context, *MultiTrainingFees) (*empty.Empty, error)
	//取得學習資料數量
	GetLearnCount(context.Context, *SingleLearn) (*CountReply, error)
	//取得學習資料
	GetLearn(context.Context, *SingleLearn) (*MultiLearn, error)
	//新增學習資料
	AddLearn(context.Context, *MultiLearn) (*AffectedReply, error)
	//新增學習資料1
	AddLearn1(context.Context, *MultiLearn) (*AffectedReply, error)
	//修改學習資料
	UpdateLearn(context.Context, *MultiLearn) (*AffectedReply, error)
	//修改學習資料
	UpdateLearnUnitno(context.Context, *MultiLearn) (*AffectedReply, error)
	//刪除學習資料
	DeleteLearn(context.Context, *SingleLearn) (*AffectedReply, error)
	//取得學習資料並 lock
	GetLearnAndLock(context.Context, *SingleLearn) (*MultiLearn, error)
	// unlock 學習資料
	UnlockLearn(context.Context, *MultiLearn) (*empty.Empty, error)
	//取得開課資料數量
	GetLearnCouseCount(context.Context, *SingleLearnCouse) (*CountReply, error)
	//取得開課資料最大流水號
	GetLearnCouseSerno(context.Context, *SingleLearnCouse) (*SernoReply, error)
	//取得開課資料
	GetLearnCouse(context.Context, *SingleLearnCouse) (*MultiLearnCouse, error)
	//新增開課資料
	AddLearnCouse(context.Context, *MultiLearnCouse) (*AffectedReply, error)
	//新增開課資料1
	AddLearnCouse1(context.Context, *MultiLearnCouse) (*AffectedReply, error)
	//修改開課資料
	UpdateLearnCouse(context.Context, *MultiLearnCouse) (*AffectedReply, error)
	//刪除開課資料
	DeleteLearnCouse(context.Context, *SingleLearnCouse) (*AffectedReply, error)
	//取得開課資料並 lock
	GetLearnCouseAndLock(context.Context, *SingleLearnCouse) (*MultiLearnCouse, error)
	// unlock 開課資料
	UnlockLearnCouse(context.Context, *MultiLearnCouse) (*empty.Empty, error)
	//取得教育訓練教材數量
	GetTrainingMaterialsCount(context.Context, *SingleTrainingMaterials) (*CountReply, error)
	//取得教育訓練教材資料
	GetTrainingMaterials(context.Context, *SingleTrainingMaterials) (*MultiTrainingMaterials, error)
	//取得教育訓練教材資料
	GetTrainingMaterialsSerno(context.Context, *SingleTrainingMaterials) (*SernoReply, error)
	//新增教育訓練教材資料
	AddTrainingMaterials(context.Context, *MultiTrainingMaterials) (*AffectedReply, error)
	//修改教育訓練教材資料
	UpdateTrainingMaterials(context.Context, *MultiTrainingMaterials) (*AffectedReply, error)
	//刪除教育訓練教材資料
	DeleteTrainingMaterials(context.Context, *SingleTrainingMaterials) (*AffectedReply, error)
	//取得教育訓練教材資料並 lock
	GetTrainingMaterialsAndLock(context.Context, *SingleTrainingMaterials) (*MultiTrainingMaterials, error)
	// unlock 教育訓練教材資料
	UnlockTrainingMaterials(context.Context, *MultiTrainingMaterials) (*empty.Empty, error)
	//取得職能崗位數量
	GetJobDutyPostCount(context.Context, *SingleJobDutyPost) (*CountReply, error)
	//取得職能崗位資料
	GetJobDutyPost(context.Context, *SingleJobDutyPost) (*MultiJobDutyPost, error)
	//新增職能崗位資料
	AddJobDutyPost(context.Context, *MultiJobDutyPost) (*AffectedReply, error)
	//修改職能崗位資料
	UpdateJobDutyPost(context.Context, *MultiJobDutyPost) (*AffectedReply, error)
	//刪除職能崗位資料
	DeleteJobDutyPost(context.Context, *SingleJobDutyPost) (*AffectedReply, error)
	//取得職能崗位並 lock
	GetJobDutyPostAndLock(context.Context, *SingleJobDutyPost) (*MultiJobDutyPost, error)
	// unlock 職能崗位
	UnlockJobDutyPost(context.Context, *MultiJobDutyPost) (*empty.Empty, error)
	//取得證件管理數量
	GetCredentialsManagementCount(context.Context, *SingleCredentialsManagement) (*CountReply, error)
	//取得證件管理資料
	GetCredentialsManagement(context.Context, *SingleCredentialsManagement) (*MultiCredentialsManagement, error)
	//新增證件管理資料
	AddCredentialsManagement(context.Context, *MultiCredentialsManagement) (*AffectedReply, error)
	//修改證件管理資料
	UpdateCredentialsManagement(context.Context, *MultiCredentialsManagement) (*AffectedReply, error)
	//刪除證件管理資料
	DeleteCredentialsManagement(context.Context, *SingleCredentialsManagement) (*AffectedReply, error)
	//取得證件管理並 lock
	GetCredentialsManagementAndLock(context.Context, *SingleCredentialsManagement) (*MultiCredentialsManagement, error)
	// unlock 證件管理
	UnlockCredentialsManagement(context.Context, *MultiCredentialsManagement) (*empty.Empty, error)
	//取得教育訓練基准檔案數量
	GetJobRequiredCouseCount(context.Context, *SingleJobRequiredCouse) (*CountReply, error)
	//取得教育訓練基准檔案資料
	GetJobRequiredCouse(context.Context, *SingleJobRequiredCouse) (*MultiJobRequiredCouse, error)
	//新增教育訓練基准檔案資料
	AddJobRequiredCouse(context.Context, *MultiJobRequiredCouse) (*AffectedReply, error)
	//修改教育訓練基准檔案資料
	UpdateJobRequiredCouse(context.Context, *MultiJobRequiredCouse) (*AffectedReply, error)
	//刪除教育訓練基准檔案資料
	DeleteJobRequiredCouse(context.Context, *SingleJobRequiredCouse) (*AffectedReply, error)
	//取得教育訓練基准檔案並 lock
	GetJobRequiredCouseAndLock(context.Context, *SingleJobRequiredCouse) (*MultiJobRequiredCouse, error)
	// unlock 教育訓練基准檔案
	UnlockJobRequiredCouse(context.Context, *MultiJobRequiredCouse) (*empty.Empty, error)
	//取得職稱說明數量
	GetJobTitleCount(context.Context, *SingleJobTitle) (*CountReply, error)
	//取得職稱說明資料
	GetJobTitle(context.Context, *SingleJobTitle) (*MultiJobTitle, error)
	//新增職稱說明資料
	AddJobTitle(context.Context, *MultiJobTitle) (*AffectedReply, error)
	//修改職稱說明資料
	UpdateJobTitle(context.Context, *MultiJobTitle) (*AffectedReply, error)
	//刪除職稱說明資料
	DeleteJobTitle(context.Context, *SingleJobTitle) (*AffectedReply, error)
	//取得職稱說明並 lock
	GetJobTitleAndLock(context.Context, *SingleJobTitle) (*MultiJobTitle, error)
	// unlock 職稱說明
	UnlockJobTitle(context.Context, *MultiJobTitle) (*empty.Empty, error)
	//取得上崗資格數量
	GetWorkQualificationCount(context.Context, *SingleWorkQualification) (*CountReply, error)
	//取得上崗資格資料
	GetWorkQualification(context.Context, *SingleWorkQualification) (*MultiWorkQualification, error)
	//新增上崗資格資料
	AddWorkQualification(context.Context, *MultiWorkQualification) (*AffectedReply, error)
	//修改上崗資格資料
	UpdateWorkQualification(context.Context, *MultiWorkQualification) (*AffectedReply, error)
	//刪除上崗資格資料
	DeleteWorkQualification(context.Context, *SingleWorkQualification) (*AffectedReply, error)
	//取得上崗資格並 lock
	GetWorkQualificationAndLock(context.Context, *SingleWorkQualification) (*MultiWorkQualification, error)
	// unlock 上崗資格
	UnlockWorkQualification(context.Context, *MultiWorkQualification) (*empty.Empty, error)
	//取得人事主檔之其他代號
	GetEmployeeOtherCode1(context.Context, *EmployeeMaskRequest) (*EmployeeOtherCode, error)
	//取得員工資料
	GetEmployee(context.Context, *EmployeeMaskRequest) (*Employees, error)
	//取得員工資料
	GetEmployees(context.Context, *SingleEmployee) (*SingleEmployee, error)
	//取得設定檔說明
	GetSeccodCodsc(context.Context, *SingleSeccod) (*CodscReply, error)
	//取得部門說明
	GetDepartmentDesc(context.Context, *DepartmentRequest) (*CodscReply, error)
	//以廠別取得全部部門
	GetDepClassGroup(context.Context, *EachFactoryRequest) (*EachFactoryReply, error)
	//取得員工資料 for 教育訓練紀錄表
	GetEmployeeForTrainingRecord(context.Context, *EmployeeMaskRequest) (*EmployeeForTrainingRecord, error)
	//取得教育訓練紀錄表
	GetTrainingReport(context.Context, *TrainingRecordRequest) (*MultiTrainingReport, error)
	//取得教育訓練紀錄表(一個SQL)
	GetTrainingRecordWithOneSQL(context.Context, *TrainingRecordRequest) (*TrainingRecord, error)
	//取得教育訓練紀錄表(多個SQL)
	GetTrainingRecordWithMultiSQL(context.Context, *TrainingRecordRequest) (*TrainingRecord, error)
	//取得教育訓練成績表
	GetTrainingScoreReport(context.Context, *TrainingRecordRequest) (*MultiTrainingScoreReport, error)
	//取得彈性工時資料
	GetFlexibleWorkHour(context.Context, *FlexibleWorkHourRequest) (*MultiFlexibleWorkHour, error)
	//新增彈性工時資料
	AddFlexibleWorkHour(context.Context, *FlexibleWorkHourRequest) (*AffectedReply, error)
	//修改彈性工時資料
	UpdateFlexibleWorkHour(context.Context, *FlexibleWorkHourRequest) (*AffectedReply, error)
	//刪除彈性工時資料
	DeleteFlexibleWorkHour(context.Context, *FlexibleWorkHourRequest) (*AffectedReply, error)
	//取得彈性工時資料並lock
	GetFlexibleWorkHourAndLock(context.Context, *FlexibleWorkHourRequest) (*MultiFlexibleWorkHour, error)
	// unlock彈性工時資料
	FlexibleWorkHourUnlock(context.Context, *FlexibleWorkHourRequest) (*empty.Empty, error)
	// LOAD 範例
	LoadJob(context.Context, *File) (*AffectedReply, error)
	// UNLOAD 範例
	UnloadJob(context.Context, *SingleJob) (*File, error)
	UnloadJob1(context.Context, *SingleJob) (*File, error)
	UnloadJob2(context.Context, *SingleJob) (*File, error)
	//人員列表
	ListPermas(context.Context, *ListPermasRequest) (*ListPermasReply, error)
}

func RegisterPERServer(s *grpc.Server, srv PERServer) {
	s.RegisterService(&_PER_serviceDesc, srv)
}

func _PER_GetJobCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobCount(ctx, req.(*SingleJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJob(ctx, req.(*SingleJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddJob(ctx, req.(*MultiJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateJob(ctx, req.(*MultiJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteJob(ctx, req.(*SingleJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobAndLock(ctx, req.(*SingleJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockJob(ctx, req.(*MultiJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetQualifiedLectorCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleQualifiedLector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetQualifiedLectorCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetQualifiedLectorCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetQualifiedLectorCount(ctx, req.(*SingleQualifiedLector))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetQualifiedLector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualifiedLectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetQualifiedLector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetQualifiedLector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetQualifiedLector(ctx, req.(*QualifiedLectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddQualifiedLector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiQualifiedLector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddQualifiedLector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddQualifiedLector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddQualifiedLector(ctx, req.(*MultiQualifiedLector))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateQualifiedLector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiQualifiedLector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateQualifiedLector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateQualifiedLector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateQualifiedLector(ctx, req.(*MultiQualifiedLector))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteQualifiedLector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleQualifiedLector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteQualifiedLector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteQualifiedLector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteQualifiedLector(ctx, req.(*SingleQualifiedLector))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetQualifiedLectorAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualifiedLectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetQualifiedLectorAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetQualifiedLectorAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetQualifiedLectorAndLock(ctx, req.(*QualifiedLectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockQualifiedLector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiQualifiedLector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockQualifiedLector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockQualifiedLector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockQualifiedLector(ctx, req.(*MultiQualifiedLector))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTeachingUnitCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTeachingUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTeachingUnitCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTeachingUnitCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTeachingUnitCount(ctx, req.(*SingleTeachingUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTeachingUnitName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTeachingUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTeachingUnitName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTeachingUnitName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTeachingUnitName(ctx, req.(*SingleTeachingUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTeachingUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTeachingUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTeachingUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTeachingUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTeachingUnit(ctx, req.(*SingleTeachingUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddTeachingUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiTeachingUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddTeachingUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddTeachingUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddTeachingUnit(ctx, req.(*MultiTeachingUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateTeachingUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiTeachingUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateTeachingUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateTeachingUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateTeachingUnit(ctx, req.(*MultiTeachingUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteTeachingUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTeachingUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteTeachingUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteTeachingUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteTeachingUnit(ctx, req.(*SingleTeachingUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTeachingUnitAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTeachingUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTeachingUnitAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTeachingUnitAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTeachingUnitAndLock(ctx, req.(*SingleTeachingUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockTeachingUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiTeachingUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockTeachingUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockTeachingUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockTeachingUnit(ctx, req.(*MultiTeachingUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetMediumSortCouseCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleMediumSortCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetMediumSortCouseCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetMediumSortCouseCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetMediumSortCouseCount(ctx, req.(*SingleMediumSortCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetMediumSortCouseName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleMediumSortCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetMediumSortCouseName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetMediumSortCouseName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetMediumSortCouseName(ctx, req.(*SingleMediumSortCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetMediumSortCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleMediumSortCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetMediumSortCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetMediumSortCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetMediumSortCouse(ctx, req.(*SingleMediumSortCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddMediumSortCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiMediumSortCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddMediumSortCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddMediumSortCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddMediumSortCouse(ctx, req.(*MultiMediumSortCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateMediumSortCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiMediumSortCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateMediumSortCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateMediumSortCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateMediumSortCouse(ctx, req.(*MultiMediumSortCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteMediumSortCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleMediumSortCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteMediumSortCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteMediumSortCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteMediumSortCouse(ctx, req.(*SingleMediumSortCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetMediumSortCouseAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleMediumSortCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetMediumSortCouseAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetMediumSortCouseAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetMediumSortCouseAndLock(ctx, req.(*SingleMediumSortCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockMediumSortCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiMediumSortCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockMediumSortCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockMediumSortCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockMediumSortCouse(ctx, req.(*MultiMediumSortCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetCouseCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetCouseCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetCouseCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetCouseCount(ctx, req.(*SingleCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetCouseSerno_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetCouseSerno(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetCouseSerno",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetCouseSerno(ctx, req.(*SingleCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetCouse(ctx, req.(*SingleCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddCouse(ctx, req.(*MultiCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateCouse(ctx, req.(*MultiCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteCouse(ctx, req.(*SingleCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetCouseAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetCouseAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetCouseAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetCouseAndLock(ctx, req.(*SingleCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockCouse(ctx, req.(*MultiCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetStudyCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleStudy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetStudyCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetStudyCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetStudyCount(ctx, req.(*SingleStudy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetStudySerno_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleStudy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetStudySerno(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetStudySerno",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetStudySerno(ctx, req.(*SingleStudy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleStudy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetStudy(ctx, req.(*SingleStudy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiStudy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddStudy(ctx, req.(*MultiStudy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiStudy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateStudy(ctx, req.(*MultiStudy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateStudy1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiStudy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateStudy1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateStudy1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateStudy1(ctx, req.(*MultiStudy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleStudy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteStudy(ctx, req.(*SingleStudy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetStudyAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleStudy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetStudyAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetStudyAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetStudyAndLock(ctx, req.(*SingleStudy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiStudy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockStudy(ctx, req.(*MultiStudy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetRequiredCouseCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetRequiredCouseCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetRequiredCouseCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetRequiredCouseCount(ctx, req.(*SingleRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetRequiredCouse(ctx, req.(*SingleRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddRequiredCouse(ctx, req.(*MultiRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateRequiredCouse(ctx, req.(*MultiRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteRequiredCouse(ctx, req.(*SingleRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetRequiredCouseAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetRequiredCouseAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetRequiredCouseAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetRequiredCouseAndLock(ctx, req.(*SingleRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockRequiredCouse(ctx, req.(*MultiRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetSignCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetSignCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetSignCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetSignCount(ctx, req.(*SingleSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetSign(ctx, req.(*SingleSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddSign(ctx, req.(*MultiSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateSign(ctx, req.(*MultiSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteSign(ctx, req.(*SingleSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetSignAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetSignAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetSignAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetSignAndLock(ctx, req.(*SingleSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockSign(ctx, req.(*MultiSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetSignLevelCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSignLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetSignLevelCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetSignLevelCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetSignLevelCount(ctx, req.(*SingleSignLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetSignLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSignLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetSignLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetSignLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetSignLevel(ctx, req.(*SingleSignLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddSignLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSignLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddSignLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddSignLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddSignLevel(ctx, req.(*MultiSignLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateSignLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSignLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateSignLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateSignLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateSignLevel(ctx, req.(*MultiSignLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteSignLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSignLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteSignLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteSignLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteSignLevel(ctx, req.(*SingleSignLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetSignLevelAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSignLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetSignLevelAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetSignLevelAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetSignLevelAndLock(ctx, req.(*SingleSignLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockSignLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSignLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockSignLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockSignLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockSignLevel(ctx, req.(*MultiSignLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetPlanSerialCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinglePlanSerial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetPlanSerialCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetPlanSerialCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetPlanSerialCount(ctx, req.(*SinglePlanSerial))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetPlanSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinglePlanSerial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetPlanSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetPlanSerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetPlanSerial(ctx, req.(*SinglePlanSerial))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddPlanSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiPlanSerial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddPlanSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddPlanSerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddPlanSerial(ctx, req.(*MultiPlanSerial))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdatePlanSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiPlanSerial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdatePlanSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdatePlanSerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdatePlanSerial(ctx, req.(*MultiPlanSerial))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeletePlanSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinglePlanSerial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeletePlanSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeletePlanSerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeletePlanSerial(ctx, req.(*SinglePlanSerial))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetPlanSerialAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinglePlanSerial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetPlanSerialAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetPlanSerialAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetPlanSerialAndLock(ctx, req.(*SinglePlanSerial))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockPlanSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiPlanSerial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockPlanSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockPlanSerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockPlanSerial(ctx, req.(*MultiPlanSerial))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobDutyCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobDuty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobDutyCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobDutyCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobDutyCount(ctx, req.(*SingleJobDuty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobDuty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobDuty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobDuty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobDuty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobDuty(ctx, req.(*SingleJobDuty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddJobDuty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobDuty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddJobDuty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddJobDuty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddJobDuty(ctx, req.(*MultiJobDuty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateJobDuty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobDuty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateJobDuty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateJobDuty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateJobDuty(ctx, req.(*MultiJobDuty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteJobDuty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobDuty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteJobDuty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteJobDuty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteJobDuty(ctx, req.(*SingleJobDuty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobDutyAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobDuty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobDutyAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobDutyAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobDutyAndLock(ctx, req.(*SingleJobDuty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockJobDuty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobDuty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockJobDuty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockJobDuty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockJobDuty(ctx, req.(*MultiJobDuty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTrainingPlanCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrainingPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTrainingPlanCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTrainingPlanCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTrainingPlanCount(ctx, req.(*SingleTrainingPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTrainingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrainingPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTrainingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTrainingPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTrainingPlan(ctx, req.(*SingleTrainingPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddTrainingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiTrainingPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddTrainingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddTrainingPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddTrainingPlan(ctx, req.(*MultiTrainingPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateTrainingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiTrainingPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateTrainingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateTrainingPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateTrainingPlan(ctx, req.(*MultiTrainingPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteTrainingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrainingPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteTrainingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteTrainingPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteTrainingPlan(ctx, req.(*SingleTrainingPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTrainingPlanAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrainingPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTrainingPlanAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTrainingPlanAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTrainingPlanAndLock(ctx, req.(*SingleTrainingPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockTrainingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiTrainingPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockTrainingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockTrainingPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockTrainingPlan(ctx, req.(*MultiTrainingPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetSpecialOperatorCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSpecialOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetSpecialOperatorCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetSpecialOperatorCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetSpecialOperatorCount(ctx, req.(*SingleSpecialOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetSpecialOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSpecialOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetSpecialOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetSpecialOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetSpecialOperator(ctx, req.(*SingleSpecialOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetSpecialOperator1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSpecialOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetSpecialOperator1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetSpecialOperator1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetSpecialOperator1(ctx, req.(*SingleSpecialOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddSpecialOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSpecialOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddSpecialOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddSpecialOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddSpecialOperator(ctx, req.(*MultiSpecialOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateSpecialOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSpecialOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateSpecialOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateSpecialOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateSpecialOperator(ctx, req.(*MultiSpecialOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteSpecialOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSpecialOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteSpecialOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteSpecialOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteSpecialOperator(ctx, req.(*SingleSpecialOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetSpecialOperatorAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSpecialOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetSpecialOperatorAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetSpecialOperatorAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetSpecialOperatorAndLock(ctx, req.(*SingleSpecialOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockSpecialOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSpecialOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockSpecialOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockSpecialOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockSpecialOperator(ctx, req.(*MultiSpecialOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobDutyRequiredCouseCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobDutyRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobDutyRequiredCouseCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobDutyRequiredCouseCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobDutyRequiredCouseCount(ctx, req.(*SingleJobDutyRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobDutyRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobDutyRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobDutyRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobDutyRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobDutyRequiredCouse(ctx, req.(*SingleJobDutyRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddJobDutyRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobDutyRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddJobDutyRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddJobDutyRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddJobDutyRequiredCouse(ctx, req.(*MultiJobDutyRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateJobDutyRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobDutyRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateJobDutyRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateJobDutyRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateJobDutyRequiredCouse(ctx, req.(*MultiJobDutyRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteJobDutyRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobDutyRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteJobDutyRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteJobDutyRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteJobDutyRequiredCouse(ctx, req.(*SingleJobDutyRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobDutyRequiredCouseAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobDutyRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobDutyRequiredCouseAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobDutyRequiredCouseAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobDutyRequiredCouseAndLock(ctx, req.(*SingleJobDutyRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockJobDutyRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobDutyRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockJobDutyRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockJobDutyRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockJobDutyRequiredCouse(ctx, req.(*MultiJobDutyRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTrainingFeesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrainingFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTrainingFeesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTrainingFeesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTrainingFeesCount(ctx, req.(*SingleTrainingFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTrainingFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrainingFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTrainingFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTrainingFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTrainingFees(ctx, req.(*SingleTrainingFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddTrainingFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiTrainingFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddTrainingFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddTrainingFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddTrainingFees(ctx, req.(*MultiTrainingFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateTrainingFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiTrainingFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateTrainingFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateTrainingFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateTrainingFees(ctx, req.(*MultiTrainingFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteTrainingFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrainingFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteTrainingFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteTrainingFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteTrainingFees(ctx, req.(*SingleTrainingFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTrainingFeesAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrainingFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTrainingFeesAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTrainingFeesAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTrainingFeesAndLock(ctx, req.(*SingleTrainingFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockTrainingFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiTrainingFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockTrainingFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockTrainingFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockTrainingFees(ctx, req.(*MultiTrainingFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetLearnCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleLearn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetLearnCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetLearnCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetLearnCount(ctx, req.(*SingleLearn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetLearn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleLearn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetLearn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetLearn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetLearn(ctx, req.(*SingleLearn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddLearn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiLearn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddLearn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddLearn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddLearn(ctx, req.(*MultiLearn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddLearn1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiLearn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddLearn1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddLearn1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddLearn1(ctx, req.(*MultiLearn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateLearn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiLearn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateLearn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateLearn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateLearn(ctx, req.(*MultiLearn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateLearnUnitno_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiLearn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateLearnUnitno(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateLearnUnitno",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateLearnUnitno(ctx, req.(*MultiLearn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteLearn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleLearn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteLearn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteLearn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteLearn(ctx, req.(*SingleLearn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetLearnAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleLearn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetLearnAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetLearnAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetLearnAndLock(ctx, req.(*SingleLearn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockLearn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiLearn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockLearn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockLearn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockLearn(ctx, req.(*MultiLearn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetLearnCouseCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleLearnCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetLearnCouseCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetLearnCouseCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetLearnCouseCount(ctx, req.(*SingleLearnCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetLearnCouseSerno_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleLearnCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetLearnCouseSerno(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetLearnCouseSerno",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetLearnCouseSerno(ctx, req.(*SingleLearnCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetLearnCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleLearnCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetLearnCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetLearnCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetLearnCouse(ctx, req.(*SingleLearnCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddLearnCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiLearnCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddLearnCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddLearnCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddLearnCouse(ctx, req.(*MultiLearnCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddLearnCouse1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiLearnCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddLearnCouse1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddLearnCouse1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddLearnCouse1(ctx, req.(*MultiLearnCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateLearnCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiLearnCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateLearnCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateLearnCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateLearnCouse(ctx, req.(*MultiLearnCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteLearnCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleLearnCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteLearnCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteLearnCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteLearnCouse(ctx, req.(*SingleLearnCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetLearnCouseAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleLearnCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetLearnCouseAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetLearnCouseAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetLearnCouseAndLock(ctx, req.(*SingleLearnCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockLearnCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiLearnCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockLearnCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockLearnCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockLearnCouse(ctx, req.(*MultiLearnCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTrainingMaterialsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrainingMaterials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTrainingMaterialsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTrainingMaterialsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTrainingMaterialsCount(ctx, req.(*SingleTrainingMaterials))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTrainingMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrainingMaterials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTrainingMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTrainingMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTrainingMaterials(ctx, req.(*SingleTrainingMaterials))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTrainingMaterialsSerno_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrainingMaterials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTrainingMaterialsSerno(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTrainingMaterialsSerno",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTrainingMaterialsSerno(ctx, req.(*SingleTrainingMaterials))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddTrainingMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiTrainingMaterials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddTrainingMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddTrainingMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddTrainingMaterials(ctx, req.(*MultiTrainingMaterials))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateTrainingMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiTrainingMaterials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateTrainingMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateTrainingMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateTrainingMaterials(ctx, req.(*MultiTrainingMaterials))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteTrainingMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrainingMaterials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteTrainingMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteTrainingMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteTrainingMaterials(ctx, req.(*SingleTrainingMaterials))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTrainingMaterialsAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrainingMaterials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTrainingMaterialsAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTrainingMaterialsAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTrainingMaterialsAndLock(ctx, req.(*SingleTrainingMaterials))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockTrainingMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiTrainingMaterials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockTrainingMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockTrainingMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockTrainingMaterials(ctx, req.(*MultiTrainingMaterials))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobDutyPostCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobDutyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobDutyPostCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobDutyPostCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobDutyPostCount(ctx, req.(*SingleJobDutyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobDutyPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobDutyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobDutyPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobDutyPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobDutyPost(ctx, req.(*SingleJobDutyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddJobDutyPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobDutyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddJobDutyPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddJobDutyPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddJobDutyPost(ctx, req.(*MultiJobDutyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateJobDutyPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobDutyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateJobDutyPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateJobDutyPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateJobDutyPost(ctx, req.(*MultiJobDutyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteJobDutyPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobDutyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteJobDutyPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteJobDutyPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteJobDutyPost(ctx, req.(*SingleJobDutyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobDutyPostAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobDutyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobDutyPostAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobDutyPostAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobDutyPostAndLock(ctx, req.(*SingleJobDutyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockJobDutyPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobDutyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockJobDutyPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockJobDutyPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockJobDutyPost(ctx, req.(*MultiJobDutyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetCredentialsManagementCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleCredentialsManagement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetCredentialsManagementCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetCredentialsManagementCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetCredentialsManagementCount(ctx, req.(*SingleCredentialsManagement))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetCredentialsManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleCredentialsManagement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetCredentialsManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetCredentialsManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetCredentialsManagement(ctx, req.(*SingleCredentialsManagement))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddCredentialsManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCredentialsManagement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddCredentialsManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddCredentialsManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddCredentialsManagement(ctx, req.(*MultiCredentialsManagement))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateCredentialsManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCredentialsManagement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateCredentialsManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateCredentialsManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateCredentialsManagement(ctx, req.(*MultiCredentialsManagement))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteCredentialsManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleCredentialsManagement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteCredentialsManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteCredentialsManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteCredentialsManagement(ctx, req.(*SingleCredentialsManagement))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetCredentialsManagementAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleCredentialsManagement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetCredentialsManagementAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetCredentialsManagementAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetCredentialsManagementAndLock(ctx, req.(*SingleCredentialsManagement))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockCredentialsManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCredentialsManagement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockCredentialsManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockCredentialsManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockCredentialsManagement(ctx, req.(*MultiCredentialsManagement))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobRequiredCouseCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobRequiredCouseCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobRequiredCouseCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobRequiredCouseCount(ctx, req.(*SingleJobRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobRequiredCouse(ctx, req.(*SingleJobRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddJobRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddJobRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddJobRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddJobRequiredCouse(ctx, req.(*MultiJobRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateJobRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateJobRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateJobRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateJobRequiredCouse(ctx, req.(*MultiJobRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteJobRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteJobRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteJobRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteJobRequiredCouse(ctx, req.(*SingleJobRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobRequiredCouseAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobRequiredCouseAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobRequiredCouseAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobRequiredCouseAndLock(ctx, req.(*SingleJobRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockJobRequiredCouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobRequiredCouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockJobRequiredCouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockJobRequiredCouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockJobRequiredCouse(ctx, req.(*MultiJobRequiredCouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobTitleCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobTitleCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobTitleCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobTitleCount(ctx, req.(*SingleJobTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobTitle(ctx, req.(*SingleJobTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddJobTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddJobTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddJobTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddJobTitle(ctx, req.(*MultiJobTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateJobTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateJobTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateJobTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateJobTitle(ctx, req.(*MultiJobTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteJobTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteJobTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteJobTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteJobTitle(ctx, req.(*SingleJobTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetJobTitleAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJobTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetJobTitleAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetJobTitleAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetJobTitleAndLock(ctx, req.(*SingleJobTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockJobTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiJobTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockJobTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockJobTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockJobTitle(ctx, req.(*MultiJobTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetWorkQualificationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleWorkQualification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetWorkQualificationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetWorkQualificationCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetWorkQualificationCount(ctx, req.(*SingleWorkQualification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetWorkQualification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleWorkQualification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetWorkQualification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetWorkQualification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetWorkQualification(ctx, req.(*SingleWorkQualification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddWorkQualification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiWorkQualification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddWorkQualification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddWorkQualification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddWorkQualification(ctx, req.(*MultiWorkQualification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateWorkQualification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiWorkQualification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateWorkQualification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateWorkQualification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateWorkQualification(ctx, req.(*MultiWorkQualification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteWorkQualification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleWorkQualification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteWorkQualification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteWorkQualification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteWorkQualification(ctx, req.(*SingleWorkQualification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetWorkQualificationAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleWorkQualification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetWorkQualificationAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetWorkQualificationAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetWorkQualificationAndLock(ctx, req.(*SingleWorkQualification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnlockWorkQualification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiWorkQualification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnlockWorkQualification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnlockWorkQualification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnlockWorkQualification(ctx, req.(*MultiWorkQualification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetEmployeeOtherCode1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeMaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetEmployeeOtherCode1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetEmployeeOtherCode1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetEmployeeOtherCode1(ctx, req.(*EmployeeMaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeMaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetEmployee(ctx, req.(*EmployeeMaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleEmployee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetEmployees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetEmployees(ctx, req.(*SingleEmployee))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetSeccodCodsc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSeccod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetSeccodCodsc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetSeccodCodsc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetSeccodCodsc(ctx, req.(*SingleSeccod))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetDepartmentDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetDepartmentDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetDepartmentDesc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetDepartmentDesc(ctx, req.(*DepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetDepClassGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EachFactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetDepClassGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetDepClassGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetDepClassGroup(ctx, req.(*EachFactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetEmployeeForTrainingRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeMaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetEmployeeForTrainingRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetEmployeeForTrainingRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetEmployeeForTrainingRecord(ctx, req.(*EmployeeMaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTrainingReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTrainingReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTrainingReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTrainingReport(ctx, req.(*TrainingRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTrainingRecordWithOneSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTrainingRecordWithOneSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTrainingRecordWithOneSQL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTrainingRecordWithOneSQL(ctx, req.(*TrainingRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTrainingRecordWithMultiSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTrainingRecordWithMultiSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTrainingRecordWithMultiSQL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTrainingRecordWithMultiSQL(ctx, req.(*TrainingRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetTrainingScoreReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetTrainingScoreReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetTrainingScoreReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetTrainingScoreReport(ctx, req.(*TrainingRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetFlexibleWorkHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlexibleWorkHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetFlexibleWorkHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetFlexibleWorkHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetFlexibleWorkHour(ctx, req.(*FlexibleWorkHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_AddFlexibleWorkHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlexibleWorkHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).AddFlexibleWorkHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/AddFlexibleWorkHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).AddFlexibleWorkHour(ctx, req.(*FlexibleWorkHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UpdateFlexibleWorkHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlexibleWorkHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UpdateFlexibleWorkHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UpdateFlexibleWorkHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UpdateFlexibleWorkHour(ctx, req.(*FlexibleWorkHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_DeleteFlexibleWorkHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlexibleWorkHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).DeleteFlexibleWorkHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/DeleteFlexibleWorkHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).DeleteFlexibleWorkHour(ctx, req.(*FlexibleWorkHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_GetFlexibleWorkHourAndLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlexibleWorkHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).GetFlexibleWorkHourAndLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/GetFlexibleWorkHourAndLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).GetFlexibleWorkHourAndLock(ctx, req.(*FlexibleWorkHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_FlexibleWorkHourUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlexibleWorkHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).FlexibleWorkHourUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/FlexibleWorkHourUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).FlexibleWorkHourUnlock(ctx, req.(*FlexibleWorkHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_LoadJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).LoadJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/LoadJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).LoadJob(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnloadJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnloadJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnloadJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnloadJob(ctx, req.(*SingleJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnloadJob1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnloadJob1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnloadJob1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnloadJob1(ctx, req.(*SingleJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_UnloadJob2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).UnloadJob2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/UnloadJob2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).UnloadJob2(ctx, req.(*SingleJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _PER_ListPermas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PERServer).ListPermas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.per.PER/ListPermas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PERServer).ListPermas(ctx, req.(*ListPermasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PER_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.dm.per.PER",
	HandlerType: (*PERServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJobCount",
			Handler:    _PER_GetJobCount_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _PER_GetJob_Handler,
		},
		{
			MethodName: "AddJob",
			Handler:    _PER_AddJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _PER_UpdateJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _PER_DeleteJob_Handler,
		},
		{
			MethodName: "GetJobAndLock",
			Handler:    _PER_GetJobAndLock_Handler,
		},
		{
			MethodName: "UnlockJob",
			Handler:    _PER_UnlockJob_Handler,
		},
		{
			MethodName: "GetQualifiedLectorCount",
			Handler:    _PER_GetQualifiedLectorCount_Handler,
		},
		{
			MethodName: "GetQualifiedLector",
			Handler:    _PER_GetQualifiedLector_Handler,
		},
		{
			MethodName: "AddQualifiedLector",
			Handler:    _PER_AddQualifiedLector_Handler,
		},
		{
			MethodName: "UpdateQualifiedLector",
			Handler:    _PER_UpdateQualifiedLector_Handler,
		},
		{
			MethodName: "DeleteQualifiedLector",
			Handler:    _PER_DeleteQualifiedLector_Handler,
		},
		{
			MethodName: "GetQualifiedLectorAndLock",
			Handler:    _PER_GetQualifiedLectorAndLock_Handler,
		},
		{
			MethodName: "UnlockQualifiedLector",
			Handler:    _PER_UnlockQualifiedLector_Handler,
		},
		{
			MethodName: "GetTeachingUnitCount",
			Handler:    _PER_GetTeachingUnitCount_Handler,
		},
		{
			MethodName: "GetTeachingUnitName",
			Handler:    _PER_GetTeachingUnitName_Handler,
		},
		{
			MethodName: "GetTeachingUnit",
			Handler:    _PER_GetTeachingUnit_Handler,
		},
		{
			MethodName: "AddTeachingUnit",
			Handler:    _PER_AddTeachingUnit_Handler,
		},
		{
			MethodName: "UpdateTeachingUnit",
			Handler:    _PER_UpdateTeachingUnit_Handler,
		},
		{
			MethodName: "DeleteTeachingUnit",
			Handler:    _PER_DeleteTeachingUnit_Handler,
		},
		{
			MethodName: "GetTeachingUnitAndLock",
			Handler:    _PER_GetTeachingUnitAndLock_Handler,
		},
		{
			MethodName: "UnlockTeachingUnit",
			Handler:    _PER_UnlockTeachingUnit_Handler,
		},
		{
			MethodName: "GetMediumSortCouseCount",
			Handler:    _PER_GetMediumSortCouseCount_Handler,
		},
		{
			MethodName: "GetMediumSortCouseName",
			Handler:    _PER_GetMediumSortCouseName_Handler,
		},
		{
			MethodName: "GetMediumSortCouse",
			Handler:    _PER_GetMediumSortCouse_Handler,
		},
		{
			MethodName: "AddMediumSortCouse",
			Handler:    _PER_AddMediumSortCouse_Handler,
		},
		{
			MethodName: "UpdateMediumSortCouse",
			Handler:    _PER_UpdateMediumSortCouse_Handler,
		},
		{
			MethodName: "DeleteMediumSortCouse",
			Handler:    _PER_DeleteMediumSortCouse_Handler,
		},
		{
			MethodName: "GetMediumSortCouseAndLock",
			Handler:    _PER_GetMediumSortCouseAndLock_Handler,
		},
		{
			MethodName: "UnlockMediumSortCouse",
			Handler:    _PER_UnlockMediumSortCouse_Handler,
		},
		{
			MethodName: "GetCouseCount",
			Handler:    _PER_GetCouseCount_Handler,
		},
		{
			MethodName: "GetCouseSerno",
			Handler:    _PER_GetCouseSerno_Handler,
		},
		{
			MethodName: "GetCouse",
			Handler:    _PER_GetCouse_Handler,
		},
		{
			MethodName: "AddCouse",
			Handler:    _PER_AddCouse_Handler,
		},
		{
			MethodName: "UpdateCouse",
			Handler:    _PER_UpdateCouse_Handler,
		},
		{
			MethodName: "DeleteCouse",
			Handler:    _PER_DeleteCouse_Handler,
		},
		{
			MethodName: "GetCouseAndLock",
			Handler:    _PER_GetCouseAndLock_Handler,
		},
		{
			MethodName: "UnlockCouse",
			Handler:    _PER_UnlockCouse_Handler,
		},
		{
			MethodName: "GetStudyCount",
			Handler:    _PER_GetStudyCount_Handler,
		},
		{
			MethodName: "GetStudySerno",
			Handler:    _PER_GetStudySerno_Handler,
		},
		{
			MethodName: "GetStudy",
			Handler:    _PER_GetStudy_Handler,
		},
		{
			MethodName: "AddStudy",
			Handler:    _PER_AddStudy_Handler,
		},
		{
			MethodName: "UpdateStudy",
			Handler:    _PER_UpdateStudy_Handler,
		},
		{
			MethodName: "UpdateStudy1",
			Handler:    _PER_UpdateStudy1_Handler,
		},
		{
			MethodName: "DeleteStudy",
			Handler:    _PER_DeleteStudy_Handler,
		},
		{
			MethodName: "GetStudyAndLock",
			Handler:    _PER_GetStudyAndLock_Handler,
		},
		{
			MethodName: "UnlockStudy",
			Handler:    _PER_UnlockStudy_Handler,
		},
		{
			MethodName: "GetRequiredCouseCount",
			Handler:    _PER_GetRequiredCouseCount_Handler,
		},
		{
			MethodName: "GetRequiredCouse",
			Handler:    _PER_GetRequiredCouse_Handler,
		},
		{
			MethodName: "AddRequiredCouse",
			Handler:    _PER_AddRequiredCouse_Handler,
		},
		{
			MethodName: "UpdateRequiredCouse",
			Handler:    _PER_UpdateRequiredCouse_Handler,
		},
		{
			MethodName: "DeleteRequiredCouse",
			Handler:    _PER_DeleteRequiredCouse_Handler,
		},
		{
			MethodName: "GetRequiredCouseAndLock",
			Handler:    _PER_GetRequiredCouseAndLock_Handler,
		},
		{
			MethodName: "UnlockRequiredCouse",
			Handler:    _PER_UnlockRequiredCouse_Handler,
		},
		{
			MethodName: "GetSignCount",
			Handler:    _PER_GetSignCount_Handler,
		},
		{
			MethodName: "GetSign",
			Handler:    _PER_GetSign_Handler,
		},
		{
			MethodName: "AddSign",
			Handler:    _PER_AddSign_Handler,
		},
		{
			MethodName: "UpdateSign",
			Handler:    _PER_UpdateSign_Handler,
		},
		{
			MethodName: "DeleteSign",
			Handler:    _PER_DeleteSign_Handler,
		},
		{
			MethodName: "GetSignAndLock",
			Handler:    _PER_GetSignAndLock_Handler,
		},
		{
			MethodName: "UnlockSign",
			Handler:    _PER_UnlockSign_Handler,
		},
		{
			MethodName: "GetSignLevelCount",
			Handler:    _PER_GetSignLevelCount_Handler,
		},
		{
			MethodName: "GetSignLevel",
			Handler:    _PER_GetSignLevel_Handler,
		},
		{
			MethodName: "AddSignLevel",
			Handler:    _PER_AddSignLevel_Handler,
		},
		{
			MethodName: "UpdateSignLevel",
			Handler:    _PER_UpdateSignLevel_Handler,
		},
		{
			MethodName: "DeleteSignLevel",
			Handler:    _PER_DeleteSignLevel_Handler,
		},
		{
			MethodName: "GetSignLevelAndLock",
			Handler:    _PER_GetSignLevelAndLock_Handler,
		},
		{
			MethodName: "UnlockSignLevel",
			Handler:    _PER_UnlockSignLevel_Handler,
		},
		{
			MethodName: "GetPlanSerialCount",
			Handler:    _PER_GetPlanSerialCount_Handler,
		},
		{
			MethodName: "GetPlanSerial",
			Handler:    _PER_GetPlanSerial_Handler,
		},
		{
			MethodName: "AddPlanSerial",
			Handler:    _PER_AddPlanSerial_Handler,
		},
		{
			MethodName: "UpdatePlanSerial",
			Handler:    _PER_UpdatePlanSerial_Handler,
		},
		{
			MethodName: "DeletePlanSerial",
			Handler:    _PER_DeletePlanSerial_Handler,
		},
		{
			MethodName: "GetPlanSerialAndLock",
			Handler:    _PER_GetPlanSerialAndLock_Handler,
		},
		{
			MethodName: "UnlockPlanSerial",
			Handler:    _PER_UnlockPlanSerial_Handler,
		},
		{
			MethodName: "GetJobDutyCount",
			Handler:    _PER_GetJobDutyCount_Handler,
		},
		{
			MethodName: "GetJobDuty",
			Handler:    _PER_GetJobDuty_Handler,
		},
		{
			MethodName: "AddJobDuty",
			Handler:    _PER_AddJobDuty_Handler,
		},
		{
			MethodName: "UpdateJobDuty",
			Handler:    _PER_UpdateJobDuty_Handler,
		},
		{
			MethodName: "DeleteJobDuty",
			Handler:    _PER_DeleteJobDuty_Handler,
		},
		{
			MethodName: "GetJobDutyAndLock",
			Handler:    _PER_GetJobDutyAndLock_Handler,
		},
		{
			MethodName: "UnlockJobDuty",
			Handler:    _PER_UnlockJobDuty_Handler,
		},
		{
			MethodName: "GetTrainingPlanCount",
			Handler:    _PER_GetTrainingPlanCount_Handler,
		},
		{
			MethodName: "GetTrainingPlan",
			Handler:    _PER_GetTrainingPlan_Handler,
		},
		{
			MethodName: "AddTrainingPlan",
			Handler:    _PER_AddTrainingPlan_Handler,
		},
		{
			MethodName: "UpdateTrainingPlan",
			Handler:    _PER_UpdateTrainingPlan_Handler,
		},
		{
			MethodName: "DeleteTrainingPlan",
			Handler:    _PER_DeleteTrainingPlan_Handler,
		},
		{
			MethodName: "GetTrainingPlanAndLock",
			Handler:    _PER_GetTrainingPlanAndLock_Handler,
		},
		{
			MethodName: "UnlockTrainingPlan",
			Handler:    _PER_UnlockTrainingPlan_Handler,
		},
		{
			MethodName: "GetSpecialOperatorCount",
			Handler:    _PER_GetSpecialOperatorCount_Handler,
		},
		{
			MethodName: "GetSpecialOperator",
			Handler:    _PER_GetSpecialOperator_Handler,
		},
		{
			MethodName: "GetSpecialOperator1",
			Handler:    _PER_GetSpecialOperator1_Handler,
		},
		{
			MethodName: "AddSpecialOperator",
			Handler:    _PER_AddSpecialOperator_Handler,
		},
		{
			MethodName: "UpdateSpecialOperator",
			Handler:    _PER_UpdateSpecialOperator_Handler,
		},
		{
			MethodName: "DeleteSpecialOperator",
			Handler:    _PER_DeleteSpecialOperator_Handler,
		},
		{
			MethodName: "GetSpecialOperatorAndLock",
			Handler:    _PER_GetSpecialOperatorAndLock_Handler,
		},
		{
			MethodName: "UnlockSpecialOperator",
			Handler:    _PER_UnlockSpecialOperator_Handler,
		},
		{
			MethodName: "GetJobDutyRequiredCouseCount",
			Handler:    _PER_GetJobDutyRequiredCouseCount_Handler,
		},
		{
			MethodName: "GetJobDutyRequiredCouse",
			Handler:    _PER_GetJobDutyRequiredCouse_Handler,
		},
		{
			MethodName: "AddJobDutyRequiredCouse",
			Handler:    _PER_AddJobDutyRequiredCouse_Handler,
		},
		{
			MethodName: "UpdateJobDutyRequiredCouse",
			Handler:    _PER_UpdateJobDutyRequiredCouse_Handler,
		},
		{
			MethodName: "DeleteJobDutyRequiredCouse",
			Handler:    _PER_DeleteJobDutyRequiredCouse_Handler,
		},
		{
			MethodName: "GetJobDutyRequiredCouseAndLock",
			Handler:    _PER_GetJobDutyRequiredCouseAndLock_Handler,
		},
		{
			MethodName: "UnlockJobDutyRequiredCouse",
			Handler:    _PER_UnlockJobDutyRequiredCouse_Handler,
		},
		{
			MethodName: "GetTrainingFeesCount",
			Handler:    _PER_GetTrainingFeesCount_Handler,
		},
		{
			MethodName: "GetTrainingFees",
			Handler:    _PER_GetTrainingFees_Handler,
		},
		{
			MethodName: "AddTrainingFees",
			Handler:    _PER_AddTrainingFees_Handler,
		},
		{
			MethodName: "UpdateTrainingFees",
			Handler:    _PER_UpdateTrainingFees_Handler,
		},
		{
			MethodName: "DeleteTrainingFees",
			Handler:    _PER_DeleteTrainingFees_Handler,
		},
		{
			MethodName: "GetTrainingFeesAndLock",
			Handler:    _PER_GetTrainingFeesAndLock_Handler,
		},
		{
			MethodName: "UnlockTrainingFees",
			Handler:    _PER_UnlockTrainingFees_Handler,
		},
		{
			MethodName: "GetLearnCount",
			Handler:    _PER_GetLearnCount_Handler,
		},
		{
			MethodName: "GetLearn",
			Handler:    _PER_GetLearn_Handler,
		},
		{
			MethodName: "AddLearn",
			Handler:    _PER_AddLearn_Handler,
		},
		{
			MethodName: "AddLearn1",
			Handler:    _PER_AddLearn1_Handler,
		},
		{
			MethodName: "UpdateLearn",
			Handler:    _PER_UpdateLearn_Handler,
		},
		{
			MethodName: "UpdateLearnUnitno",
			Handler:    _PER_UpdateLearnUnitno_Handler,
		},
		{
			MethodName: "DeleteLearn",
			Handler:    _PER_DeleteLearn_Handler,
		},
		{
			MethodName: "GetLearnAndLock",
			Handler:    _PER_GetLearnAndLock_Handler,
		},
		{
			MethodName: "UnlockLearn",
			Handler:    _PER_UnlockLearn_Handler,
		},
		{
			MethodName: "GetLearnCouseCount",
			Handler:    _PER_GetLearnCouseCount_Handler,
		},
		{
			MethodName: "GetLearnCouseSerno",
			Handler:    _PER_GetLearnCouseSerno_Handler,
		},
		{
			MethodName: "GetLearnCouse",
			Handler:    _PER_GetLearnCouse_Handler,
		},
		{
			MethodName: "AddLearnCouse",
			Handler:    _PER_AddLearnCouse_Handler,
		},
		{
			MethodName: "AddLearnCouse1",
			Handler:    _PER_AddLearnCouse1_Handler,
		},
		{
			MethodName: "UpdateLearnCouse",
			Handler:    _PER_UpdateLearnCouse_Handler,
		},
		{
			MethodName: "DeleteLearnCouse",
			Handler:    _PER_DeleteLearnCouse_Handler,
		},
		{
			MethodName: "GetLearnCouseAndLock",
			Handler:    _PER_GetLearnCouseAndLock_Handler,
		},
		{
			MethodName: "UnlockLearnCouse",
			Handler:    _PER_UnlockLearnCouse_Handler,
		},
		{
			MethodName: "GetTrainingMaterialsCount",
			Handler:    _PER_GetTrainingMaterialsCount_Handler,
		},
		{
			MethodName: "GetTrainingMaterials",
			Handler:    _PER_GetTrainingMaterials_Handler,
		},
		{
			MethodName: "GetTrainingMaterialsSerno",
			Handler:    _PER_GetTrainingMaterialsSerno_Handler,
		},
		{
			MethodName: "AddTrainingMaterials",
			Handler:    _PER_AddTrainingMaterials_Handler,
		},
		{
			MethodName: "UpdateTrainingMaterials",
			Handler:    _PER_UpdateTrainingMaterials_Handler,
		},
		{
			MethodName: "DeleteTrainingMaterials",
			Handler:    _PER_DeleteTrainingMaterials_Handler,
		},
		{
			MethodName: "GetTrainingMaterialsAndLock",
			Handler:    _PER_GetTrainingMaterialsAndLock_Handler,
		},
		{
			MethodName: "UnlockTrainingMaterials",
			Handler:    _PER_UnlockTrainingMaterials_Handler,
		},
		{
			MethodName: "GetJobDutyPostCount",
			Handler:    _PER_GetJobDutyPostCount_Handler,
		},
		{
			MethodName: "GetJobDutyPost",
			Handler:    _PER_GetJobDutyPost_Handler,
		},
		{
			MethodName: "AddJobDutyPost",
			Handler:    _PER_AddJobDutyPost_Handler,
		},
		{
			MethodName: "UpdateJobDutyPost",
			Handler:    _PER_UpdateJobDutyPost_Handler,
		},
		{
			MethodName: "DeleteJobDutyPost",
			Handler:    _PER_DeleteJobDutyPost_Handler,
		},
		{
			MethodName: "GetJobDutyPostAndLock",
			Handler:    _PER_GetJobDutyPostAndLock_Handler,
		},
		{
			MethodName: "UnlockJobDutyPost",
			Handler:    _PER_UnlockJobDutyPost_Handler,
		},
		{
			MethodName: "GetCredentialsManagementCount",
			Handler:    _PER_GetCredentialsManagementCount_Handler,
		},
		{
			MethodName: "GetCredentialsManagement",
			Handler:    _PER_GetCredentialsManagement_Handler,
		},
		{
			MethodName: "AddCredentialsManagement",
			Handler:    _PER_AddCredentialsManagement_Handler,
		},
		{
			MethodName: "UpdateCredentialsManagement",
			Handler:    _PER_UpdateCredentialsManagement_Handler,
		},
		{
			MethodName: "DeleteCredentialsManagement",
			Handler:    _PER_DeleteCredentialsManagement_Handler,
		},
		{
			MethodName: "GetCredentialsManagementAndLock",
			Handler:    _PER_GetCredentialsManagementAndLock_Handler,
		},
		{
			MethodName: "UnlockCredentialsManagement",
			Handler:    _PER_UnlockCredentialsManagement_Handler,
		},
		{
			MethodName: "GetJobRequiredCouseCount",
			Handler:    _PER_GetJobRequiredCouseCount_Handler,
		},
		{
			MethodName: "GetJobRequiredCouse",
			Handler:    _PER_GetJobRequiredCouse_Handler,
		},
		{
			MethodName: "AddJobRequiredCouse",
			Handler:    _PER_AddJobRequiredCouse_Handler,
		},
		{
			MethodName: "UpdateJobRequiredCouse",
			Handler:    _PER_UpdateJobRequiredCouse_Handler,
		},
		{
			MethodName: "DeleteJobRequiredCouse",
			Handler:    _PER_DeleteJobRequiredCouse_Handler,
		},
		{
			MethodName: "GetJobRequiredCouseAndLock",
			Handler:    _PER_GetJobRequiredCouseAndLock_Handler,
		},
		{
			MethodName: "UnlockJobRequiredCouse",
			Handler:    _PER_UnlockJobRequiredCouse_Handler,
		},
		{
			MethodName: "GetJobTitleCount",
			Handler:    _PER_GetJobTitleCount_Handler,
		},
		{
			MethodName: "GetJobTitle",
			Handler:    _PER_GetJobTitle_Handler,
		},
		{
			MethodName: "AddJobTitle",
			Handler:    _PER_AddJobTitle_Handler,
		},
		{
			MethodName: "UpdateJobTitle",
			Handler:    _PER_UpdateJobTitle_Handler,
		},
		{
			MethodName: "DeleteJobTitle",
			Handler:    _PER_DeleteJobTitle_Handler,
		},
		{
			MethodName: "GetJobTitleAndLock",
			Handler:    _PER_GetJobTitleAndLock_Handler,
		},
		{
			MethodName: "UnlockJobTitle",
			Handler:    _PER_UnlockJobTitle_Handler,
		},
		{
			MethodName: "GetWorkQualificationCount",
			Handler:    _PER_GetWorkQualificationCount_Handler,
		},
		{
			MethodName: "GetWorkQualification",
			Handler:    _PER_GetWorkQualification_Handler,
		},
		{
			MethodName: "AddWorkQualification",
			Handler:    _PER_AddWorkQualification_Handler,
		},
		{
			MethodName: "UpdateWorkQualification",
			Handler:    _PER_UpdateWorkQualification_Handler,
		},
		{
			MethodName: "DeleteWorkQualification",
			Handler:    _PER_DeleteWorkQualification_Handler,
		},
		{
			MethodName: "GetWorkQualificationAndLock",
			Handler:    _PER_GetWorkQualificationAndLock_Handler,
		},
		{
			MethodName: "UnlockWorkQualification",
			Handler:    _PER_UnlockWorkQualification_Handler,
		},
		{
			MethodName: "GetEmployeeOtherCode1",
			Handler:    _PER_GetEmployeeOtherCode1_Handler,
		},
		{
			MethodName: "GetEmployee",
			Handler:    _PER_GetEmployee_Handler,
		},
		{
			MethodName: "GetEmployees",
			Handler:    _PER_GetEmployees_Handler,
		},
		{
			MethodName: "GetSeccodCodsc",
			Handler:    _PER_GetSeccodCodsc_Handler,
		},
		{
			MethodName: "GetDepartmentDesc",
			Handler:    _PER_GetDepartmentDesc_Handler,
		},
		{
			MethodName: "GetDepClassGroup",
			Handler:    _PER_GetDepClassGroup_Handler,
		},
		{
			MethodName: "GetEmployeeForTrainingRecord",
			Handler:    _PER_GetEmployeeForTrainingRecord_Handler,
		},
		{
			MethodName: "GetTrainingReport",
			Handler:    _PER_GetTrainingReport_Handler,
		},
		{
			MethodName: "GetTrainingRecordWithOneSQL",
			Handler:    _PER_GetTrainingRecordWithOneSQL_Handler,
		},
		{
			MethodName: "GetTrainingRecordWithMultiSQL",
			Handler:    _PER_GetTrainingRecordWithMultiSQL_Handler,
		},
		{
			MethodName: "GetTrainingScoreReport",
			Handler:    _PER_GetTrainingScoreReport_Handler,
		},
		{
			MethodName: "GetFlexibleWorkHour",
			Handler:    _PER_GetFlexibleWorkHour_Handler,
		},
		{
			MethodName: "AddFlexibleWorkHour",
			Handler:    _PER_AddFlexibleWorkHour_Handler,
		},
		{
			MethodName: "UpdateFlexibleWorkHour",
			Handler:    _PER_UpdateFlexibleWorkHour_Handler,
		},
		{
			MethodName: "DeleteFlexibleWorkHour",
			Handler:    _PER_DeleteFlexibleWorkHour_Handler,
		},
		{
			MethodName: "GetFlexibleWorkHourAndLock",
			Handler:    _PER_GetFlexibleWorkHourAndLock_Handler,
		},
		{
			MethodName: "FlexibleWorkHourUnlock",
			Handler:    _PER_FlexibleWorkHourUnlock_Handler,
		},
		{
			MethodName: "LoadJob",
			Handler:    _PER_LoadJob_Handler,
		},
		{
			MethodName: "UnloadJob",
			Handler:    _PER_UnloadJob_Handler,
		},
		{
			MethodName: "UnloadJob1",
			Handler:    _PER_UnloadJob1_Handler,
		},
		{
			MethodName: "UnloadJob2",
			Handler:    _PER_UnloadJob2_Handler,
		},
		{
			MethodName: "ListPermas",
			Handler:    _PER_ListPermas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
