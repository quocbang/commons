// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package dui

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x01, 0x53, 0x7a, 0x29, 0xb9,
	0x7a, 0x29, 0xa5, 0x99, 0x52, 0x32, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x89, 0x05, 0x99,
	0xfa, 0x89, 0x79, 0x79, 0xf9, 0x25, 0x89, 0x25, 0x99, 0xf9, 0x79, 0xc5, 0x10, 0xb5, 0x52, 0x12,
	0x60, 0x4a, 0x3f, 0x25, 0x57, 0x3f, 0xa5, 0x34, 0x53, 0xbf, 0xb0, 0x34, 0xb5, 0xa8, 0x12, 0x22,
	0x63, 0x14, 0xcd, 0xc5, 0xec, 0x12, 0xea, 0x29, 0x14, 0xc2, 0xc5, 0x1a, 0x08, 0x12, 0x15, 0x92,
	0xd2, 0x43, 0x36, 0x56, 0x0f, 0x2c, 0x18, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x25, 0x81,
	0x55, 0xae, 0x20, 0xa7, 0x52, 0x49, 0xb4, 0xe9, 0xf2, 0x93, 0xc9, 0x4c, 0xfc, 0x4a, 0x5c, 0x08,
	0xf3, 0xad, 0x18, 0xb5, 0x9c, 0xac, 0xa2, 0x2c, 0xd2, 0x33, 0x4b, 0x72, 0x12, 0x93, 0xf4, 0xb2,
	0x53, 0xf3, 0x52, 0x12, 0xf5, 0x92, 0xf3, 0x73, 0xf5, 0x4a, 0xca, 0xf5, 0xc1, 0x1c, 0xfd, 0xe4,
	0xfc, 0xdc, 0xdc, 0xfc, 0xbc, 0x62, 0xfd, 0x32, 0x23, 0x7d, 0x88, 0xeb, 0xd2, 0xf3, 0x73, 0x12,
	0xf3, 0xd2, 0xa1, 0x8e, 0x4c, 0x62, 0x03, 0x0b, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xcb,
	0x58, 0x6c, 0x73, 0xf6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DUIClient is the client API for DUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DUIClient interface {
	// Query gets data from table or view via query conditions
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
}

type dUIClient struct {
	cc *grpc.ClientConn
}

func NewDUIClient(cc *grpc.ClientConn) DUIClient {
	return &dUIClient{cc}
}

func (c *dUIClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, "/proto.dm.dui.DUI/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DUIServer is the server API for DUI service.
type DUIServer interface {
	// Query gets data from table or view via query conditions
	Query(context.Context, *QueryRequest) (*QueryReply, error)
}

func RegisterDUIServer(s *grpc.Server, srv DUIServer) {
	s.RegisterService(&_DUI_serviceDesc, srv)
}

func _DUI_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DUIServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.dui.DUI/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DUIServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DUI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.dm.dui.DUI",
	HandlerType: (*DUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _DUI_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
