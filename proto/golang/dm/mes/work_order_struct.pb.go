// Code generated by protoc-gen-go. DO NOT EDIT.
// source: work_order_struct.proto

package mes

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetWorkOrderRequest struct {
	EqptId               string   `protobuf:"bytes,1,opt,name=eqpt_id,json=eqptId,proto3" json:"eqpt_id,omitempty"`
	WorkDate             string   `protobuf:"bytes,2,opt,name=work_date,json=workDate,proto3" json:"work_date,omitempty"`
	LotId                string   `protobuf:"bytes,3,opt,name=lot_id,json=lotId,proto3" json:"lot_id,omitempty"`
	Shift                string   `protobuf:"bytes,4,opt,name=shift,proto3" json:"shift,omitempty"`
	DeptId               string   `protobuf:"bytes,5,opt,name=dept_id,json=deptId,proto3" json:"dept_id,omitempty"`
	ProductId            string   `protobuf:"bytes,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CrProcessName        string   `protobuf:"bytes,7,opt,name=cr_process_name,json=crProcessName,proto3" json:"cr_process_name,omitempty"`
	NxProcessName        string   `protobuf:"bytes,8,opt,name=nx_process_name,json=nxProcessName,proto3" json:"nx_process_name,omitempty"`
	StartDate            string   `protobuf:"bytes,9,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate              string   `protobuf:"bytes,10,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	RunFlag              string   `protobuf:"bytes,11,opt,name=run_flag,json=runFlag,proto3" json:"run_flag,omitempty"`
	LotStat              string   `protobuf:"bytes,12,opt,name=lot_stat,json=lotStat,proto3" json:"lot_stat,omitempty"`
	ProdType             string   `protobuf:"bytes,13,opt,name=prod_type,json=prodType,proto3" json:"prod_type,omitempty"`
	PrepStart            string   `protobuf:"bytes,14,opt,name=prep_start,json=prepStart,proto3" json:"prep_start,omitempty"`
	PrepEnd              string   `protobuf:"bytes,15,opt,name=prep_end,json=prepEnd,proto3" json:"prep_end,omitempty"`
	MtrlType             string   `protobuf:"bytes,16,opt,name=mtrl_type,json=mtrlType,proto3" json:"mtrl_type,omitempty"`
	Complete             bool     `protobuf:"varint,17,opt,name=complete,proto3" json:"complete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWorkOrderRequest) Reset()         { *m = GetWorkOrderRequest{} }
func (m *GetWorkOrderRequest) String() string { return proto.CompactTextString(m) }
func (*GetWorkOrderRequest) ProtoMessage()    {}
func (*GetWorkOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_83c1f3d126d48849, []int{0}
}

func (m *GetWorkOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWorkOrderRequest.Unmarshal(m, b)
}
func (m *GetWorkOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWorkOrderRequest.Marshal(b, m, deterministic)
}
func (m *GetWorkOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkOrderRequest.Merge(m, src)
}
func (m *GetWorkOrderRequest) XXX_Size() int {
	return xxx_messageInfo_GetWorkOrderRequest.Size(m)
}
func (m *GetWorkOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkOrderRequest proto.InternalMessageInfo

func (m *GetWorkOrderRequest) GetEqptId() string {
	if m != nil {
		return m.EqptId
	}
	return ""
}

func (m *GetWorkOrderRequest) GetWorkDate() string {
	if m != nil {
		return m.WorkDate
	}
	return ""
}

func (m *GetWorkOrderRequest) GetLotId() string {
	if m != nil {
		return m.LotId
	}
	return ""
}

func (m *GetWorkOrderRequest) GetShift() string {
	if m != nil {
		return m.Shift
	}
	return ""
}

func (m *GetWorkOrderRequest) GetDeptId() string {
	if m != nil {
		return m.DeptId
	}
	return ""
}

func (m *GetWorkOrderRequest) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *GetWorkOrderRequest) GetCrProcessName() string {
	if m != nil {
		return m.CrProcessName
	}
	return ""
}

func (m *GetWorkOrderRequest) GetNxProcessName() string {
	if m != nil {
		return m.NxProcessName
	}
	return ""
}

func (m *GetWorkOrderRequest) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *GetWorkOrderRequest) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *GetWorkOrderRequest) GetRunFlag() string {
	if m != nil {
		return m.RunFlag
	}
	return ""
}

func (m *GetWorkOrderRequest) GetLotStat() string {
	if m != nil {
		return m.LotStat
	}
	return ""
}

func (m *GetWorkOrderRequest) GetProdType() string {
	if m != nil {
		return m.ProdType
	}
	return ""
}

func (m *GetWorkOrderRequest) GetPrepStart() string {
	if m != nil {
		return m.PrepStart
	}
	return ""
}

func (m *GetWorkOrderRequest) GetPrepEnd() string {
	if m != nil {
		return m.PrepEnd
	}
	return ""
}

func (m *GetWorkOrderRequest) GetMtrlType() string {
	if m != nil {
		return m.MtrlType
	}
	return ""
}

func (m *GetWorkOrderRequest) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

type GetWorkOrderReply struct {
	ResvedOrders         []*Lot   `protobuf:"bytes,1,rep,name=resved_orders,json=resvedOrders,proto3" json:"resved_orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWorkOrderReply) Reset()         { *m = GetWorkOrderReply{} }
func (m *GetWorkOrderReply) String() string { return proto.CompactTextString(m) }
func (*GetWorkOrderReply) ProtoMessage()    {}
func (*GetWorkOrderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_83c1f3d126d48849, []int{1}
}

func (m *GetWorkOrderReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWorkOrderReply.Unmarshal(m, b)
}
func (m *GetWorkOrderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWorkOrderReply.Marshal(b, m, deterministic)
}
func (m *GetWorkOrderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkOrderReply.Merge(m, src)
}
func (m *GetWorkOrderReply) XXX_Size() int {
	return xxx_messageInfo_GetWorkOrderReply.Size(m)
}
func (m *GetWorkOrderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkOrderReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkOrderReply proto.InternalMessageInfo

func (m *GetWorkOrderReply) GetResvedOrders() []*Lot {
	if m != nil {
		return m.ResvedOrders
	}
	return nil
}

type Lot struct {
	FtyId                int32    `protobuf:"varint,1,opt,name=fty_id,json=ftyId,proto3" json:"fty_id,omitempty"`
	LotId                string   `protobuf:"bytes,2,opt,name=lot_id,json=lotId,proto3" json:"lot_id,omitempty"`
	RecipeId             string   `protobuf:"bytes,3,opt,name=recipe_id,json=recipeId,proto3" json:"recipe_id,omitempty"`
	ResvEqptId           string   `protobuf:"bytes,4,opt,name=resv_eqpt_id,json=resvEqptId,proto3" json:"resv_eqpt_id,omitempty"`
	ProductId            string   `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	StageStatus          int32    `protobuf:"varint,6,opt,name=stage_status,json=stageStatus,proto3" json:"stage_status,omitempty"`
	MajorVersion         string   `protobuf:"bytes,7,opt,name=major_version,json=majorVersion,proto3" json:"major_version,omitempty"`
	CrProcessName        string   `protobuf:"bytes,8,opt,name=cr_process_name,json=crProcessName,proto3" json:"cr_process_name,omitempty"`
	NxProcessName        string   `protobuf:"bytes,9,opt,name=nx_process_name,json=nxProcessName,proto3" json:"nx_process_name,omitempty"`
	LotStat              string   `protobuf:"bytes,10,opt,name=lot_stat,json=lotStat,proto3" json:"lot_stat,omitempty"`
	ResvDate             string   `protobuf:"bytes,11,opt,name=resv_date,json=resvDate,proto3" json:"resv_date,omitempty"`
	ResvShift            string   `protobuf:"bytes,12,opt,name=resv_shift,json=resvShift,proto3" json:"resv_shift,omitempty"`
	ShiftSeq             string   `protobuf:"bytes,13,opt,name=shift_seq,json=shiftSeq,proto3" json:"shift_seq,omitempty"`
	DeptId               string   `protobuf:"bytes,14,opt,name=dept_id,json=deptId,proto3" json:"dept_id,omitempty"`
	MoveInQty            float32  `protobuf:"fixed32,15,opt,name=move_in_qty,json=moveInQty,proto3" json:"move_in_qty,omitempty"`
	MoveOutQty           float32  `protobuf:"fixed32,16,opt,name=move_out_qty,json=moveOutQty,proto3" json:"move_out_qty,omitempty"`
	PlanOptQty           float32  `protobuf:"fixed32,17,opt,name=plan_opt_qty,json=planOptQty,proto3" json:"plan_opt_qty,omitempty"`
	ShtCnt               int32    `protobuf:"varint,18,opt,name=sht_cnt,json=shtCnt,proto3" json:"sht_cnt,omitempty"`
	InShtCnt             int32    `protobuf:"varint,19,opt,name=in_sht_cnt,json=inShtCnt,proto3" json:"in_sht_cnt,omitempty"`
	OutShtCnt            int32    `protobuf:"varint,20,opt,name=out_sht_cnt,json=outShtCnt,proto3" json:"out_sht_cnt,omitempty"`
	UpdateAt             string   `protobuf:"bytes,21,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	UpdateBy             string   `protobuf:"bytes,22,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`
	InsertAt             string   `protobuf:"bytes,23,opt,name=insert_at,json=insertAt,proto3" json:"insert_at,omitempty"`
	InsertBy             string   `protobuf:"bytes,24,opt,name=insert_by,json=insertBy,proto3" json:"insert_by,omitempty"`
	RunFlag              string   `protobuf:"bytes,25,opt,name=run_flag,json=runFlag,proto3" json:"run_flag,omitempty"`
	ProdType             string   `protobuf:"bytes,26,opt,name=prod_type,json=prodType,proto3" json:"prod_type,omitempty"`
	RecipeEqptId         string   `protobuf:"bytes,27,opt,name=recipe_eqpt_id,json=recipeEqptId,proto3" json:"recipe_eqpt_id,omitempty"`
	RwkName              string   `protobuf:"bytes,28,opt,name=rwk_name,json=rwkName,proto3" json:"rwk_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Lot) Reset()         { *m = Lot{} }
func (m *Lot) String() string { return proto.CompactTextString(m) }
func (*Lot) ProtoMessage()    {}
func (*Lot) Descriptor() ([]byte, []int) {
	return fileDescriptor_83c1f3d126d48849, []int{2}
}

func (m *Lot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Lot.Unmarshal(m, b)
}
func (m *Lot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Lot.Marshal(b, m, deterministic)
}
func (m *Lot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lot.Merge(m, src)
}
func (m *Lot) XXX_Size() int {
	return xxx_messageInfo_Lot.Size(m)
}
func (m *Lot) XXX_DiscardUnknown() {
	xxx_messageInfo_Lot.DiscardUnknown(m)
}

var xxx_messageInfo_Lot proto.InternalMessageInfo

func (m *Lot) GetFtyId() int32 {
	if m != nil {
		return m.FtyId
	}
	return 0
}

func (m *Lot) GetLotId() string {
	if m != nil {
		return m.LotId
	}
	return ""
}

func (m *Lot) GetRecipeId() string {
	if m != nil {
		return m.RecipeId
	}
	return ""
}

func (m *Lot) GetResvEqptId() string {
	if m != nil {
		return m.ResvEqptId
	}
	return ""
}

func (m *Lot) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *Lot) GetStageStatus() int32 {
	if m != nil {
		return m.StageStatus
	}
	return 0
}

func (m *Lot) GetMajorVersion() string {
	if m != nil {
		return m.MajorVersion
	}
	return ""
}

func (m *Lot) GetCrProcessName() string {
	if m != nil {
		return m.CrProcessName
	}
	return ""
}

func (m *Lot) GetNxProcessName() string {
	if m != nil {
		return m.NxProcessName
	}
	return ""
}

func (m *Lot) GetLotStat() string {
	if m != nil {
		return m.LotStat
	}
	return ""
}

func (m *Lot) GetResvDate() string {
	if m != nil {
		return m.ResvDate
	}
	return ""
}

func (m *Lot) GetResvShift() string {
	if m != nil {
		return m.ResvShift
	}
	return ""
}

func (m *Lot) GetShiftSeq() string {
	if m != nil {
		return m.ShiftSeq
	}
	return ""
}

func (m *Lot) GetDeptId() string {
	if m != nil {
		return m.DeptId
	}
	return ""
}

func (m *Lot) GetMoveInQty() float32 {
	if m != nil {
		return m.MoveInQty
	}
	return 0
}

func (m *Lot) GetMoveOutQty() float32 {
	if m != nil {
		return m.MoveOutQty
	}
	return 0
}

func (m *Lot) GetPlanOptQty() float32 {
	if m != nil {
		return m.PlanOptQty
	}
	return 0
}

func (m *Lot) GetShtCnt() int32 {
	if m != nil {
		return m.ShtCnt
	}
	return 0
}

func (m *Lot) GetInShtCnt() int32 {
	if m != nil {
		return m.InShtCnt
	}
	return 0
}

func (m *Lot) GetOutShtCnt() int32 {
	if m != nil {
		return m.OutShtCnt
	}
	return 0
}

func (m *Lot) GetUpdateAt() string {
	if m != nil {
		return m.UpdateAt
	}
	return ""
}

func (m *Lot) GetUpdateBy() string {
	if m != nil {
		return m.UpdateBy
	}
	return ""
}

func (m *Lot) GetInsertAt() string {
	if m != nil {
		return m.InsertAt
	}
	return ""
}

func (m *Lot) GetInsertBy() string {
	if m != nil {
		return m.InsertBy
	}
	return ""
}

func (m *Lot) GetRunFlag() string {
	if m != nil {
		return m.RunFlag
	}
	return ""
}

func (m *Lot) GetProdType() string {
	if m != nil {
		return m.ProdType
	}
	return ""
}

func (m *Lot) GetRecipeEqptId() string {
	if m != nil {
		return m.RecipeEqptId
	}
	return ""
}

func (m *Lot) GetRwkName() string {
	if m != nil {
		return m.RwkName
	}
	return ""
}

func init() {
	proto.RegisterType((*GetWorkOrderRequest)(nil), "proto.dm.mes.GetWorkOrderRequest")
	proto.RegisterType((*GetWorkOrderReply)(nil), "proto.dm.mes.GetWorkOrderReply")
	proto.RegisterType((*Lot)(nil), "proto.dm.mes.Lot")
}

func init() { proto.RegisterFile("work_order_struct.proto", fileDescriptor_83c1f3d126d48849) }

var fileDescriptor_83c1f3d126d48849 = []byte{
	// 773 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xd1, 0x6f, 0x1b, 0x45,
	0x10, 0xc6, 0x95, 0xa4, 0x76, 0x7c, 0x63, 0x27, 0x6d, 0xae, 0x2d, 0xb9, 0xd6, 0x4d, 0x15, 0x02,
	0x42, 0x79, 0xb2, 0xa5, 0x22, 0x21, 0xc4, 0x1b, 0x81, 0x82, 0x2c, 0x2a, 0x02, 0x36, 0x02, 0x89,
	0x97, 0xd5, 0xe5, 0x76, 0xe2, 0x1c, 0xbe, 0xdb, 0x3d, 0xef, 0xce, 0x39, 0xbd, 0x37, 0xfe, 0x52,
	0xfe, 0x16, 0xb4, 0x33, 0x3e, 0x38, 0x97, 0x3c, 0xf0, 0x74, 0xda, 0xef, 0xfb, 0x76, 0x46, 0xb3,
	0xf7, 0x1b, 0x38, 0xbd, 0xb7, 0x6e, 0xa5, 0xac, 0xd3, 0xe8, 0x94, 0x27, 0x57, 0x67, 0x34, 0xa9,
	0x9c, 0x25, 0x1b, 0x8f, 0xf8, 0x33, 0xd1, 0xe5, 0xa4, 0x44, 0x7f, 0xf1, 0xe7, 0x23, 0x78, 0xfa,
	0x3d, 0xd2, 0x6f, 0xd6, 0xad, 0xae, 0x43, 0x76, 0x8e, 0xeb, 0x1a, 0x3d, 0xc5, 0xa7, 0x70, 0x88,
	0xeb, 0x8a, 0x54, 0xae, 0x93, 0xbd, 0xf3, 0xbd, 0xcb, 0x68, 0xde, 0x0f, 0xc7, 0x99, 0x8e, 0xc7,
	0x10, 0x71, 0x65, 0x9d, 0x12, 0x26, 0xfb, 0x6c, 0x0d, 0x82, 0xf0, 0x6d, 0x4a, 0x18, 0x3f, 0x87,
	0x7e, 0x61, 0xf9, 0xd2, 0x01, 0x3b, 0xbd, 0xc2, 0x86, 0x3b, 0xcf, 0xa0, 0xe7, 0xef, 0xf2, 0x5b,
	0x4a, 0x1e, 0x89, 0xca, 0x87, 0xd0, 0x42, 0xa3, 0xb4, 0xe8, 0x49, 0x8b, 0x70, 0x9c, 0xe9, 0xf8,
	0x0c, 0xa0, 0x72, 0x56, 0xd7, 0x19, 0x7b, 0x7d, 0xf6, 0xa2, 0xad, 0x32, 0xd3, 0xf1, 0x67, 0xf0,
	0x38, 0x73, 0xaa, 0x72, 0x36, 0x43, 0xef, 0x95, 0x49, 0x4b, 0x4c, 0x0e, 0x39, 0x73, 0x94, 0xb9,
	0x9f, 0x44, 0xfd, 0x31, 0x2d, 0x31, 0xe4, 0xcc, 0xfb, 0xdd, 0xdc, 0x40, 0x72, 0xe6, 0x7d, 0x37,
	0x77, 0x06, 0xe0, 0x29, 0x75, 0x24, 0x23, 0x45, 0xd2, 0x8e, 0x15, 0x9e, 0xe9, 0x05, 0x0c, 0xd0,
	0x68, 0x31, 0x81, 0xcd, 0x43, 0x34, 0xba, 0xb5, 0x5c, 0x6d, 0xd4, 0x6d, 0x91, 0x2e, 0x93, 0xa1,
	0x58, 0xae, 0x36, 0xdf, 0x15, 0xe9, 0x32, 0x58, 0xe1, 0x25, 0x3c, 0xa5, 0x94, 0x8c, 0xc4, 0x2a,
	0x2c, 0x2d, 0x28, 0xa5, 0xf0, 0x82, 0x61, 0x18, 0x45, 0x4d, 0x85, 0xc9, 0x91, 0xbc, 0x60, 0x10,
	0x7e, 0x69, 0x2a, 0x94, 0xd9, 0xb1, 0x52, 0xdc, 0x3f, 0x39, 0x6e, 0x67, 0xc7, 0x6a, 0x11, 0x84,
	0x50, 0x96, 0x6d, 0x34, 0x3a, 0x79, 0x2c, 0x65, 0xc3, 0xf9, 0xad, 0xe1, 0x1f, 0x53, 0x92, 0x2b,
	0xa4, 0xec, 0x13, 0x29, 0x1b, 0x04, 0x2e, 0xfb, 0x12, 0x06, 0x99, 0x2d, 0xab, 0x02, 0x09, 0x93,
	0x93, 0xf3, 0xbd, 0xcb, 0xc1, 0xfc, 0x9f, 0xf3, 0xc5, 0x0f, 0x70, 0xb2, 0x4b, 0x40, 0x55, 0x34,
	0xf1, 0x17, 0x70, 0xe4, 0xd0, 0x6f, 0x50, 0x0b, 0x42, 0x3e, 0xd9, 0x3b, 0x3f, 0xb8, 0x1c, 0xbe,
	0x39, 0x99, 0x74, 0xe9, 0x99, 0xbc, 0xb3, 0x34, 0x1f, 0x49, 0x8e, 0xef, 0xfa, 0x8b, 0xbf, 0xfa,
	0x70, 0xf0, 0xce, 0x52, 0x20, 0xe1, 0x96, 0x9a, 0x16, 0x9f, 0xde, 0xbc, 0x77, 0x4b, 0xcd, 0x4c,
	0x77, 0x00, 0xd9, 0xef, 0x02, 0x32, 0x86, 0xc8, 0x61, 0x96, 0x57, 0xf8, 0x2f, 0x3a, 0x03, 0x11,
	0x66, 0x3a, 0x3e, 0x07, 0x6e, 0xa1, 0x5a, 0x1e, 0x05, 0x22, 0x08, 0xda, 0xdb, 0xf5, 0x03, 0xc0,
	0xf4, 0x3e, 0x04, 0xe6, 0x63, 0x18, 0x79, 0x4a, 0x97, 0xc8, 0x7f, 0xa3, 0xf6, 0x4c, 0x54, 0x6f,
	0x3e, 0x64, 0x6d, 0xc1, 0x52, 0xfc, 0x09, 0x1c, 0x95, 0xe9, 0x1f, 0xd6, 0xa9, 0x0d, 0x3a, 0x9f,
	0x5b, 0xb3, 0x25, 0x6a, 0xc4, 0xe2, 0xaf, 0xa2, 0x3d, 0x04, 0xde, 0xe0, 0x7f, 0x82, 0x17, 0x3d,
	0x04, 0x5e, 0x97, 0x11, 0xf8, 0x0f, 0x23, 0x3c, 0x33, 0x53, 0x37, 0x6c, 0x1f, 0xc4, 0x6f, 0x18,
	0xbb, 0x33, 0xe0, 0xe1, 0x95, 0xec, 0x94, 0xd0, 0xc5, 0xf1, 0x05, 0xef, 0xd5, 0x18, 0x22, 0x76,
	0x94, 0xc7, 0x75, 0xcb, 0x17, 0x0b, 0x0b, 0x5c, 0x77, 0x97, 0xee, 0x78, 0x67, 0xe9, 0x5e, 0xc3,
	0xb0, 0xb4, 0x1b, 0x54, 0xb9, 0x51, 0x6b, 0x6a, 0x18, 0xae, 0xfd, 0x79, 0x14, 0xa4, 0x99, 0xf9,
	0x99, 0x9a, 0xf0, 0x17, 0xd8, 0xb7, 0x35, 0x71, 0xe0, 0x09, 0x07, 0x20, 0x68, 0xd7, 0x35, 0x6d,
	0x13, 0x55, 0x91, 0x1a, 0x65, 0x2b, 0x49, 0x9c, 0x48, 0x22, 0x68, 0xd7, 0x15, 0x27, 0x4e, 0xe1,
	0xd0, 0xdf, 0x91, 0xca, 0x0c, 0x25, 0x31, 0xff, 0x83, 0xbe, 0xbf, 0xa3, 0x6f, 0x0c, 0xc5, 0xaf,
	0x00, 0x72, 0xa3, 0x5a, 0xef, 0x29, 0x7b, 0x83, 0xdc, 0x2c, 0xc4, 0x7d, 0x0d, 0xc3, 0xd0, 0xb5,
	0xb5, 0x9f, 0xb1, 0x1d, 0xd9, 0x9a, 0xb6, 0xfe, 0x18, 0xa2, 0xba, 0x0a, 0x2f, 0xa5, 0x52, 0x4a,
	0x9e, 0xcb, 0xc0, 0x22, 0x7c, 0xdd, 0x35, 0x6f, 0x9a, 0xe4, 0xa3, 0xae, 0x79, 0xd5, 0x04, 0x33,
	0x37, 0x1e, 0x1d, 0x85, 0x9b, 0xa7, 0x62, 0x8a, 0x20, 0x37, 0xb7, 0xe6, 0x4d, 0x93, 0x24, 0x5d,
	0xf3, 0xaa, 0xd9, 0x59, 0xfd, 0x17, 0xbb, 0xab, 0xbf, 0xb3, 0xdf, 0x2f, 0x3f, 0xd8, 0xef, 0x4f,
	0xe1, 0x78, 0x4b, 0x7a, 0x8b, 0xf3, 0x58, 0x48, 0x13, 0x75, 0x0b, 0x74, 0xa8, 0x7e, 0xbf, 0x12,
	0x74, 0x5e, 0x6d, 0xab, 0xdf, 0xaf, 0x02, 0x34, 0x57, 0x5f, 0xfd, 0xfe, 0xe5, 0x32, 0xa7, 0x22,
	0xbd, 0x99, 0xac, 0xd0, 0xe8, 0x74, 0x92, 0xd9, 0x72, 0x42, 0xf7, 0x53, 0x3e, 0x4c, 0x33, 0x5b,
	0x96, 0xd6, 0xf8, 0xe9, 0xe6, 0xcd, 0x94, 0xf7, 0x74, 0xba, 0xb4, 0x45, 0x6a, 0x96, 0x53, 0x5d,
	0x4e, 0x4b, 0xf4, 0x37, 0x7d, 0x16, 0x3f, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x04, 0x4b, 0x09,
	0x2a, 0x1c, 0x06, 0x00, 0x00,
}
