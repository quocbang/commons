// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package mes

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 1493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x99, 0x5d, 0x6f, 0xd5, 0x46,
	0x13, 0xc7, 0x2f, 0x1e, 0x89, 0xa7, 0xb8, 0x50, 0xa8, 0x51, 0x7b, 0x11, 0x4a, 0xc8, 0x7b, 0x02,
	0xb4, 0xe7, 0x48, 0xf4, 0xa6, 0xea, 0x5d, 0x20, 0x34, 0x05, 0x71, 0x44, 0x44, 0xc2, 0x8b, 0x8a,
	0x54, 0x6b, 0x63, 0x2f, 0x27, 0x16, 0xb6, 0xd7, 0x59, 0x6f, 0x42, 0xce, 0xc7, 0xe9, 0x37, 0xad,
	0x76, 0x3d, 0x6b, 0xef, 0xcb, 0xac, 0x4f, 0x2a, 0xf9, 0x0a, 0x8e, 0xe7, 0xe7, 0xff, 0xcc, 0xce,
	0xce, 0xee, 0x8e, 0x37, 0xd1, 0xed, 0x86, 0xf2, 0xcb, 0x3c, 0xa5, 0x93, 0x9a, 0x33, 0xc1, 0xe2,
	0x5b, 0xea, 0x9f, 0x49, 0x56, 0x4e, 0x4a, 0xda, 0xac, 0x6c, 0xa9, 0x5f, 0xd3, 0xac, 0x9c, 0x96,
	0xb4, 0x99, 0x7e, 0x65, 0xfc, 0x4b, 0xc2, 0x78, 0x46, 0x79, 0xd2, 0x08, 0x7e, 0x91, 0x8a, 0xf6,
	0x9d, 0x95, 0x47, 0x16, 0x95, 0x72, 0x4a, 0x04, 0x4d, 0x0c, 0xf8, 0x8c, 0x92, 0x0c, 0xd0, 0xad,
	0x61, 0x14, 0xa8, 0x27, 0x16, 0x55, 0xb2, 0x2c, 0xff, 0xbc, 0x48, 0x2c, 0xef, 0x44, 0x5c, 0x34,
	0xa8, 0x77, 0x92, 0x65, 0x49, 0x99, 0x34, 0x67, 0x94, 0x8a, 0xe4, 0x94, 0x95, 0x09, 0xa7, 0x29,
	0xe3, 0xda, 0xfb, 0x43, 0x1f, 0x25, 0x82, 0xf2, 0x9c, 0x14, 0x00, 0xec, 0x62, 0xe1, 0xd5, 0x9c,
	0xd6, 0x84, 0xd3, 0x81, 0x08, 0xcf, 0x2f, 0x28, 0x5f, 0xd8, 0x5c, 0x52, 0xe4, 0x8d, 0xce, 0xcf,
	0x1e, 0x36, 0x9c, 0x52, 0xf0, 0xa2, 0x68, 0x84, 0x1d, 0xe0, 0x0e, 0x22, 0xab, 0x43, 0x34, 0x15,
	0x37, 0x2d, 0x2e, 0xa3, 0x05, 0x15, 0xb4, 0x03, 0x75, 0x62, 0x7e, 0xc6, 0xdc, 0xda, 0x41, 0xe6,
	0xd5, 0x67, 0x06, 0xf4, 0x03, 0xc4, 0x75, 0xca, 0x32, 0x8a, 0x7a, 0x6c, 0xcd, 0x6d, 0x96, 0x0d,
	0x0d, 0x74, 0x76, 0x97, 0x50, 0x10, 0x97, 0x47, 0x6d, 0x23, 0x0e, 0x39, 0xad, 0x0b, 0x92, 0x52,
	0x95, 0x3b, 0x34, 0xb7, 0xe0, 0x32, 0x65, 0x95, 0x20, 0x79, 0x65, 0x0f, 0x70, 0x17, 0x1d, 0x20,
	0x02, 0xa2, 0xc9, 0xed, 0xc8, 0xa1, 0x39, 0x45, 0xe5, 0xd0, 0xe1, 0x96, 0x29, 0xab, 0xe4, 0x28,
	0xba, 0x19, 0x45, 0x53, 0xb7, 0x84, 0xd2, 0xf3, 0xee, 0x52, 0xd8, 0x5c, 0x79, 0xd0, 0x43, 0x34,
	0x2c, 0x7a, 0x5e, 0xe3, 0x80, 0x8e, 0x28, 0x08, 0xe8, 0x60, 0x0c, 0x60, 0x15, 0x8b, 0xc3, 0xb0,
	0x6f, 0x04, 0x43, 0x48, 0x59, 0x85, 0x32, 0x66, 0x14, 0x21, 0xc6, 0x0c, 0xa4, 0x67, 0xd6, 0x43,
	0xb1, 0xf4, 0x08, 0x5e, 0x97, 0x82, 0x71, 0x32, 0xa7, 0x49, 0x8e, 0xef, 0x60, 0xad, 0x90, 0xd4,
	0x49, 0x32, 0x2a, 0x48, 0x5e, 0xa0, 0x21, 0x19, 0x94, 0xb1, 0x88, 0x9f, 0x84, 0x18, 0x6c, 0xc5,
	0x3b, 0xf5, 0x41, 0x38, 0xcf, 0x29, 0x4f, 0x58, 0x4d, 0x39, 0x11, 0x79, 0x35, 0x07, 0xea, 0x17,
	0x94, 0xea, 0xf4, 0x5c, 0xdc, 0xa9, 0x01, 0xc1, 0x8b, 0x44, 0x5c, 0x99, 0x5e, 0x9d, 0x2d, 0x44,
	0x6f, 0x30, 0xb0, 0x5a, 0x5d, 0xb9, 0xfb, 0x8e, 0x9c, 0x25, 0xb5, 0xe6, 0x19, 0x9b, 0xb3, 0xbc,
	0x36, 0x89, 0x75, 0x7f, 0x77, 0xa6, 0xa4, 0x49, 0x2e, 0x49, 0x71, 0x41, 0xd1, 0x55, 0x37, 0xa7,
	0x42, 0x6d, 0x05, 0x4a, 0x24, 0x39, 0x5d, 0x24, 0x19, 0xad, 0xc3, 0x62, 0x05, 0x9b, 0xdb, 0x9b,
	0xed, 0x53, 0x4f, 0xac, 0x5f, 0xbf, 0xa7, 0xe6, 0x62, 0x16, 0x8b, 0x1a, 0x02, 0x78, 0xfa, 0xcf,
	0x34, 0xfa, 0xdf, 0xec, 0xc5, 0x71, 0xfc, 0x3e, 0xba, 0x7b, 0x48, 0xc5, 0x07, 0xc6, 0xbf, 0xbc,
	0x91, 0x1b, 0xe9, 0xeb, 0xbc, 0x11, 0xf1, 0xfa, 0xc4, 0x3c, 0x3b, 0x27, 0xa6, 0xfd, 0x2d, 0x3d,
	0xbf, 0xa0, 0x8d, 0x58, 0x79, 0x38, 0x84, 0xd4, 0xc5, 0x22, 0x4e, 0xa2, 0x7b, 0x87, 0x54, 0x1c,
	0xb5, 0x9b, 0x74, 0x2f, 0xbd, 0xe5, 0xbd, 0x67, 0x22, 0x5a, 0x7d, 0x63, 0x09, 0x25, 0x1d, 0xfc,
	0x1d, 0xdd, 0xdd, 0xcf, 0xb2, 0xce, 0xeb, 0x9f, 0x94, 0x64, 0xf1, 0xb6, 0xfd, 0x9e, 0x6b, 0xd7,
	0xf2, 0x9b, 0xcb, 0x30, 0xa9, 0xff, 0x36, 0xba, 0x65, 0x1a, 0xdc, 0xa4, 0x98, 0xb6, 0x40, 0x52,
	0x6c, 0x44, 0x6a, 0x7e, 0x8a, 0xee, 0xec, 0x67, 0x99, 0x39, 0x16, 0x37, 0x21, 0x8e, 0x39, 0x90,
	0x10, 0x8f, 0x92, 0xe2, 0x65, 0xf4, 0xc3, 0xbb, 0x3a, 0x23, 0x82, 0x76, 0x4e, 0x8f, 0x55, 0x77,
	0x11, 0x3f, 0xb6, 0x5f, 0x46, 0x21, 0xed, 0x68, 0xef, 0x5a, 0xac, 0x74, 0x37, 0x8f, 0xee, 0xb5,
	0xd6, 0x59, 0x7b, 0xfe, 0xbf, 0x55, 0x15, 0x19, 0xa3, 0x02, 0x16, 0xa2, 0x5d, 0xed, 0x5c, 0x83,
	0x94, 0x8e, 0xb2, 0x28, 0xde, 0xcf, 0xb2, 0x99, 0x5a, 0xa9, 0xa7, 0xac, 0x04, 0x3f, 0xbb, 0x5e,
	0x46, 0x1c, 0x42, 0xbb, 0xd9, 0x5e, 0x0e, 0x4a, 0x2f, 0x6f, 0xa2, 0x6f, 0xa5, 0x09, 0x36, 0x86,
	0x78, 0xcd, 0x7f, 0x0b, 0x4c, 0x5a, 0x77, 0x75, 0x80, 0x80, 0xb9, 0x3e, 0xa4, 0x42, 0x3f, 0x0b,
	0x14, 0xbf, 0x69, 0x0e, 0x17, 0xbf, 0x4d, 0x81, 0xf8, 0x81, 0x3a, 0x1d, 0xb4, 0xa9, 0x71, 0xc5,
	0x1d, 0x73, 0x40, 0xdc, 0xa3, 0xa4, 0x78, 0x1d, 0xfd, 0xd8, 0x4e, 0x86, 0x59, 0x63, 0x2f, 0xab,
	0xcf, 0x2c, 0x7e, 0x82, 0x4d, 0x99, 0x4b, 0x69, 0x57, 0x8f, 0xae, 0x07, 0xc3, 0x5a, 0x3b, 0xa4,
	0xe2, 0x58, 0x4e, 0x8b, 0xf2, 0xe3, 0x6f, 0x40, 0x9d, 0x2d, 0xbc, 0x01, 0x19, 0x48, 0xbf, 0x7e,
	0x83, 0x9a, 0xa6, 0x2d, 0xbc, 0x7e, 0x1d, 0xcd, 0x4f, 0xd1, 0x9d, 0x76, 0x18, 0xbd, 0xec, 0x16,
	0x36, 0x4a, 0x4f, 0x79, 0x63, 0x09, 0x25, 0xc5, 0x4f, 0xa2, 0xdb, 0xb2, 0x88, 0x04, 0x2f, 0x4e,
	0xae, 0x54, 0xb9, 0x38, 0xe1, 0xf4, 0x96, 0x80, 0xaa, 0x9e, 0xc6, 0x13, 0x4e, 0xaa, 0x86, 0xa4,
	0x22, 0x67, 0x55, 0x23, 0x55, 0x65, 0x05, 0x8d, 0xac, 0xfa, 0x21, 0xba, 0xdb, 0xaf, 0xd7, 0x91,
	0x85, 0xa1, 0x26, 0x47, 0x16, 0x7e, 0x15, 0xdd, 0x50, 0xd9, 0xbd, 0x8a, 0x7f, 0x72, 0xe8, 0xff,
	0xae, 0x75, 0xa4, 0x4a, 0x6b, 0x26, 0xae, 0x0e, 0x54, 0xa7, 0x34, 0x82, 0xe2, 0xab, 0xe8, 0x86,
	0x9c, 0xa5, 0x93, 0x31, 0xa2, 0x9b, 0x45, 0x37, 0x5b, 0xad, 0xa3, 0x83, 0xfd, 0x71, 0xe4, 0x60,
	0xaa, 0x47, 0x89, 0xee, 0x58, 0x2f, 0xa1, 0xd9, 0xc9, 0x78, 0xe9, 0x9b, 0x45, 0x37, 0xa1, 0x6a,
	0x4e, 0x3e, 0x8e, 0x13, 0xa3, 0x96, 0x1b, 0x35, 0xc6, 0xb6, 0x68, 0x8e, 0xcf, 0x6a, 0xf7, 0x78,
	0x51, 0x4f, 0xf3, 0xda, 0x94, 0x5c, 0x1d, 0x20, 0xe4, 0x6e, 0xd1, 0xcd, 0xf2, 0x38, 0x72, 0x47,
	0xd1, 0xad, 0x6e, 0x5a, 0x46, 0x53, 0xec, 0x92, 0x38, 0x8e, 0xe2, 0x7b, 0xd5, 0xf1, 0x3d, 0xd7,
	0xdd, 0x6c, 0x60, 0x57, 0xef, 0xec, 0xe1, 0x5d, 0xdd, 0x40, 0x40, 0xf7, 0x90, 0x8a, 0x41, 0x5d,
	0xd3, 0x1e, 0x3e, 0x81, 0x1c, 0xdd, 0x44, 0x77, 0x48, 0xb6, 0x34, 0x7a, 0x62, 0x78, 0xea, 0x1b,
	0x4b, 0x28, 0x70, 0xd0, 0xa6, 0x78, 0xd0, 0x81, 0x83, 0x0c, 0x76, 0x02, 0x8e, 0x83, 0x77, 0xed,
	0x91, 0xd4, 0x7d, 0x71, 0xc7, 0x7e, 0x1f, 0xda, 0x1b, 0xb5, 0xf0, 0xda, 0x20, 0x03, 0xb2, 0xb2,
	0x76, 0x83, 0xb2, 0x96, 0x31, 0x20, 0xeb, 0x30, 0xf0, 0x45, 0x00, 0x35, 0xdc, 0x2b, 0x6f, 0xa3,
	0x4d, 0xa6, 0x27, 0xbe, 0xb9, 0x0c, 0x03, 0x7d, 0xa8, 0xe8, 0xa0, 0xbe, 0x6b, 0x0f, 0xe8, 0xfb,
	0x98, 0xd4, 0xff, 0x23, 0xfa, 0x46, 0x26, 0x4b, 0x7e, 0x39, 0xc7, 0x0f, 0xfc, 0x24, 0xca, 0xe7,
	0x5a, 0xef, 0x7e, 0xc8, 0x0c, 0x3a, 0x32, 0x3b, 0x98, 0x8e, 0x7e, 0x1e, 0xd0, 0xe9, 0xcd, 0xd0,
	0x12, 0x43, 0x22, 0x94, 0xd4, 0x1a, 0x9a, 0x23, 0x53, 0x6d, 0x75, 0x80, 0x00, 0x41, 0x18, 0x39,
	0x26, 0x68, 0x98, 0x02, 0x82, 0x16, 0x61, 0x34, 0xed, 0x70, 0xfb, 0x81, 0x35, 0xed, 0x60, 0x1a,
	0x68, 0xda, 0x3b, 0x02, 0x04, 0x75, 0x0e, 0x10, 0x41, 0xc3, 0x14, 0x10, 0xb4, 0x08, 0x29, 0xf8,
	0x31, 0xfa, 0xce, 0x48, 0x83, 0xd4, 0xdc, 0x0c, 0x26, 0xc9, 0x90, 0x5d, 0x1f, 0x86, 0x40, 0xd9,
	0xc8, 0x07, 0xa2, 0x6c, 0x5b, 0x03, 0xca, 0x2e, 0x64, 0x77, 0xb9, 0xed, 0x95, 0xd1, 0xcb, 0x2c,
	0xd0, 0xe5, 0x6a, 0xf3, 0x70, 0x97, 0xdb, 0x53, 0x52, 0xfc, 0x79, 0xf4, 0x7f, 0xb5, 0x53, 0x66,
	0xd4, 0x3d, 0x53, 0xe1, 0xb1, 0x16, 0x5b, 0x09, 0x58, 0x61, 0xec, 0x87, 0x54, 0xd5, 0x00, 0x49,
	0x55, 0xa7, 0xe8, 0x8e, 0xdd, 0xb6, 0x06, 0xc6, 0xee, 0x42, 0x7d, 0x01, 0xbc, 0x38, 0xaf, 0x85,
	0x6a, 0x3d, 0xfd, 0x02, 0xd0, 0xa6, 0x70, 0x01, 0xf4, 0x04, 0x7c, 0x26, 0xc3, 0x33, 0xeb, 0x53,
	0x70, 0x0f, 0x7d, 0x0d, 0xfb, 0x1c, 0xdc, 0xb9, 0x06, 0xd9, 0x6f, 0xaa, 0xd2, 0x06, 0x2d, 0xcb,
	0x06, 0xfa, 0x62, 0x6b, 0x0c, 0x6f, 0xaa, 0x26, 0x03, 0x9b, 0x9e, 0x4c, 0x7d, 0x7b, 0x01, 0x07,
	0xca, 0xdb, 0xfe, 0xd4, 0x98, 0xf6, 0xc0, 0xa6, 0xe7, 0x63, 0xfd, 0x35, 0xce, 0xa0, 0xbe, 0x6b,
	0x0f, 0x5f, 0xe3, 0x20, 0xfa, 0xdd, 0x35, 0x85, 0xed, 0x02, 0xbd, 0xa6, 0x40, 0xbd, 0xec, 0x5c,
	0x83, 0x04, 0x47, 0x70, 0x86, 0x0e, 0x39, 0x42, 0x90, 0x80, 0x23, 0x94, 0x84, 0xfb, 0x90, 0x3e,
	0x95, 0xdd, 0x85, 0xc5, 0x6e, 0x28, 0xd9, 0xee, 0xbd, 0xc5, 0xf6, 0x72, 0xb0, 0xbf, 0x75, 0x59,
	0xe2, 0xc5, 0x27, 0xc2, 0xb7, 0x2e, 0xa8, 0x97, 0xee, 0xce, 0xca, 0x75, 0xf4, 0x78, 0x20, 0xeb,
	0xae, 0xaf, 0xbd, 0x6b, 0xb1, 0xe0, 0xce, 0x4a, 0x6b, 0xc8, 0x1d, 0x0a, 0x05, 0xdc, 0x05, 0x58,
	0xe9, 0x8e, 0x44, 0xdf, 0x1b, 0xb7, 0x37, 0x8d, 0xfa, 0xde, 0x8f, 0x77, 0x82, 0xd7, 0x3b, 0x2d,
	0xa0, 0xdd, 0x6c, 0x2d, 0xe5, 0xc0, 0x85, 0x71, 0xf3, 0x84, 0xbb, 0xf0, 0x80, 0x80, 0x0b, 0x84,
	0xeb, 0x2f, 0x52, 0x66, 0x94, 0x34, 0xef, 0x49, 0x71, 0x41, 0x91, 0x96, 0xbb, 0xb3, 0x85, 0x5b,
	0x6e, 0x03, 0x31, 0x32, 0x23, 0xb8, 0xda, 0xc0, 0x9e, 0x2d, 0x0e, 0x68, 0x8d, 0x66, 0xc6, 0x02,
	0x06, 0x32, 0xe3, 0x70, 0x7d, 0xd8, 0xaf, 0xd9, 0x1c, 0x2e, 0x0c, 0xfd, 0xb0, 0x3b, 0x5b, 0x38,
	0x6c, 0x03, 0x81, 0xfa, 0x31, 0xdb, 0xfc, 0x67, 0x0b, 0xf9, 0xdf, 0x45, 0x4d, 0xdd, 0xfa, 0x41,
	0xa1, 0x40, 0xfd, 0x04, 0xd8, 0xba, 0x58, 0x3c, 0xfb, 0xfd, 0xaf, 0xdf, 0xe6, 0xb9, 0x28, 0xc8,
	0xe9, 0xe4, 0x0b, 0xad, 0x32, 0x32, 0x49, 0x59, 0x39, 0x11, 0x5f, 0xa7, 0xea, 0xc7, 0x34, 0x65,
	0x65, 0xc9, 0xaa, 0x66, 0x7a, 0xf9, 0x74, 0xda, 0x5e, 0xff, 0xcf, 0x59, 0x41, 0xaa, 0x39, 0xfc,
	0x15, 0xe0, 0xf4, 0x86, 0x7a, 0xf8, 0xeb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x2e, 0x01,
	0x0b, 0x16, 0x1f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MESClient is the client API for MES service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MESClient interface {
	//查詢工單
	GetWorkOrderList(ctx context.Context, in *GetWorkOrderRequest, opts ...grpc.CallOption) (*GetWorkOrderReply, error)
	//查詢備料單
	GetPrepareOrderList(ctx context.Context, in *GetPrepareOrderRequest, opts ...grpc.CallOption) (*GetPrepareOrderReply, error)
	//新增工單標頭
	AddWorkOrderHead(ctx context.Context, in *AddWorkOrderHeadRequest, opts ...grpc.CallOption) (*AddWorkOrderHeadReply, error)
	//新增工單
	AddWorkOrder(ctx context.Context, in *AddWorkOrderRequest, opts ...grpc.CallOption) (*AddWorkOrderReply, error)
	//新增備料表
	AddPrepareOrder(ctx context.Context, in *AddPrepareOrderRequest, opts ...grpc.CallOption) (*AddPrepareOrderReply, error)
	//修改工單狀態
	UpdateWorkOrderStatus(ctx context.Context, in *UpdateWorkOrderStatusRequest, opts ...grpc.CallOption) (*UpdateWorkOrderStatusReply, error)
	//投料扣帳
	UpdateMtrllstRecord(ctx context.Context, in *UpdateMtrllstRecordRequest, opts ...grpc.CallOption) (*UpdateMtrllstRecordReply, error)
	//投料紀錄寫入至MSHEETBOM
	AddMsheetbomRecord(ctx context.Context, in *AddMsheetbomRecordRequest, opts ...grpc.CallOption) (*AddMsheetbomRecordReply, error)
	//寫入MTRLST
	AddMaterial(ctx context.Context, in *AddMaterialRequest, opts ...grpc.CallOption) (*AddMaterialReply, error)
	//查詢材料
	GetMaterialList(ctx context.Context, in *GetMaterialListRequest, opts ...grpc.CallOption) (*GetMaterialListReply, error)
	//刪除材料
	DeleteMaterials(ctx context.Context, in *DeleteMaterialsRequest, opts ...grpc.CallOption) (*DeleteMaterialsReply, error)
	//修改備料資訊
	UpdatePrepareOrderInfo(ctx context.Context, in *UpdatePrepareOrderInfoRequest, opts ...grpc.CallOption) (*UpdatePrepareOrderInfoReply, error)
	//搜尋首數資訊
	GetSheetInfo(ctx context.Context, in *GetSheetInfoRequest, opts ...grpc.CallOption) (*GetSheetInfoReply, error)
	//新增首數資訊
	AddSheetInfo(ctx context.Context, in *AddSheetInfoRequest, opts ...grpc.CallOption) (*AddSheetInfoReply, error)
	//修改首數資訊
	UpdateSheetInfo(ctx context.Context, in *UpdateSheetInfoRequest, opts ...grpc.CallOption) (*UpdateSheetInfoReply, error)
	//新增材料移轉明細紀錄
	AddMtrlTxList(ctx context.Context, in *MtrlTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error)
	//查詢材料移轉明細紀錄
	GetMtrlTxList(ctx context.Context, in *MtrlTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error)
	//修改材料移轉明細紀錄
	UpdateMtrlTxList(ctx context.Context, in *MtrlTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error)
	//刪除材料移轉明細紀錄
	DeleteMtrlTxList(ctx context.Context, in *MtrlTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error)
	//新增材料移轉明細紀錄
	AddMtx(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error)
	AddMtxDetail(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error)
	//查詢材料移轉明細紀錄
	GetMTx(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error)
	GetMTxPDA(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error)
	//修改材料移轉明細
	UpdateMTx(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error)
	//修改材料移轉明細紀錄
	UpdateMTxDetail(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error)
	//刪除材料移轉明細紀錄
	DeleteMTX(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error)
	DeleteMTxDetail(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error)
	//新增材料移轉出庫紀錄
	AddMtxShp(ctx context.Context, in *MtxShipListRequest, opts ...grpc.CallOption) (*MtxShipListReply, error)
	//查詢材料移轉出庫紀錄
	GetMTxShp(ctx context.Context, in *MtxShipListRequest, opts ...grpc.CallOption) (*MtxShipListReply, error)
	//修改材料移轉出庫紀錄
	UpdateMTxShp(ctx context.Context, in *MtxShipListRequest, opts ...grpc.CallOption) (*MtxShipListReply, error)
	//刪除材料移轉出庫紀錄
	DeleteMTxShp(ctx context.Context, in *MtxShipListRequest, opts ...grpc.CallOption) (*MtxShipListReply, error)
	//新增Container Info
	AddContainerInfo(ctx context.Context, in *AddContainerRequest, opts ...grpc.CallOption) (*AddContainerReply, error)
	//查詢Container Info
	GetContainerInfo(ctx context.Context, in *GetContainerRequest, opts ...grpc.CallOption) (*GetContainerReply, error)
	//修改Container Info
	UpdateContainerInfo(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*UpdateContainerReply, error)
	//刪除Container Info
	DeleteContainerInfo(ctx context.Context, in *DeleteContainerRequest, opts ...grpc.CallOption) (*DeleteContainerReply, error)
	//新增Mconmtrlst Info
	AddMconmtrlst(ctx context.Context, in *AddMconmtrlstRequest, opts ...grpc.CallOption) (*AddMconmtrlstReply, error)
	//查詢Mconmtrlst Info
	GetMconmtrlst(ctx context.Context, in *GetMconmtrlstRequest, opts ...grpc.CallOption) (*GetMconmtrlstReply, error)
	//修改Mconmtrlst Info
	UpdateMconmtrlst(ctx context.Context, in *UpdateMconmtrlstRequest, opts ...grpc.CallOption) (*UpdateMconmtrlstReply, error)
	//刪除Mconmtrlst Info
	DeleteMconmtrlst(ctx context.Context, in *DeleteMconmtrlstRequest, opts ...grpc.CallOption) (*DeleteMconmtrlstReply, error)
	//新增Meqpt Info
	AddMeqpt(ctx context.Context, in *AddMeqptRequest, opts ...grpc.CallOption) (*AddMeqptReply, error)
	//查詢Meqpt Info
	GetMeqpt(ctx context.Context, in *GetMeqptRequest, opts ...grpc.CallOption) (*GetMeqptReply, error)
	//修改Meqpt Info
	UpdateMeqpt(ctx context.Context, in *UpdateMeqptRequest, opts ...grpc.CallOption) (*UpdateMeqptReply, error)
	//刪除Meqpt Info
	DeleteMeqpt(ctx context.Context, in *DeleteMeqptRequest, opts ...grpc.CallOption) (*DeleteMeqptReply, error)
	//新增Meqptcon Info
	AddMeqptcon(ctx context.Context, in *AddMeqptconRequest, opts ...grpc.CallOption) (*AddMeqptconReply, error)
	//查詢Meqptcon Info
	GetMeqptcon(ctx context.Context, in *GetMeqptconRequest, opts ...grpc.CallOption) (*GetMeqptconReply, error)
	//修改Meqptcon Info
	UpdateMeqptcon(ctx context.Context, in *UpdateMeqptconRequest, opts ...grpc.CallOption) (*UpdateMeqptconReply, error)
	//刪除Meqptcon Info
	DeleteMeqptcon(ctx context.Context, in *DeleteMeqptconRequest, opts ...grpc.CallOption) (*DeleteMeqptconReply, error)
	//修改Storage ID
	UpdateStorageId(ctx context.Context, in *UpdateStorageIdRequest, opts ...grpc.CallOption) (*UpdateStorageIdReply, error)
	// ～*～*～*～*～*～　代號檔　～*～*～*～*～*～　//
	//回傳代號 (代號Value、名稱Name)
	GetCode(ctx context.Context, in *GetCodeRequest, opts ...grpc.CallOption) (*GetCodeReply, error)
	// ～*～*～*～*～*～　替代材料檔　～*～*～*～*～*～　//
	//回傳替代材料ID以及替代比率
	GetReplaceMtrl(ctx context.Context, in *GetReplaceMtrlRequest, opts ...grpc.CallOption) (*GetReplaceMtrlReply, error)
	// ～*～*～*～*～*～　設備-桶槽-材料對應檔　～*～*～*～*～*～　//
	//回傳設備ID清單
	GetEqptList(ctx context.Context, in *GetEqptListRequest, opts ...grpc.CallOption) (*GetEqptListReply, error)
	//回傳設備對應的材料集合(lotID+mtrlID)
	GetEqptMaterialList(ctx context.Context, in *GetEqptMaterialListRequest, opts ...grpc.CallOption) (*GetEqptMaterialListReply, error)
	//回傳設備的基本資訊
	GetEqptDetail(ctx context.Context, in *GetEqptDetailRequest, opts ...grpc.CallOption) (*GetEqptDetailReply, error)
	// ～*～*～*～*～*～　卡匣-材料對應檔　～*～*～*～*～*～　//
	//回傳卡匣明細
	GetCarrierDetail(ctx context.Context, in *GetCarrierDetailRequest, opts ...grpc.CallOption) (*GetCarrierDetailReply, error)
	//新增卡匣明細
	AddCarrierDetail(ctx context.Context, in *AddCarrierDetailRequest, opts ...grpc.CallOption) (*AddCarrierDetailReply, error)
	//修改卡匣明細
	UpdateCarrierDetail(ctx context.Context, in *UpdateCarrierDetailRequest, opts ...grpc.CallOption) (*UpdateCarrierDetailReply, error)
	//刪除卡匣明細
	DeleteCarrierDetail(ctx context.Context, in *DeleteCarrierDetailRequest, opts ...grpc.CallOption) (*DeleteCarrierDetailReply, error)
	//回傳卡匣材料明細
	GetCarrierMaterial(ctx context.Context, in *GetCarrierMaterialRequest, opts ...grpc.CallOption) (*GetCarrierMaterialReply, error)
	//新增卡匣材料明細
	AddCarrierMaterial(ctx context.Context, in *AddCarrierMaterialRequest, opts ...grpc.CallOption) (*AddCarrierMaterialReply, error)
	//修改卡匣材料明細
	UpdateCarrierMaterial(ctx context.Context, in *UpdateCarrierMaterialRequest, opts ...grpc.CallOption) (*UpdateCarrierMaterialReply, error)
	//刪除卡匣材料明細
	DeleteCarrierMaterial(ctx context.Context, in *DeleteCarrierMaterialRequest, opts ...grpc.CallOption) (*DeleteCarrierMaterialReply, error)
	// ～*～*～*～*～*～　材料-首數對應檔　～*～*～*～*～*～　//
	//取得材料首數明細
	GetMaterialsSheet(ctx context.Context, in *GetMaterialsSheetRequest, opts ...grpc.CallOption) (*GetMaterialsSheetReply, error)
	//新增材料首數明細
	AddMaterialsSheet(ctx context.Context, in *AddMaterialsSheetRequest, opts ...grpc.CallOption) (*AddMaterialsSheetReply, error)
	// ～*～*～*～*～*～   紀錄檢測值    ～*～*～*～*～*～　//
	AddMeasValue(ctx context.Context, in *AddMeasValueRequest, opts ...grpc.CallOption) (*AddMeasValueReply, error)
	// ～*～*～*～  取得管理部門所擁有材料清單  ～*～*～*～　//
	GetMtrlListByDept(ctx context.Context, in *GetMtrlListByDeptRequest, opts ...grpc.CallOption) (*GetMtrlListByDeptReply, error)
	// ～*～*～*～*～*～   Log Record    ～*～*～*～*～*～　//
	AddLogRecord(ctx context.Context, in *AddLogRecordRequest, opts ...grpc.CallOption) (*AddLogRecordReply, error)
	// 依類別取得桶槽
	GetContainerByContype(ctx context.Context, in *GetContainerByContypeRequest, opts ...grpc.CallOption) (*GetContainerByContypeReply, error)
}

type mESClient struct {
	cc *grpc.ClientConn
}

func NewMESClient(cc *grpc.ClientConn) MESClient {
	return &mESClient{cc}
}

func (c *mESClient) GetWorkOrderList(ctx context.Context, in *GetWorkOrderRequest, opts ...grpc.CallOption) (*GetWorkOrderReply, error) {
	out := new(GetWorkOrderReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetWorkOrderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetPrepareOrderList(ctx context.Context, in *GetPrepareOrderRequest, opts ...grpc.CallOption) (*GetPrepareOrderReply, error) {
	out := new(GetPrepareOrderReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetPrepareOrderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddWorkOrderHead(ctx context.Context, in *AddWorkOrderHeadRequest, opts ...grpc.CallOption) (*AddWorkOrderHeadReply, error) {
	out := new(AddWorkOrderHeadReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddWorkOrderHead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddWorkOrder(ctx context.Context, in *AddWorkOrderRequest, opts ...grpc.CallOption) (*AddWorkOrderReply, error) {
	out := new(AddWorkOrderReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddWorkOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddPrepareOrder(ctx context.Context, in *AddPrepareOrderRequest, opts ...grpc.CallOption) (*AddPrepareOrderReply, error) {
	out := new(AddPrepareOrderReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddPrepareOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdateWorkOrderStatus(ctx context.Context, in *UpdateWorkOrderStatusRequest, opts ...grpc.CallOption) (*UpdateWorkOrderStatusReply, error) {
	out := new(UpdateWorkOrderStatusReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdateWorkOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdateMtrllstRecord(ctx context.Context, in *UpdateMtrllstRecordRequest, opts ...grpc.CallOption) (*UpdateMtrllstRecordReply, error) {
	out := new(UpdateMtrllstRecordReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdateMtrllstRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddMsheetbomRecord(ctx context.Context, in *AddMsheetbomRecordRequest, opts ...grpc.CallOption) (*AddMsheetbomRecordReply, error) {
	out := new(AddMsheetbomRecordReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddMsheetbomRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddMaterial(ctx context.Context, in *AddMaterialRequest, opts ...grpc.CallOption) (*AddMaterialReply, error) {
	out := new(AddMaterialReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetMaterialList(ctx context.Context, in *GetMaterialListRequest, opts ...grpc.CallOption) (*GetMaterialListReply, error) {
	out := new(GetMaterialListReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetMaterialList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) DeleteMaterials(ctx context.Context, in *DeleteMaterialsRequest, opts ...grpc.CallOption) (*DeleteMaterialsReply, error) {
	out := new(DeleteMaterialsReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/DeleteMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdatePrepareOrderInfo(ctx context.Context, in *UpdatePrepareOrderInfoRequest, opts ...grpc.CallOption) (*UpdatePrepareOrderInfoReply, error) {
	out := new(UpdatePrepareOrderInfoReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdatePrepareOrderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetSheetInfo(ctx context.Context, in *GetSheetInfoRequest, opts ...grpc.CallOption) (*GetSheetInfoReply, error) {
	out := new(GetSheetInfoReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetSheetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddSheetInfo(ctx context.Context, in *AddSheetInfoRequest, opts ...grpc.CallOption) (*AddSheetInfoReply, error) {
	out := new(AddSheetInfoReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddSheetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdateSheetInfo(ctx context.Context, in *UpdateSheetInfoRequest, opts ...grpc.CallOption) (*UpdateSheetInfoReply, error) {
	out := new(UpdateSheetInfoReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdateSheetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddMtrlTxList(ctx context.Context, in *MtrlTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error) {
	out := new(MaterialTransactions)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddMtrlTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetMtrlTxList(ctx context.Context, in *MtrlTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error) {
	out := new(MaterialTransactions)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetMtrlTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdateMtrlTxList(ctx context.Context, in *MtrlTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error) {
	out := new(MaterialTransactions)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdateMtrlTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) DeleteMtrlTxList(ctx context.Context, in *MtrlTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error) {
	out := new(MaterialTransactions)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/DeleteMtrlTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddMtx(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error) {
	out := new(MaterialTransactions)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddMtx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddMtxDetail(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error) {
	out := new(MaterialTransactions)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddMtxDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetMTx(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error) {
	out := new(MaterialTransactions)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetMTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetMTxPDA(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error) {
	out := new(MaterialTransactions)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetMTxPDA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdateMTx(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error) {
	out := new(MaterialTransactions)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdateMTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdateMTxDetail(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error) {
	out := new(MaterialTransactions)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdateMTxDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) DeleteMTX(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error) {
	out := new(MaterialTransactions)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/DeleteMTX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) DeleteMTxDetail(ctx context.Context, in *MTxListRequest, opts ...grpc.CallOption) (*MaterialTransactions, error) {
	out := new(MaterialTransactions)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/DeleteMTxDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddMtxShp(ctx context.Context, in *MtxShipListRequest, opts ...grpc.CallOption) (*MtxShipListReply, error) {
	out := new(MtxShipListReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddMtxShp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetMTxShp(ctx context.Context, in *MtxShipListRequest, opts ...grpc.CallOption) (*MtxShipListReply, error) {
	out := new(MtxShipListReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetMTxShp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdateMTxShp(ctx context.Context, in *MtxShipListRequest, opts ...grpc.CallOption) (*MtxShipListReply, error) {
	out := new(MtxShipListReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdateMTxShp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) DeleteMTxShp(ctx context.Context, in *MtxShipListRequest, opts ...grpc.CallOption) (*MtxShipListReply, error) {
	out := new(MtxShipListReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/DeleteMTxShp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddContainerInfo(ctx context.Context, in *AddContainerRequest, opts ...grpc.CallOption) (*AddContainerReply, error) {
	out := new(AddContainerReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddContainerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetContainerInfo(ctx context.Context, in *GetContainerRequest, opts ...grpc.CallOption) (*GetContainerReply, error) {
	out := new(GetContainerReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetContainerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdateContainerInfo(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*UpdateContainerReply, error) {
	out := new(UpdateContainerReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdateContainerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) DeleteContainerInfo(ctx context.Context, in *DeleteContainerRequest, opts ...grpc.CallOption) (*DeleteContainerReply, error) {
	out := new(DeleteContainerReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/DeleteContainerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddMconmtrlst(ctx context.Context, in *AddMconmtrlstRequest, opts ...grpc.CallOption) (*AddMconmtrlstReply, error) {
	out := new(AddMconmtrlstReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddMconmtrlst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetMconmtrlst(ctx context.Context, in *GetMconmtrlstRequest, opts ...grpc.CallOption) (*GetMconmtrlstReply, error) {
	out := new(GetMconmtrlstReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetMconmtrlst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdateMconmtrlst(ctx context.Context, in *UpdateMconmtrlstRequest, opts ...grpc.CallOption) (*UpdateMconmtrlstReply, error) {
	out := new(UpdateMconmtrlstReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdateMconmtrlst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) DeleteMconmtrlst(ctx context.Context, in *DeleteMconmtrlstRequest, opts ...grpc.CallOption) (*DeleteMconmtrlstReply, error) {
	out := new(DeleteMconmtrlstReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/DeleteMconmtrlst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddMeqpt(ctx context.Context, in *AddMeqptRequest, opts ...grpc.CallOption) (*AddMeqptReply, error) {
	out := new(AddMeqptReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddMeqpt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetMeqpt(ctx context.Context, in *GetMeqptRequest, opts ...grpc.CallOption) (*GetMeqptReply, error) {
	out := new(GetMeqptReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetMeqpt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdateMeqpt(ctx context.Context, in *UpdateMeqptRequest, opts ...grpc.CallOption) (*UpdateMeqptReply, error) {
	out := new(UpdateMeqptReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdateMeqpt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) DeleteMeqpt(ctx context.Context, in *DeleteMeqptRequest, opts ...grpc.CallOption) (*DeleteMeqptReply, error) {
	out := new(DeleteMeqptReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/DeleteMeqpt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddMeqptcon(ctx context.Context, in *AddMeqptconRequest, opts ...grpc.CallOption) (*AddMeqptconReply, error) {
	out := new(AddMeqptconReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddMeqptcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetMeqptcon(ctx context.Context, in *GetMeqptconRequest, opts ...grpc.CallOption) (*GetMeqptconReply, error) {
	out := new(GetMeqptconReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetMeqptcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdateMeqptcon(ctx context.Context, in *UpdateMeqptconRequest, opts ...grpc.CallOption) (*UpdateMeqptconReply, error) {
	out := new(UpdateMeqptconReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdateMeqptcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) DeleteMeqptcon(ctx context.Context, in *DeleteMeqptconRequest, opts ...grpc.CallOption) (*DeleteMeqptconReply, error) {
	out := new(DeleteMeqptconReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/DeleteMeqptcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdateStorageId(ctx context.Context, in *UpdateStorageIdRequest, opts ...grpc.CallOption) (*UpdateStorageIdReply, error) {
	out := new(UpdateStorageIdReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdateStorageId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetCode(ctx context.Context, in *GetCodeRequest, opts ...grpc.CallOption) (*GetCodeReply, error) {
	out := new(GetCodeReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetReplaceMtrl(ctx context.Context, in *GetReplaceMtrlRequest, opts ...grpc.CallOption) (*GetReplaceMtrlReply, error) {
	out := new(GetReplaceMtrlReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetReplaceMtrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetEqptList(ctx context.Context, in *GetEqptListRequest, opts ...grpc.CallOption) (*GetEqptListReply, error) {
	out := new(GetEqptListReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetEqptList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetEqptMaterialList(ctx context.Context, in *GetEqptMaterialListRequest, opts ...grpc.CallOption) (*GetEqptMaterialListReply, error) {
	out := new(GetEqptMaterialListReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetEqptMaterialList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetEqptDetail(ctx context.Context, in *GetEqptDetailRequest, opts ...grpc.CallOption) (*GetEqptDetailReply, error) {
	out := new(GetEqptDetailReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetEqptDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetCarrierDetail(ctx context.Context, in *GetCarrierDetailRequest, opts ...grpc.CallOption) (*GetCarrierDetailReply, error) {
	out := new(GetCarrierDetailReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetCarrierDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddCarrierDetail(ctx context.Context, in *AddCarrierDetailRequest, opts ...grpc.CallOption) (*AddCarrierDetailReply, error) {
	out := new(AddCarrierDetailReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddCarrierDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdateCarrierDetail(ctx context.Context, in *UpdateCarrierDetailRequest, opts ...grpc.CallOption) (*UpdateCarrierDetailReply, error) {
	out := new(UpdateCarrierDetailReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdateCarrierDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) DeleteCarrierDetail(ctx context.Context, in *DeleteCarrierDetailRequest, opts ...grpc.CallOption) (*DeleteCarrierDetailReply, error) {
	out := new(DeleteCarrierDetailReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/DeleteCarrierDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetCarrierMaterial(ctx context.Context, in *GetCarrierMaterialRequest, opts ...grpc.CallOption) (*GetCarrierMaterialReply, error) {
	out := new(GetCarrierMaterialReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetCarrierMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddCarrierMaterial(ctx context.Context, in *AddCarrierMaterialRequest, opts ...grpc.CallOption) (*AddCarrierMaterialReply, error) {
	out := new(AddCarrierMaterialReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddCarrierMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) UpdateCarrierMaterial(ctx context.Context, in *UpdateCarrierMaterialRequest, opts ...grpc.CallOption) (*UpdateCarrierMaterialReply, error) {
	out := new(UpdateCarrierMaterialReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/UpdateCarrierMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) DeleteCarrierMaterial(ctx context.Context, in *DeleteCarrierMaterialRequest, opts ...grpc.CallOption) (*DeleteCarrierMaterialReply, error) {
	out := new(DeleteCarrierMaterialReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/DeleteCarrierMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetMaterialsSheet(ctx context.Context, in *GetMaterialsSheetRequest, opts ...grpc.CallOption) (*GetMaterialsSheetReply, error) {
	out := new(GetMaterialsSheetReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetMaterialsSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddMaterialsSheet(ctx context.Context, in *AddMaterialsSheetRequest, opts ...grpc.CallOption) (*AddMaterialsSheetReply, error) {
	out := new(AddMaterialsSheetReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddMaterialsSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddMeasValue(ctx context.Context, in *AddMeasValueRequest, opts ...grpc.CallOption) (*AddMeasValueReply, error) {
	out := new(AddMeasValueReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddMeasValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetMtrlListByDept(ctx context.Context, in *GetMtrlListByDeptRequest, opts ...grpc.CallOption) (*GetMtrlListByDeptReply, error) {
	out := new(GetMtrlListByDeptReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetMtrlListByDept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) AddLogRecord(ctx context.Context, in *AddLogRecordRequest, opts ...grpc.CallOption) (*AddLogRecordReply, error) {
	out := new(AddLogRecordReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/AddLogRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mESClient) GetContainerByContype(ctx context.Context, in *GetContainerByContypeRequest, opts ...grpc.CallOption) (*GetContainerByContypeReply, error) {
	out := new(GetContainerByContypeReply)
	err := c.cc.Invoke(ctx, "/proto.dm.mes.MES/GetContainerByContype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MESServer is the server API for MES service.
type MESServer interface {
	//查詢工單
	GetWorkOrderList(context.Context, *GetWorkOrderRequest) (*GetWorkOrderReply, error)
	//查詢備料單
	GetPrepareOrderList(context.Context, *GetPrepareOrderRequest) (*GetPrepareOrderReply, error)
	//新增工單標頭
	AddWorkOrderHead(context.Context, *AddWorkOrderHeadRequest) (*AddWorkOrderHeadReply, error)
	//新增工單
	AddWorkOrder(context.Context, *AddWorkOrderRequest) (*AddWorkOrderReply, error)
	//新增備料表
	AddPrepareOrder(context.Context, *AddPrepareOrderRequest) (*AddPrepareOrderReply, error)
	//修改工單狀態
	UpdateWorkOrderStatus(context.Context, *UpdateWorkOrderStatusRequest) (*UpdateWorkOrderStatusReply, error)
	//投料扣帳
	UpdateMtrllstRecord(context.Context, *UpdateMtrllstRecordRequest) (*UpdateMtrllstRecordReply, error)
	//投料紀錄寫入至MSHEETBOM
	AddMsheetbomRecord(context.Context, *AddMsheetbomRecordRequest) (*AddMsheetbomRecordReply, error)
	//寫入MTRLST
	AddMaterial(context.Context, *AddMaterialRequest) (*AddMaterialReply, error)
	//查詢材料
	GetMaterialList(context.Context, *GetMaterialListRequest) (*GetMaterialListReply, error)
	//刪除材料
	DeleteMaterials(context.Context, *DeleteMaterialsRequest) (*DeleteMaterialsReply, error)
	//修改備料資訊
	UpdatePrepareOrderInfo(context.Context, *UpdatePrepareOrderInfoRequest) (*UpdatePrepareOrderInfoReply, error)
	//搜尋首數資訊
	GetSheetInfo(context.Context, *GetSheetInfoRequest) (*GetSheetInfoReply, error)
	//新增首數資訊
	AddSheetInfo(context.Context, *AddSheetInfoRequest) (*AddSheetInfoReply, error)
	//修改首數資訊
	UpdateSheetInfo(context.Context, *UpdateSheetInfoRequest) (*UpdateSheetInfoReply, error)
	//新增材料移轉明細紀錄
	AddMtrlTxList(context.Context, *MtrlTxListRequest) (*MaterialTransactions, error)
	//查詢材料移轉明細紀錄
	GetMtrlTxList(context.Context, *MtrlTxListRequest) (*MaterialTransactions, error)
	//修改材料移轉明細紀錄
	UpdateMtrlTxList(context.Context, *MtrlTxListRequest) (*MaterialTransactions, error)
	//刪除材料移轉明細紀錄
	DeleteMtrlTxList(context.Context, *MtrlTxListRequest) (*MaterialTransactions, error)
	//新增材料移轉明細紀錄
	AddMtx(context.Context, *MTxListRequest) (*MaterialTransactions, error)
	AddMtxDetail(context.Context, *MTxListRequest) (*MaterialTransactions, error)
	//查詢材料移轉明細紀錄
	GetMTx(context.Context, *MTxListRequest) (*MaterialTransactions, error)
	GetMTxPDA(context.Context, *MTxListRequest) (*MaterialTransactions, error)
	//修改材料移轉明細
	UpdateMTx(context.Context, *MTxListRequest) (*MaterialTransactions, error)
	//修改材料移轉明細紀錄
	UpdateMTxDetail(context.Context, *MTxListRequest) (*MaterialTransactions, error)
	//刪除材料移轉明細紀錄
	DeleteMTX(context.Context, *MTxListRequest) (*MaterialTransactions, error)
	DeleteMTxDetail(context.Context, *MTxListRequest) (*MaterialTransactions, error)
	//新增材料移轉出庫紀錄
	AddMtxShp(context.Context, *MtxShipListRequest) (*MtxShipListReply, error)
	//查詢材料移轉出庫紀錄
	GetMTxShp(context.Context, *MtxShipListRequest) (*MtxShipListReply, error)
	//修改材料移轉出庫紀錄
	UpdateMTxShp(context.Context, *MtxShipListRequest) (*MtxShipListReply, error)
	//刪除材料移轉出庫紀錄
	DeleteMTxShp(context.Context, *MtxShipListRequest) (*MtxShipListReply, error)
	//新增Container Info
	AddContainerInfo(context.Context, *AddContainerRequest) (*AddContainerReply, error)
	//查詢Container Info
	GetContainerInfo(context.Context, *GetContainerRequest) (*GetContainerReply, error)
	//修改Container Info
	UpdateContainerInfo(context.Context, *UpdateContainerRequest) (*UpdateContainerReply, error)
	//刪除Container Info
	DeleteContainerInfo(context.Context, *DeleteContainerRequest) (*DeleteContainerReply, error)
	//新增Mconmtrlst Info
	AddMconmtrlst(context.Context, *AddMconmtrlstRequest) (*AddMconmtrlstReply, error)
	//查詢Mconmtrlst Info
	GetMconmtrlst(context.Context, *GetMconmtrlstRequest) (*GetMconmtrlstReply, error)
	//修改Mconmtrlst Info
	UpdateMconmtrlst(context.Context, *UpdateMconmtrlstRequest) (*UpdateMconmtrlstReply, error)
	//刪除Mconmtrlst Info
	DeleteMconmtrlst(context.Context, *DeleteMconmtrlstRequest) (*DeleteMconmtrlstReply, error)
	//新增Meqpt Info
	AddMeqpt(context.Context, *AddMeqptRequest) (*AddMeqptReply, error)
	//查詢Meqpt Info
	GetMeqpt(context.Context, *GetMeqptRequest) (*GetMeqptReply, error)
	//修改Meqpt Info
	UpdateMeqpt(context.Context, *UpdateMeqptRequest) (*UpdateMeqptReply, error)
	//刪除Meqpt Info
	DeleteMeqpt(context.Context, *DeleteMeqptRequest) (*DeleteMeqptReply, error)
	//新增Meqptcon Info
	AddMeqptcon(context.Context, *AddMeqptconRequest) (*AddMeqptconReply, error)
	//查詢Meqptcon Info
	GetMeqptcon(context.Context, *GetMeqptconRequest) (*GetMeqptconReply, error)
	//修改Meqptcon Info
	UpdateMeqptcon(context.Context, *UpdateMeqptconRequest) (*UpdateMeqptconReply, error)
	//刪除Meqptcon Info
	DeleteMeqptcon(context.Context, *DeleteMeqptconRequest) (*DeleteMeqptconReply, error)
	//修改Storage ID
	UpdateStorageId(context.Context, *UpdateStorageIdRequest) (*UpdateStorageIdReply, error)
	// ～*～*～*～*～*～　代號檔　～*～*～*～*～*～　//
	//回傳代號 (代號Value、名稱Name)
	GetCode(context.Context, *GetCodeRequest) (*GetCodeReply, error)
	// ～*～*～*～*～*～　替代材料檔　～*～*～*～*～*～　//
	//回傳替代材料ID以及替代比率
	GetReplaceMtrl(context.Context, *GetReplaceMtrlRequest) (*GetReplaceMtrlReply, error)
	// ～*～*～*～*～*～　設備-桶槽-材料對應檔　～*～*～*～*～*～　//
	//回傳設備ID清單
	GetEqptList(context.Context, *GetEqptListRequest) (*GetEqptListReply, error)
	//回傳設備對應的材料集合(lotID+mtrlID)
	GetEqptMaterialList(context.Context, *GetEqptMaterialListRequest) (*GetEqptMaterialListReply, error)
	//回傳設備的基本資訊
	GetEqptDetail(context.Context, *GetEqptDetailRequest) (*GetEqptDetailReply, error)
	// ～*～*～*～*～*～　卡匣-材料對應檔　～*～*～*～*～*～　//
	//回傳卡匣明細
	GetCarrierDetail(context.Context, *GetCarrierDetailRequest) (*GetCarrierDetailReply, error)
	//新增卡匣明細
	AddCarrierDetail(context.Context, *AddCarrierDetailRequest) (*AddCarrierDetailReply, error)
	//修改卡匣明細
	UpdateCarrierDetail(context.Context, *UpdateCarrierDetailRequest) (*UpdateCarrierDetailReply, error)
	//刪除卡匣明細
	DeleteCarrierDetail(context.Context, *DeleteCarrierDetailRequest) (*DeleteCarrierDetailReply, error)
	//回傳卡匣材料明細
	GetCarrierMaterial(context.Context, *GetCarrierMaterialRequest) (*GetCarrierMaterialReply, error)
	//新增卡匣材料明細
	AddCarrierMaterial(context.Context, *AddCarrierMaterialRequest) (*AddCarrierMaterialReply, error)
	//修改卡匣材料明細
	UpdateCarrierMaterial(context.Context, *UpdateCarrierMaterialRequest) (*UpdateCarrierMaterialReply, error)
	//刪除卡匣材料明細
	DeleteCarrierMaterial(context.Context, *DeleteCarrierMaterialRequest) (*DeleteCarrierMaterialReply, error)
	// ～*～*～*～*～*～　材料-首數對應檔　～*～*～*～*～*～　//
	//取得材料首數明細
	GetMaterialsSheet(context.Context, *GetMaterialsSheetRequest) (*GetMaterialsSheetReply, error)
	//新增材料首數明細
	AddMaterialsSheet(context.Context, *AddMaterialsSheetRequest) (*AddMaterialsSheetReply, error)
	// ～*～*～*～*～*～   紀錄檢測值    ～*～*～*～*～*～　//
	AddMeasValue(context.Context, *AddMeasValueRequest) (*AddMeasValueReply, error)
	// ～*～*～*～  取得管理部門所擁有材料清單  ～*～*～*～　//
	GetMtrlListByDept(context.Context, *GetMtrlListByDeptRequest) (*GetMtrlListByDeptReply, error)
	// ～*～*～*～*～*～   Log Record    ～*～*～*～*～*～　//
	AddLogRecord(context.Context, *AddLogRecordRequest) (*AddLogRecordReply, error)
	// 依類別取得桶槽
	GetContainerByContype(context.Context, *GetContainerByContypeRequest) (*GetContainerByContypeReply, error)
}

func RegisterMESServer(s *grpc.Server, srv MESServer) {
	s.RegisterService(&_MES_serviceDesc, srv)
}

func _MES_GetWorkOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetWorkOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetWorkOrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetWorkOrderList(ctx, req.(*GetWorkOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetPrepareOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrepareOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetPrepareOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetPrepareOrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetPrepareOrderList(ctx, req.(*GetPrepareOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddWorkOrderHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWorkOrderHeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddWorkOrderHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddWorkOrderHead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddWorkOrderHead(ctx, req.(*AddWorkOrderHeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddWorkOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWorkOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddWorkOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddWorkOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddWorkOrder(ctx, req.(*AddWorkOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddPrepareOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPrepareOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddPrepareOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddPrepareOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddPrepareOrder(ctx, req.(*AddPrepareOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdateWorkOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdateWorkOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdateWorkOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdateWorkOrderStatus(ctx, req.(*UpdateWorkOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdateMtrllstRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMtrllstRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdateMtrllstRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdateMtrllstRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdateMtrllstRecord(ctx, req.(*UpdateMtrllstRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddMsheetbomRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMsheetbomRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddMsheetbomRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddMsheetbomRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddMsheetbomRecord(ctx, req.(*AddMsheetbomRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddMaterial(ctx, req.(*AddMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetMaterialList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetMaterialList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetMaterialList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetMaterialList(ctx, req.(*GetMaterialListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_DeleteMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).DeleteMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/DeleteMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).DeleteMaterials(ctx, req.(*DeleteMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdatePrepareOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrepareOrderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdatePrepareOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdatePrepareOrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdatePrepareOrderInfo(ctx, req.(*UpdatePrepareOrderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetSheetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSheetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetSheetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetSheetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetSheetInfo(ctx, req.(*GetSheetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddSheetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSheetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddSheetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddSheetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddSheetInfo(ctx, req.(*AddSheetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdateSheetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSheetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdateSheetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdateSheetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdateSheetInfo(ctx, req.(*UpdateSheetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddMtrlTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtrlTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddMtrlTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddMtrlTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddMtrlTxList(ctx, req.(*MtrlTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetMtrlTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtrlTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetMtrlTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetMtrlTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetMtrlTxList(ctx, req.(*MtrlTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdateMtrlTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtrlTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdateMtrlTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdateMtrlTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdateMtrlTxList(ctx, req.(*MtrlTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_DeleteMtrlTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtrlTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).DeleteMtrlTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/DeleteMtrlTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).DeleteMtrlTxList(ctx, req.(*MtrlTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddMtx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddMtx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddMtx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddMtx(ctx, req.(*MTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddMtxDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddMtxDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddMtxDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddMtxDetail(ctx, req.(*MTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetMTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetMTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetMTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetMTx(ctx, req.(*MTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetMTxPDA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetMTxPDA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetMTxPDA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetMTxPDA(ctx, req.(*MTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdateMTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdateMTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdateMTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdateMTx(ctx, req.(*MTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdateMTxDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdateMTxDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdateMTxDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdateMTxDetail(ctx, req.(*MTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_DeleteMTX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).DeleteMTX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/DeleteMTX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).DeleteMTX(ctx, req.(*MTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_DeleteMTxDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).DeleteMTxDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/DeleteMTxDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).DeleteMTxDetail(ctx, req.(*MTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddMtxShp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtxShipListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddMtxShp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddMtxShp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddMtxShp(ctx, req.(*MtxShipListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetMTxShp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtxShipListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetMTxShp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetMTxShp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetMTxShp(ctx, req.(*MtxShipListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdateMTxShp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtxShipListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdateMTxShp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdateMTxShp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdateMTxShp(ctx, req.(*MtxShipListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_DeleteMTxShp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtxShipListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).DeleteMTxShp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/DeleteMTxShp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).DeleteMTxShp(ctx, req.(*MtxShipListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddContainerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddContainerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddContainerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddContainerInfo(ctx, req.(*AddContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetContainerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetContainerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetContainerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetContainerInfo(ctx, req.(*GetContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdateContainerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdateContainerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdateContainerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdateContainerInfo(ctx, req.(*UpdateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_DeleteContainerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).DeleteContainerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/DeleteContainerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).DeleteContainerInfo(ctx, req.(*DeleteContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddMconmtrlst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMconmtrlstRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddMconmtrlst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddMconmtrlst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddMconmtrlst(ctx, req.(*AddMconmtrlstRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetMconmtrlst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMconmtrlstRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetMconmtrlst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetMconmtrlst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetMconmtrlst(ctx, req.(*GetMconmtrlstRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdateMconmtrlst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMconmtrlstRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdateMconmtrlst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdateMconmtrlst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdateMconmtrlst(ctx, req.(*UpdateMconmtrlstRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_DeleteMconmtrlst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMconmtrlstRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).DeleteMconmtrlst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/DeleteMconmtrlst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).DeleteMconmtrlst(ctx, req.(*DeleteMconmtrlstRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddMeqpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMeqptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddMeqpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddMeqpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddMeqpt(ctx, req.(*AddMeqptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetMeqpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeqptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetMeqpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetMeqpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetMeqpt(ctx, req.(*GetMeqptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdateMeqpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeqptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdateMeqpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdateMeqpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdateMeqpt(ctx, req.(*UpdateMeqptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_DeleteMeqpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMeqptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).DeleteMeqpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/DeleteMeqpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).DeleteMeqpt(ctx, req.(*DeleteMeqptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddMeqptcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMeqptconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddMeqptcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddMeqptcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddMeqptcon(ctx, req.(*AddMeqptconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetMeqptcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeqptconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetMeqptcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetMeqptcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetMeqptcon(ctx, req.(*GetMeqptconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdateMeqptcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeqptconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdateMeqptcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdateMeqptcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdateMeqptcon(ctx, req.(*UpdateMeqptconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_DeleteMeqptcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMeqptconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).DeleteMeqptcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/DeleteMeqptcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).DeleteMeqptcon(ctx, req.(*DeleteMeqptconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdateStorageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStorageIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdateStorageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdateStorageId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdateStorageId(ctx, req.(*UpdateStorageIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetCode(ctx, req.(*GetCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetReplaceMtrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplaceMtrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetReplaceMtrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetReplaceMtrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetReplaceMtrl(ctx, req.(*GetReplaceMtrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetEqptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEqptListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetEqptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetEqptList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetEqptList(ctx, req.(*GetEqptListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetEqptMaterialList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEqptMaterialListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetEqptMaterialList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetEqptMaterialList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetEqptMaterialList(ctx, req.(*GetEqptMaterialListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetEqptDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEqptDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetEqptDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetEqptDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetEqptDetail(ctx, req.(*GetEqptDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetCarrierDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarrierDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetCarrierDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetCarrierDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetCarrierDetail(ctx, req.(*GetCarrierDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddCarrierDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCarrierDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddCarrierDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddCarrierDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddCarrierDetail(ctx, req.(*AddCarrierDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdateCarrierDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarrierDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdateCarrierDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdateCarrierDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdateCarrierDetail(ctx, req.(*UpdateCarrierDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_DeleteCarrierDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCarrierDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).DeleteCarrierDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/DeleteCarrierDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).DeleteCarrierDetail(ctx, req.(*DeleteCarrierDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetCarrierMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarrierMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetCarrierMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetCarrierMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetCarrierMaterial(ctx, req.(*GetCarrierMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddCarrierMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCarrierMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddCarrierMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddCarrierMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddCarrierMaterial(ctx, req.(*AddCarrierMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_UpdateCarrierMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarrierMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).UpdateCarrierMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/UpdateCarrierMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).UpdateCarrierMaterial(ctx, req.(*UpdateCarrierMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_DeleteCarrierMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCarrierMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).DeleteCarrierMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/DeleteCarrierMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).DeleteCarrierMaterial(ctx, req.(*DeleteCarrierMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetMaterialsSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialsSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetMaterialsSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetMaterialsSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetMaterialsSheet(ctx, req.(*GetMaterialsSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddMaterialsSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMaterialsSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddMaterialsSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddMaterialsSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddMaterialsSheet(ctx, req.(*AddMaterialsSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddMeasValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMeasValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddMeasValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddMeasValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddMeasValue(ctx, req.(*AddMeasValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetMtrlListByDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMtrlListByDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetMtrlListByDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetMtrlListByDept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetMtrlListByDept(ctx, req.(*GetMtrlListByDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_AddLogRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLogRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).AddLogRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/AddLogRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).AddLogRecord(ctx, req.(*AddLogRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MES_GetContainerByContype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerByContypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MESServer).GetContainerByContype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.mes.MES/GetContainerByContype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MESServer).GetContainerByContype(ctx, req.(*GetContainerByContypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MES_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.dm.mes.MES",
	HandlerType: (*MESServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkOrderList",
			Handler:    _MES_GetWorkOrderList_Handler,
		},
		{
			MethodName: "GetPrepareOrderList",
			Handler:    _MES_GetPrepareOrderList_Handler,
		},
		{
			MethodName: "AddWorkOrderHead",
			Handler:    _MES_AddWorkOrderHead_Handler,
		},
		{
			MethodName: "AddWorkOrder",
			Handler:    _MES_AddWorkOrder_Handler,
		},
		{
			MethodName: "AddPrepareOrder",
			Handler:    _MES_AddPrepareOrder_Handler,
		},
		{
			MethodName: "UpdateWorkOrderStatus",
			Handler:    _MES_UpdateWorkOrderStatus_Handler,
		},
		{
			MethodName: "UpdateMtrllstRecord",
			Handler:    _MES_UpdateMtrllstRecord_Handler,
		},
		{
			MethodName: "AddMsheetbomRecord",
			Handler:    _MES_AddMsheetbomRecord_Handler,
		},
		{
			MethodName: "AddMaterial",
			Handler:    _MES_AddMaterial_Handler,
		},
		{
			MethodName: "GetMaterialList",
			Handler:    _MES_GetMaterialList_Handler,
		},
		{
			MethodName: "DeleteMaterials",
			Handler:    _MES_DeleteMaterials_Handler,
		},
		{
			MethodName: "UpdatePrepareOrderInfo",
			Handler:    _MES_UpdatePrepareOrderInfo_Handler,
		},
		{
			MethodName: "GetSheetInfo",
			Handler:    _MES_GetSheetInfo_Handler,
		},
		{
			MethodName: "AddSheetInfo",
			Handler:    _MES_AddSheetInfo_Handler,
		},
		{
			MethodName: "UpdateSheetInfo",
			Handler:    _MES_UpdateSheetInfo_Handler,
		},
		{
			MethodName: "AddMtrlTxList",
			Handler:    _MES_AddMtrlTxList_Handler,
		},
		{
			MethodName: "GetMtrlTxList",
			Handler:    _MES_GetMtrlTxList_Handler,
		},
		{
			MethodName: "UpdateMtrlTxList",
			Handler:    _MES_UpdateMtrlTxList_Handler,
		},
		{
			MethodName: "DeleteMtrlTxList",
			Handler:    _MES_DeleteMtrlTxList_Handler,
		},
		{
			MethodName: "AddMtx",
			Handler:    _MES_AddMtx_Handler,
		},
		{
			MethodName: "AddMtxDetail",
			Handler:    _MES_AddMtxDetail_Handler,
		},
		{
			MethodName: "GetMTx",
			Handler:    _MES_GetMTx_Handler,
		},
		{
			MethodName: "GetMTxPDA",
			Handler:    _MES_GetMTxPDA_Handler,
		},
		{
			MethodName: "UpdateMTx",
			Handler:    _MES_UpdateMTx_Handler,
		},
		{
			MethodName: "UpdateMTxDetail",
			Handler:    _MES_UpdateMTxDetail_Handler,
		},
		{
			MethodName: "DeleteMTX",
			Handler:    _MES_DeleteMTX_Handler,
		},
		{
			MethodName: "DeleteMTxDetail",
			Handler:    _MES_DeleteMTxDetail_Handler,
		},
		{
			MethodName: "AddMtxShp",
			Handler:    _MES_AddMtxShp_Handler,
		},
		{
			MethodName: "GetMTxShp",
			Handler:    _MES_GetMTxShp_Handler,
		},
		{
			MethodName: "UpdateMTxShp",
			Handler:    _MES_UpdateMTxShp_Handler,
		},
		{
			MethodName: "DeleteMTxShp",
			Handler:    _MES_DeleteMTxShp_Handler,
		},
		{
			MethodName: "AddContainerInfo",
			Handler:    _MES_AddContainerInfo_Handler,
		},
		{
			MethodName: "GetContainerInfo",
			Handler:    _MES_GetContainerInfo_Handler,
		},
		{
			MethodName: "UpdateContainerInfo",
			Handler:    _MES_UpdateContainerInfo_Handler,
		},
		{
			MethodName: "DeleteContainerInfo",
			Handler:    _MES_DeleteContainerInfo_Handler,
		},
		{
			MethodName: "AddMconmtrlst",
			Handler:    _MES_AddMconmtrlst_Handler,
		},
		{
			MethodName: "GetMconmtrlst",
			Handler:    _MES_GetMconmtrlst_Handler,
		},
		{
			MethodName: "UpdateMconmtrlst",
			Handler:    _MES_UpdateMconmtrlst_Handler,
		},
		{
			MethodName: "DeleteMconmtrlst",
			Handler:    _MES_DeleteMconmtrlst_Handler,
		},
		{
			MethodName: "AddMeqpt",
			Handler:    _MES_AddMeqpt_Handler,
		},
		{
			MethodName: "GetMeqpt",
			Handler:    _MES_GetMeqpt_Handler,
		},
		{
			MethodName: "UpdateMeqpt",
			Handler:    _MES_UpdateMeqpt_Handler,
		},
		{
			MethodName: "DeleteMeqpt",
			Handler:    _MES_DeleteMeqpt_Handler,
		},
		{
			MethodName: "AddMeqptcon",
			Handler:    _MES_AddMeqptcon_Handler,
		},
		{
			MethodName: "GetMeqptcon",
			Handler:    _MES_GetMeqptcon_Handler,
		},
		{
			MethodName: "UpdateMeqptcon",
			Handler:    _MES_UpdateMeqptcon_Handler,
		},
		{
			MethodName: "DeleteMeqptcon",
			Handler:    _MES_DeleteMeqptcon_Handler,
		},
		{
			MethodName: "UpdateStorageId",
			Handler:    _MES_UpdateStorageId_Handler,
		},
		{
			MethodName: "GetCode",
			Handler:    _MES_GetCode_Handler,
		},
		{
			MethodName: "GetReplaceMtrl",
			Handler:    _MES_GetReplaceMtrl_Handler,
		},
		{
			MethodName: "GetEqptList",
			Handler:    _MES_GetEqptList_Handler,
		},
		{
			MethodName: "GetEqptMaterialList",
			Handler:    _MES_GetEqptMaterialList_Handler,
		},
		{
			MethodName: "GetEqptDetail",
			Handler:    _MES_GetEqptDetail_Handler,
		},
		{
			MethodName: "GetCarrierDetail",
			Handler:    _MES_GetCarrierDetail_Handler,
		},
		{
			MethodName: "AddCarrierDetail",
			Handler:    _MES_AddCarrierDetail_Handler,
		},
		{
			MethodName: "UpdateCarrierDetail",
			Handler:    _MES_UpdateCarrierDetail_Handler,
		},
		{
			MethodName: "DeleteCarrierDetail",
			Handler:    _MES_DeleteCarrierDetail_Handler,
		},
		{
			MethodName: "GetCarrierMaterial",
			Handler:    _MES_GetCarrierMaterial_Handler,
		},
		{
			MethodName: "AddCarrierMaterial",
			Handler:    _MES_AddCarrierMaterial_Handler,
		},
		{
			MethodName: "UpdateCarrierMaterial",
			Handler:    _MES_UpdateCarrierMaterial_Handler,
		},
		{
			MethodName: "DeleteCarrierMaterial",
			Handler:    _MES_DeleteCarrierMaterial_Handler,
		},
		{
			MethodName: "GetMaterialsSheet",
			Handler:    _MES_GetMaterialsSheet_Handler,
		},
		{
			MethodName: "AddMaterialsSheet",
			Handler:    _MES_AddMaterialsSheet_Handler,
		},
		{
			MethodName: "AddMeasValue",
			Handler:    _MES_AddMeasValue_Handler,
		},
		{
			MethodName: "GetMtrlListByDept",
			Handler:    _MES_GetMtrlListByDept_Handler,
		},
		{
			MethodName: "AddLogRecord",
			Handler:    _MES_AddLogRecord_Handler,
		},
		{
			MethodName: "GetContainerByContype",
			Handler:    _MES_GetContainerByContype_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
