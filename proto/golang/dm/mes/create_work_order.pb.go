// Code generated by protoc-gen-go. DO NOT EDIT.
// source: create_work_order.proto

package mes

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddWorkOrderRequest struct {
	Orders               []*OrderList `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AddWorkOrderRequest) Reset()         { *m = AddWorkOrderRequest{} }
func (m *AddWorkOrderRequest) String() string { return proto.CompactTextString(m) }
func (*AddWorkOrderRequest) ProtoMessage()    {}
func (*AddWorkOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad7053780ab5ef8b, []int{0}
}

func (m *AddWorkOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddWorkOrderRequest.Unmarshal(m, b)
}
func (m *AddWorkOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddWorkOrderRequest.Marshal(b, m, deterministic)
}
func (m *AddWorkOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWorkOrderRequest.Merge(m, src)
}
func (m *AddWorkOrderRequest) XXX_Size() int {
	return xxx_messageInfo_AddWorkOrderRequest.Size(m)
}
func (m *AddWorkOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWorkOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWorkOrderRequest proto.InternalMessageInfo

func (m *AddWorkOrderRequest) GetOrders() []*OrderList {
	if m != nil {
		return m.Orders
	}
	return nil
}

type OrderList struct {
	FtyId                int32    `protobuf:"varint,1,opt,name=fty_id,json=ftyId,proto3" json:"fty_id,omitempty"`
	LotId                string   `protobuf:"bytes,2,opt,name=lot_id,json=lotId,proto3" json:"lot_id,omitempty"`
	RecipeId             string   `protobuf:"bytes,3,opt,name=recipe_id,json=recipeId,proto3" json:"recipe_id,omitempty"`
	ProductId            string   `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	MajorVersion         string   `protobuf:"bytes,5,opt,name=major_version,json=majorVersion,proto3" json:"major_version,omitempty"`
	StageStatus          int32    `protobuf:"varint,6,opt,name=stage_status,json=stageStatus,proto3" json:"stage_status,omitempty"`
	PlanQty              float32  `protobuf:"fixed32,7,opt,name=plan_qty,json=planQty,proto3" json:"plan_qty,omitempty"`
	DeptId               string   `protobuf:"bytes,8,opt,name=dept_id,json=deptId,proto3" json:"dept_id,omitempty"`
	ProdType             string   `protobuf:"bytes,9,opt,name=prod_type,json=prodType,proto3" json:"prod_type,omitempty"`
	RwkName              string   `protobuf:"bytes,10,opt,name=rwk_name,json=rwkName,proto3" json:"rwk_name,omitempty"`
	CrProcessName        string   `protobuf:"bytes,11,opt,name=cr_process_name,json=crProcessName,proto3" json:"cr_process_name,omitempty"`
	NxProcessName        string   `protobuf:"bytes,12,opt,name=nx_process_name,json=nxProcessName,proto3" json:"nx_process_name,omitempty"`
	PlanShtCnt           int32    `protobuf:"varint,13,opt,name=plan_sht_cnt,json=planShtCnt,proto3" json:"plan_sht_cnt,omitempty"`
	InsertBy             string   `protobuf:"bytes,14,opt,name=insert_by,json=insertBy,proto3" json:"insert_by,omitempty"`
	RunFlag              string   `protobuf:"bytes,15,opt,name=run_flag,json=runFlag,proto3" json:"run_flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderList) Reset()         { *m = OrderList{} }
func (m *OrderList) String() string { return proto.CompactTextString(m) }
func (*OrderList) ProtoMessage()    {}
func (*OrderList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad7053780ab5ef8b, []int{1}
}

func (m *OrderList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderList.Unmarshal(m, b)
}
func (m *OrderList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderList.Marshal(b, m, deterministic)
}
func (m *OrderList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderList.Merge(m, src)
}
func (m *OrderList) XXX_Size() int {
	return xxx_messageInfo_OrderList.Size(m)
}
func (m *OrderList) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderList.DiscardUnknown(m)
}

var xxx_messageInfo_OrderList proto.InternalMessageInfo

func (m *OrderList) GetFtyId() int32 {
	if m != nil {
		return m.FtyId
	}
	return 0
}

func (m *OrderList) GetLotId() string {
	if m != nil {
		return m.LotId
	}
	return ""
}

func (m *OrderList) GetRecipeId() string {
	if m != nil {
		return m.RecipeId
	}
	return ""
}

func (m *OrderList) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *OrderList) GetMajorVersion() string {
	if m != nil {
		return m.MajorVersion
	}
	return ""
}

func (m *OrderList) GetStageStatus() int32 {
	if m != nil {
		return m.StageStatus
	}
	return 0
}

func (m *OrderList) GetPlanQty() float32 {
	if m != nil {
		return m.PlanQty
	}
	return 0
}

func (m *OrderList) GetDeptId() string {
	if m != nil {
		return m.DeptId
	}
	return ""
}

func (m *OrderList) GetProdType() string {
	if m != nil {
		return m.ProdType
	}
	return ""
}

func (m *OrderList) GetRwkName() string {
	if m != nil {
		return m.RwkName
	}
	return ""
}

func (m *OrderList) GetCrProcessName() string {
	if m != nil {
		return m.CrProcessName
	}
	return ""
}

func (m *OrderList) GetNxProcessName() string {
	if m != nil {
		return m.NxProcessName
	}
	return ""
}

func (m *OrderList) GetPlanShtCnt() int32 {
	if m != nil {
		return m.PlanShtCnt
	}
	return 0
}

func (m *OrderList) GetInsertBy() string {
	if m != nil {
		return m.InsertBy
	}
	return ""
}

func (m *OrderList) GetRunFlag() string {
	if m != nil {
		return m.RunFlag
	}
	return ""
}

type AddWorkOrderReply struct {
	Lots                 []*Clot  `protobuf:"bytes,1,rep,name=lots,proto3" json:"lots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddWorkOrderReply) Reset()         { *m = AddWorkOrderReply{} }
func (m *AddWorkOrderReply) String() string { return proto.CompactTextString(m) }
func (*AddWorkOrderReply) ProtoMessage()    {}
func (*AddWorkOrderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad7053780ab5ef8b, []int{2}
}

func (m *AddWorkOrderReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddWorkOrderReply.Unmarshal(m, b)
}
func (m *AddWorkOrderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddWorkOrderReply.Marshal(b, m, deterministic)
}
func (m *AddWorkOrderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWorkOrderReply.Merge(m, src)
}
func (m *AddWorkOrderReply) XXX_Size() int {
	return xxx_messageInfo_AddWorkOrderReply.Size(m)
}
func (m *AddWorkOrderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWorkOrderReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddWorkOrderReply proto.InternalMessageInfo

func (m *AddWorkOrderReply) GetLots() []*Clot {
	if m != nil {
		return m.Lots
	}
	return nil
}

type Clot struct {
	CrProcessName        string   `protobuf:"bytes,1,opt,name=cr_process_name,json=crProcessName,proto3" json:"cr_process_name,omitempty"`
	NxProcessName        string   `protobuf:"bytes,2,opt,name=nx_process_name,json=nxProcessName,proto3" json:"nx_process_name,omitempty"`
	PlanQty              float32  `protobuf:"fixed32,3,opt,name=plan_qty,json=planQty,proto3" json:"plan_qty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clot) Reset()         { *m = Clot{} }
func (m *Clot) String() string { return proto.CompactTextString(m) }
func (*Clot) ProtoMessage()    {}
func (*Clot) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad7053780ab5ef8b, []int{3}
}

func (m *Clot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Clot.Unmarshal(m, b)
}
func (m *Clot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Clot.Marshal(b, m, deterministic)
}
func (m *Clot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clot.Merge(m, src)
}
func (m *Clot) XXX_Size() int {
	return xxx_messageInfo_Clot.Size(m)
}
func (m *Clot) XXX_DiscardUnknown() {
	xxx_messageInfo_Clot.DiscardUnknown(m)
}

var xxx_messageInfo_Clot proto.InternalMessageInfo

func (m *Clot) GetCrProcessName() string {
	if m != nil {
		return m.CrProcessName
	}
	return ""
}

func (m *Clot) GetNxProcessName() string {
	if m != nil {
		return m.NxProcessName
	}
	return ""
}

func (m *Clot) GetPlanQty() float32 {
	if m != nil {
		return m.PlanQty
	}
	return 0
}

func init() {
	proto.RegisterType((*AddWorkOrderRequest)(nil), "proto.dm.mes.AddWorkOrderRequest")
	proto.RegisterType((*OrderList)(nil), "proto.dm.mes.orderList")
	proto.RegisterType((*AddWorkOrderReply)(nil), "proto.dm.mes.AddWorkOrderReply")
	proto.RegisterType((*Clot)(nil), "proto.dm.mes.Clot")
}

func init() { proto.RegisterFile("create_work_order.proto", fileDescriptor_ad7053780ab5ef8b) }

var fileDescriptor_ad7053780ab5ef8b = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xdb, 0x8b, 0xd3, 0x40,
	0x14, 0xc6, 0x49, 0xef, 0x9d, 0xb6, 0x2e, 0x8e, 0x48, 0x23, 0x22, 0xd4, 0x0a, 0x4b, 0x9f, 0x12,
	0x58, 0x5f, 0x44, 0x9f, 0xdc, 0x85, 0x85, 0x82, 0x78, 0xc9, 0x8a, 0x82, 0x2f, 0xc3, 0x34, 0x33,
	0xcd, 0xc6, 0xce, 0x25, 0x9d, 0x39, 0xdd, 0x6e, 0xfe, 0x4e, 0xff, 0x21, 0x99, 0x93, 0xae, 0xb4,
	0xb0, 0x0f, 0x3e, 0x85, 0xf3, 0xfb, 0xbe, 0x33, 0xf9, 0x0e, 0xe7, 0x90, 0x69, 0xee, 0x24, 0x07,
	0xc9, 0xf6, 0xd6, 0x6d, 0x98, 0x75, 0x42, 0xba, 0xa4, 0x72, 0x16, 0x2c, 0x1d, 0xe3, 0x27, 0x11,
	0x3a, 0xd1, 0xd2, 0xcf, 0xaf, 0xc9, 0xb3, 0x8f, 0x42, 0xfc, 0xb4, 0x6e, 0xf3, 0x25, 0x78, 0x32,
	0xb9, 0xdd, 0x49, 0x0f, 0x34, 0x25, 0x3d, 0xec, 0xf1, 0x71, 0x34, 0x6b, 0x2f, 0x46, 0x17, 0xd3,
	0xe4, 0xb8, 0x2b, 0x41, 0xed, 0x53, 0xe9, 0x21, 0x3b, 0xd8, 0xe6, 0x7f, 0xda, 0x64, 0xf8, 0x8f,
	0xd2, 0xe7, 0xa4, 0xb7, 0x86, 0x9a, 0x95, 0x22, 0x8e, 0x66, 0xd1, 0xa2, 0x9b, 0x75, 0xd7, 0x50,
	0x2f, 0x45, 0xc0, 0xca, 0x42, 0xc0, 0xad, 0x59, 0xb4, 0x18, 0x66, 0x5d, 0x65, 0x61, 0x29, 0xe8,
	0x4b, 0x32, 0x74, 0x32, 0x2f, 0x2b, 0x19, 0x94, 0x36, 0x2a, 0x83, 0x06, 0x2c, 0x05, 0x7d, 0x45,
	0x48, 0xe5, 0xac, 0xd8, 0xe5, 0xd8, 0xd7, 0x41, 0x75, 0x78, 0x20, 0x4b, 0x41, 0xdf, 0x90, 0x89,
	0xe6, 0xbf, 0xad, 0x63, 0x77, 0xd2, 0xf9, 0xd2, 0x9a, 0xb8, 0x8b, 0x8e, 0x31, 0xc2, 0x1f, 0x0d,
	0xa3, 0xaf, 0xc9, 0xd8, 0x03, 0x2f, 0x24, 0xf3, 0xc0, 0x61, 0xe7, 0xe3, 0x1e, 0x86, 0x1a, 0x21,
	0xbb, 0x41, 0x44, 0x5f, 0x90, 0x41, 0xa5, 0xb8, 0x61, 0x5b, 0xa8, 0xe3, 0xfe, 0x2c, 0x5a, 0xb4,
	0xb2, 0x7e, 0xa8, 0xbf, 0x41, 0x4d, 0xa7, 0xa4, 0x2f, 0x64, 0x85, 0xbf, 0x1f, 0xe0, 0xe3, 0xbd,
	0x50, 0x36, 0xb9, 0x43, 0x10, 0x06, 0x75, 0x25, 0xe3, 0x61, 0x93, 0x3b, 0x80, 0xef, 0x75, 0x25,
	0xc3, 0x83, 0x6e, 0xbf, 0x61, 0x86, 0x6b, 0x19, 0x13, 0xd4, 0xfa, 0x6e, 0xbf, 0xf9, 0xcc, 0xb5,
	0xa4, 0xe7, 0xe4, 0x2c, 0x77, 0xac, 0x72, 0x36, 0x97, 0xde, 0x37, 0x8e, 0x11, 0x3a, 0x26, 0xb9,
	0xfb, 0xda, 0xd0, 0x07, 0x9f, 0xb9, 0x3f, 0xf5, 0x8d, 0x1b, 0x9f, 0xb9, 0x3f, 0xf6, 0xcd, 0xc8,
	0x18, 0xb3, 0xfb, 0x5b, 0x60, 0xb9, 0x81, 0x78, 0x82, 0xe3, 0x91, 0xc0, 0x6e, 0x6e, 0xe1, 0xca,
	0x40, 0x48, 0x5a, 0x1a, 0x2f, 0x1d, 0xb0, 0x55, 0x1d, 0x3f, 0x69, 0x92, 0x36, 0xe0, 0xb2, 0xc6,
	0xa4, 0x3b, 0xc3, 0xd6, 0x8a, 0x17, 0xf1, 0xd9, 0x21, 0xe9, 0xce, 0x5c, 0x2b, 0x5e, 0xcc, 0x3f,
	0x90, 0xa7, 0xa7, 0xd7, 0x51, 0xa9, 0x9a, 0x9e, 0x93, 0x8e, 0xb2, 0xf0, 0x70, 0x19, 0xf4, 0xf4,
	0x32, 0xae, 0x94, 0x85, 0x0c, 0xf5, 0xf9, 0x96, 0x74, 0x42, 0xf5, 0xd8, 0xb8, 0xd1, 0x7f, 0x8e,
	0xdb, 0x7a, 0x6c, 0xdc, 0xe3, 0x55, 0xb5, 0x4f, 0x56, 0x75, 0xf9, 0xfe, 0xd7, 0xbb, 0xa2, 0x04,
	0xc5, 0x57, 0xc9, 0x46, 0x1a, 0xc1, 0x93, 0xdc, 0xea, 0x04, 0xf6, 0x29, 0x16, 0x69, 0x6e, 0xb5,
	0xb6, 0xc6, 0xa7, 0x77, 0x17, 0x29, 0x46, 0x4e, 0x0b, 0xab, 0xb8, 0x29, 0x52, 0xa1, 0x53, 0x2d,
	0xfd, 0xaa, 0x87, 0xf0, 0xed, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x84, 0x9b, 0x68, 0x39,
	0x03, 0x00, 0x00,
}
