// Code generated by protoc-gen-go. DO NOT EDIT.
// source: equipment.proto

package productionplanning

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//查詢條件
type EquipmentRequest struct {
	SubNo                string   `protobuf:"bytes,1,opt,name=sub_no,json=subNo,proto3" json:"sub_no,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EquipmentRequest) Reset()         { *m = EquipmentRequest{} }
func (m *EquipmentRequest) String() string { return proto.CompactTextString(m) }
func (*EquipmentRequest) ProtoMessage()    {}
func (*EquipmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbcd82406809d9b8, []int{0}
}

func (m *EquipmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EquipmentRequest.Unmarshal(m, b)
}
func (m *EquipmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EquipmentRequest.Marshal(b, m, deterministic)
}
func (m *EquipmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipmentRequest.Merge(m, src)
}
func (m *EquipmentRequest) XXX_Size() int {
	return xxx_messageInfo_EquipmentRequest.Size(m)
}
func (m *EquipmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EquipmentRequest proto.InternalMessageInfo

func (m *EquipmentRequest) GetSubNo() string {
	if m != nil {
		return m.SubNo
	}
	return ""
}

func (m *EquipmentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SingleEquipment struct {
	SubNo                string   `protobuf:"bytes,1,opt,name=sub_no,json=subNo,proto3" json:"sub_no,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	MajoreqId            string   `protobuf:"bytes,3,opt,name=majoreq_id,json=majoreqId,proto3" json:"majoreq_id,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Location             string   `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	PhysicalLocation     string   `protobuf:"bytes,7,opt,name=physical_location,json=physicalLocation,proto3" json:"physical_location,omitempty"`
	CalendarId           string   `protobuf:"bytes,8,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	Efficiency           float32  `protobuf:"fixed32,9,opt,name=efficiency,proto3" json:"efficiency,omitempty"`
	Property             float32  `protobuf:"fixed32,10,opt,name=property,proto3" json:"property,omitempty"`
	StartEffectDatetime  string   `protobuf:"bytes,11,opt,name=start_effect_datetime,json=startEffectDatetime,proto3" json:"start_effect_datetime,omitempty"`
	EndEffectDatetime    string   `protobuf:"bytes,12,opt,name=end_effect_datetime,json=endEffectDatetime,proto3" json:"end_effect_datetime,omitempty"`
	TransQty             float32  `protobuf:"fixed32,13,opt,name=trans_qty,json=transQty,proto3" json:"trans_qty,omitempty"`
	IsTransQtyByPcs      float32  `protobuf:"fixed32,14,opt,name=is_trans_qty_by_pcs,json=isTransQtyByPcs,proto3" json:"is_trans_qty_by_pcs,omitempty"`
	CheckMaintainNo      float32  `protobuf:"fixed32,15,opt,name=check_maintain_no,json=checkMaintainNo,proto3" json:"check_maintain_no,omitempty"`
	LastMaintainUser     string   `protobuf:"bytes,16,opt,name=last_maintain_user,json=lastMaintainUser,proto3" json:"last_maintain_user,omitempty"`
	LastMaintainDatetime string   `protobuf:"bytes,17,opt,name=last_maintain_datetime,json=lastMaintainDatetime,proto3" json:"last_maintain_datetime,omitempty"`
	MaxRun               float32  `protobuf:"fixed32,18,opt,name=max_run,json=maxRun,proto3" json:"max_run,omitempty"`
	AccRun               float32  `protobuf:"fixed32,19,opt,name=acc_run,json=accRun,proto3" json:"acc_run,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleEquipment) Reset()         { *m = SingleEquipment{} }
func (m *SingleEquipment) String() string { return proto.CompactTextString(m) }
func (*SingleEquipment) ProtoMessage()    {}
func (*SingleEquipment) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbcd82406809d9b8, []int{1}
}

func (m *SingleEquipment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleEquipment.Unmarshal(m, b)
}
func (m *SingleEquipment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleEquipment.Marshal(b, m, deterministic)
}
func (m *SingleEquipment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleEquipment.Merge(m, src)
}
func (m *SingleEquipment) XXX_Size() int {
	return xxx_messageInfo_SingleEquipment.Size(m)
}
func (m *SingleEquipment) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleEquipment.DiscardUnknown(m)
}

var xxx_messageInfo_SingleEquipment proto.InternalMessageInfo

func (m *SingleEquipment) GetSubNo() string {
	if m != nil {
		return m.SubNo
	}
	return ""
}

func (m *SingleEquipment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SingleEquipment) GetMajoreqId() string {
	if m != nil {
		return m.MajoreqId
	}
	return ""
}

func (m *SingleEquipment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SingleEquipment) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SingleEquipment) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *SingleEquipment) GetPhysicalLocation() string {
	if m != nil {
		return m.PhysicalLocation
	}
	return ""
}

func (m *SingleEquipment) GetCalendarId() string {
	if m != nil {
		return m.CalendarId
	}
	return ""
}

func (m *SingleEquipment) GetEfficiency() float32 {
	if m != nil {
		return m.Efficiency
	}
	return 0
}

func (m *SingleEquipment) GetProperty() float32 {
	if m != nil {
		return m.Property
	}
	return 0
}

func (m *SingleEquipment) GetStartEffectDatetime() string {
	if m != nil {
		return m.StartEffectDatetime
	}
	return ""
}

func (m *SingleEquipment) GetEndEffectDatetime() string {
	if m != nil {
		return m.EndEffectDatetime
	}
	return ""
}

func (m *SingleEquipment) GetTransQty() float32 {
	if m != nil {
		return m.TransQty
	}
	return 0
}

func (m *SingleEquipment) GetIsTransQtyByPcs() float32 {
	if m != nil {
		return m.IsTransQtyByPcs
	}
	return 0
}

func (m *SingleEquipment) GetCheckMaintainNo() float32 {
	if m != nil {
		return m.CheckMaintainNo
	}
	return 0
}

func (m *SingleEquipment) GetLastMaintainUser() string {
	if m != nil {
		return m.LastMaintainUser
	}
	return ""
}

func (m *SingleEquipment) GetLastMaintainDatetime() string {
	if m != nil {
		return m.LastMaintainDatetime
	}
	return ""
}

func (m *SingleEquipment) GetMaxRun() float32 {
	if m != nil {
		return m.MaxRun
	}
	return 0
}

func (m *SingleEquipment) GetAccRun() float32 {
	if m != nil {
		return m.AccRun
	}
	return 0
}

type MultiEquipment struct {
	Dataset              []*SingleEquipment `protobuf:"bytes,1,rep,name=dataset,proto3" json:"dataset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MultiEquipment) Reset()         { *m = MultiEquipment{} }
func (m *MultiEquipment) String() string { return proto.CompactTextString(m) }
func (*MultiEquipment) ProtoMessage()    {}
func (*MultiEquipment) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbcd82406809d9b8, []int{2}
}

func (m *MultiEquipment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiEquipment.Unmarshal(m, b)
}
func (m *MultiEquipment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiEquipment.Marshal(b, m, deterministic)
}
func (m *MultiEquipment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiEquipment.Merge(m, src)
}
func (m *MultiEquipment) XXX_Size() int {
	return xxx_messageInfo_MultiEquipment.Size(m)
}
func (m *MultiEquipment) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiEquipment.DiscardUnknown(m)
}

var xxx_messageInfo_MultiEquipment proto.InternalMessageInfo

func (m *MultiEquipment) GetDataset() []*SingleEquipment {
	if m != nil {
		return m.Dataset
	}
	return nil
}

func init() {
	proto.RegisterType((*EquipmentRequest)(nil), "proto.dm.productionplanning.EquipmentRequest")
	proto.RegisterType((*SingleEquipment)(nil), "proto.dm.productionplanning.SingleEquipment")
	proto.RegisterType((*MultiEquipment)(nil), "proto.dm.productionplanning.MultiEquipment")
}

func init() { proto.RegisterFile("equipment.proto", fileDescriptor_dbcd82406809d9b8) }

var fileDescriptor_dbcd82406809d9b8 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x5f, 0x6f, 0xd3, 0x3c,
	0x14, 0x87, 0xd5, 0x6e, 0x6b, 0xd7, 0xd3, 0xf7, 0xed, 0x1f, 0x97, 0x81, 0xc5, 0x04, 0x54, 0xbd,
	0xaa, 0xa0, 0x4a, 0xa4, 0xc2, 0x0d, 0xb7, 0x13, 0x03, 0x55, 0x62, 0x13, 0x04, 0x90, 0x10, 0x37,
	0x91, 0x6b, 0xbb, 0x9d, 0x59, 0x6c, 0xa7, 0xb1, 0x03, 0xcb, 0xf7, 0xe1, 0x83, 0xa2, 0x9c, 0x36,
	0x59, 0xd9, 0x24, 0xc4, 0x55, 0x7b, 0x7e, 0xcf, 0x73, 0xec, 0xe3, 0xc4, 0x81, 0xbe, 0xdc, 0xe4,
	0x2a, 0xd5, 0xd2, 0xf8, 0x20, 0xcd, 0xac, 0xb7, 0xe4, 0x14, 0x7f, 0x02, 0xa1, 0xcb, 0x5a, 0xe4,
	0xdc, 0x2b, 0x6b, 0xd2, 0x84, 0x19, 0xa3, 0xcc, 0x7a, 0xf2, 0x1a, 0x06, 0xe7, 0x95, 0x1f, 0xc9,
	0x4d, 0x2e, 0x9d, 0x27, 0x27, 0xd0, 0x72, 0xf9, 0x32, 0x36, 0x96, 0x36, 0xc6, 0x8d, 0x69, 0x27,
	0x3a, 0x72, 0xf9, 0xf2, 0xd2, 0x92, 0x1e, 0x34, 0x95, 0xa0, 0x4d, 0x8c, 0x9a, 0x4a, 0x4c, 0x7e,
	0x1d, 0x41, 0xff, 0x93, 0x32, 0xeb, 0x44, 0xd6, 0x2b, 0xfc, 0x63, 0x2b, 0x79, 0x02, 0xa0, 0xd9,
	0x77, 0x9b, 0xc9, 0x4d, 0xac, 0x04, 0x3d, 0xc0, 0xbc, 0xb3, 0x4b, 0x16, 0x82, 0x10, 0x38, 0x34,
	0x4c, 0x4b, 0x7a, 0x88, 0x00, 0xff, 0x93, 0x31, 0x74, 0x85, 0x74, 0x3c, 0x53, 0x69, 0x39, 0x3f,
	0x3d, 0x42, 0xb4, 0x1f, 0x91, 0xc7, 0x70, 0x9c, 0x58, 0xce, 0x10, 0xb7, 0x10, 0xd7, 0x35, 0x79,
	0x01, 0xc3, 0xf4, 0xaa, 0x70, 0x8a, 0xb3, 0x24, 0xae, 0xa5, 0x36, 0x4a, 0x83, 0x0a, 0xbc, 0xaf,
	0xe4, 0x67, 0xd0, 0xe5, 0x2c, 0x91, 0x46, 0xb0, 0xac, 0x1c, 0xef, 0x18, 0x35, 0xa8, 0xa2, 0x85,
	0x20, 0x4f, 0x01, 0xe4, 0x6a, 0xa5, 0xb8, 0x92, 0x86, 0x17, 0xb4, 0x33, 0x6e, 0x4c, 0x9b, 0xd1,
	0x5e, 0x52, 0x4e, 0x92, 0x66, 0x36, 0x95, 0x99, 0x2f, 0x28, 0x20, 0xad, 0x6b, 0x32, 0x87, 0x13,
	0xe7, 0x59, 0xe6, 0x63, 0xb9, 0x5a, 0x49, 0xee, 0x63, 0xc1, 0xbc, 0xf4, 0x4a, 0x4b, 0xda, 0xc5,
	0x6d, 0x46, 0x08, 0xcf, 0x91, 0xbd, 0xd9, 0x21, 0x12, 0xc0, 0x48, 0x1a, 0x71, 0xaf, 0xe3, 0x3f,
	0xec, 0x18, 0x4a, 0x23, 0xee, 0xf8, 0xa7, 0xd0, 0xf1, 0x19, 0x33, 0x2e, 0xde, 0xf8, 0x82, 0xfe,
	0xbf, 0x1d, 0x00, 0x83, 0x8f, 0xbe, 0x20, 0x33, 0x18, 0x29, 0x17, 0xd7, 0x3c, 0x5e, 0x16, 0x71,
	0xca, 0x1d, 0xed, 0xa1, 0xd6, 0x57, 0xee, 0xf3, 0x4e, 0x3c, 0x2b, 0x3e, 0x70, 0x47, 0x9e, 0xc3,
	0x90, 0x5f, 0x49, 0x7e, 0x1d, 0x6b, 0xa6, 0x8c, 0x67, 0xca, 0x94, 0xef, 0xb6, 0xbf, 0x75, 0x11,
	0x5c, 0xec, 0xf2, 0x4b, 0x4b, 0x66, 0x40, 0x12, 0xe6, 0xfc, 0xad, 0x9a, 0x3b, 0x99, 0xd1, 0xc1,
	0xf6, 0x29, 0x97, 0xa4, 0x72, 0xbf, 0x38, 0x99, 0x91, 0x57, 0xf0, 0xf0, 0x4f, 0xbb, 0x3e, 0xd7,
	0x10, 0x3b, 0x1e, 0xec, 0x77, 0xd4, 0x47, 0x7b, 0x04, 0x6d, 0xcd, 0x6e, 0xe2, 0x2c, 0x37, 0x94,
	0xe0, 0x14, 0x2d, 0xcd, 0x6e, 0xa2, 0xdc, 0x94, 0x80, 0x71, 0x8e, 0x60, 0xb4, 0x05, 0x8c, 0xf3,
	0x28, 0x37, 0x93, 0xaf, 0xd0, 0xbb, 0xc8, 0x13, 0xaf, 0x6e, 0x2f, 0xe9, 0x5b, 0x68, 0x0b, 0xe6,
	0x99, 0x93, 0x9e, 0x36, 0xc6, 0x07, 0xd3, 0xee, 0x7c, 0x16, 0xfc, 0xe5, 0x13, 0x09, 0xee, 0xdc,
	0xf1, 0xa8, 0x6a, 0x3e, 0x5b, 0x7c, 0x7b, 0xb7, 0x56, 0x3e, 0x61, 0xcb, 0xe0, 0xba, 0xbc, 0x19,
	0x01, 0xb7, 0x3a, 0xf0, 0x3f, 0x43, 0x2c, 0x42, 0x6e, 0xb5, 0xb6, 0xc6, 0x85, 0x3f, 0xe6, 0x21,
	0x2e, 0x1e, 0xae, 0x6d, 0xc2, 0xcc, 0x3a, 0x14, 0x3a, 0xbc, 0xbf, 0xc7, 0xb2, 0x85, 0xce, 0xcb,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x84, 0x58, 0x71, 0x5e, 0xbd, 0x03, 0x00, 0x00,
}
