// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package prd

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//標示卡-單筆
type Barcode struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Factory              string   `protobuf:"bytes,2,opt,name=factory,proto3" json:"factory,omitempty"`
	Slipno               string   `protobuf:"bytes,3,opt,name=slipno,proto3" json:"slipno,omitempty"`
	PrdQty               int32    `protobuf:"varint,4,opt,name=prd_qty,json=prdQty,proto3" json:"prd_qty,omitempty"`
	UseQty               int32    `protobuf:"varint,5,opt,name=use_qty,json=useQty,proto3" json:"use_qty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Barcode) Reset()         { *m = Barcode{} }
func (m *Barcode) String() string { return proto.CompactTextString(m) }
func (*Barcode) ProtoMessage()    {}
func (*Barcode) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *Barcode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Barcode.Unmarshal(m, b)
}
func (m *Barcode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Barcode.Marshal(b, m, deterministic)
}
func (m *Barcode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Barcode.Merge(m, src)
}
func (m *Barcode) XXX_Size() int {
	return xxx_messageInfo_Barcode.Size(m)
}
func (m *Barcode) XXX_DiscardUnknown() {
	xxx_messageInfo_Barcode.DiscardUnknown(m)
}

var xxx_messageInfo_Barcode proto.InternalMessageInfo

func (m *Barcode) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *Barcode) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *Barcode) GetSlipno() string {
	if m != nil {
		return m.Slipno
	}
	return ""
}

func (m *Barcode) GetPrdQty() int32 {
	if m != nil {
		return m.PrdQty
	}
	return 0
}

func (m *Barcode) GetUseQty() int32 {
	if m != nil {
		return m.UseQty
	}
	return 0
}

//生產紀錄-多筆
type ProductionRecords struct {
	Records              []*ProductionRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProductionRecords) Reset()         { *m = ProductionRecords{} }
func (m *ProductionRecords) String() string { return proto.CompactTextString(m) }
func (*ProductionRecords) ProtoMessage()    {}
func (*ProductionRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *ProductionRecords) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductionRecords.Unmarshal(m, b)
}
func (m *ProductionRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductionRecords.Marshal(b, m, deterministic)
}
func (m *ProductionRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductionRecords.Merge(m, src)
}
func (m *ProductionRecords) XXX_Size() int {
	return xxx_messageInfo_ProductionRecords.Size(m)
}
func (m *ProductionRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductionRecords.DiscardUnknown(m)
}

var xxx_messageInfo_ProductionRecords proto.InternalMessageInfo

func (m *ProductionRecords) GetRecords() []*ProductionRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

//生產紀錄-單筆
type ProductionRecord struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Factory              string   `protobuf:"bytes,2,opt,name=factory,proto3" json:"factory,omitempty"`
	Pday                 string   `protobuf:"bytes,3,opt,name=pday,proto3" json:"pday,omitempty"`
	Class                string   `protobuf:"bytes,4,opt,name=class,proto3" json:"class,omitempty"`
	Empno                string   `protobuf:"bytes,5,opt,name=empno,proto3" json:"empno,omitempty"`
	Stype                string   `protobuf:"bytes,6,opt,name=stype,proto3" json:"stype,omitempty"`
	Ptype                string   `protobuf:"bytes,7,opt,name=ptype,proto3" json:"ptype,omitempty"`
	Machnd               string   `protobuf:"bytes,8,opt,name=machnd,proto3" json:"machnd,omitempty"`
	Barcode              string   `protobuf:"bytes,9,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Partno               string   `protobuf:"bytes,10,opt,name=partno,proto3" json:"partno,omitempty"`
	Cordslip             string   `protobuf:"bytes,11,opt,name=cordslip,proto3" json:"cordslip,omitempty"`
	Cordpn               string   `protobuf:"bytes,12,opt,name=cordpn,proto3" json:"cordpn,omitempty"`
	RubberSlip           string   `protobuf:"bytes,13,opt,name=rubber_slip,json=rubberSlip,proto3" json:"rubber_slip,omitempty"`
	RubberPn             string   `protobuf:"bytes,14,opt,name=rubber_pn,json=rubberPn,proto3" json:"rubber_pn,omitempty"`
	UserNo               string   `protobuf:"bytes,15,opt,name=user_no,json=userNo,proto3" json:"user_no,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductionRecord) Reset()         { *m = ProductionRecord{} }
func (m *ProductionRecord) String() string { return proto.CompactTextString(m) }
func (*ProductionRecord) ProtoMessage()    {}
func (*ProductionRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *ProductionRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductionRecord.Unmarshal(m, b)
}
func (m *ProductionRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductionRecord.Marshal(b, m, deterministic)
}
func (m *ProductionRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductionRecord.Merge(m, src)
}
func (m *ProductionRecord) XXX_Size() int {
	return xxx_messageInfo_ProductionRecord.Size(m)
}
func (m *ProductionRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductionRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ProductionRecord proto.InternalMessageInfo

func (m *ProductionRecord) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *ProductionRecord) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *ProductionRecord) GetPday() string {
	if m != nil {
		return m.Pday
	}
	return ""
}

func (m *ProductionRecord) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *ProductionRecord) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *ProductionRecord) GetStype() string {
	if m != nil {
		return m.Stype
	}
	return ""
}

func (m *ProductionRecord) GetPtype() string {
	if m != nil {
		return m.Ptype
	}
	return ""
}

func (m *ProductionRecord) GetMachnd() string {
	if m != nil {
		return m.Machnd
	}
	return ""
}

func (m *ProductionRecord) GetBarcode() string {
	if m != nil {
		return m.Barcode
	}
	return ""
}

func (m *ProductionRecord) GetPartno() string {
	if m != nil {
		return m.Partno
	}
	return ""
}

func (m *ProductionRecord) GetCordslip() string {
	if m != nil {
		return m.Cordslip
	}
	return ""
}

func (m *ProductionRecord) GetCordpn() string {
	if m != nil {
		return m.Cordpn
	}
	return ""
}

func (m *ProductionRecord) GetRubberSlip() string {
	if m != nil {
		return m.RubberSlip
	}
	return ""
}

func (m *ProductionRecord) GetRubberPn() string {
	if m != nil {
		return m.RubberPn
	}
	return ""
}

func (m *ProductionRecord) GetUserNo() string {
	if m != nil {
		return m.UserNo
	}
	return ""
}

//異動資料數量
type AffectedReply struct {
	RowsAffected         int64    `protobuf:"varint,1,opt,name=rows_affected,json=rowsAffected,proto3" json:"rows_affected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AffectedReply) Reset()         { *m = AffectedReply{} }
func (m *AffectedReply) String() string { return proto.CompactTextString(m) }
func (*AffectedReply) ProtoMessage()    {}
func (*AffectedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *AffectedReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AffectedReply.Unmarshal(m, b)
}
func (m *AffectedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AffectedReply.Marshal(b, m, deterministic)
}
func (m *AffectedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffectedReply.Merge(m, src)
}
func (m *AffectedReply) XXX_Size() int {
	return xxx_messageInfo_AffectedReply.Size(m)
}
func (m *AffectedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AffectedReply.DiscardUnknown(m)
}

var xxx_messageInfo_AffectedReply proto.InternalMessageInfo

func (m *AffectedReply) GetRowsAffected() int64 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

// 膠料表合格異動-單筆
type PrdRubb struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Factory              string   `protobuf:"bytes,2,opt,name=factory,proto3" json:"factory,omitempty"`
	Qcfinal              string   `protobuf:"bytes,3,opt,name=qcfinal,proto3" json:"qcfinal,omitempty"`
	Slipno               string   `protobuf:"bytes,4,opt,name=slipno,proto3" json:"slipno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrdRubb) Reset()         { *m = PrdRubb{} }
func (m *PrdRubb) String() string { return proto.CompactTextString(m) }
func (*PrdRubb) ProtoMessage()    {}
func (*PrdRubb) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *PrdRubb) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrdRubb.Unmarshal(m, b)
}
func (m *PrdRubb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrdRubb.Marshal(b, m, deterministic)
}
func (m *PrdRubb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrdRubb.Merge(m, src)
}
func (m *PrdRubb) XXX_Size() int {
	return xxx_messageInfo_PrdRubb.Size(m)
}
func (m *PrdRubb) XXX_DiscardUnknown() {
	xxx_messageInfo_PrdRubb.DiscardUnknown(m)
}

var xxx_messageInfo_PrdRubb proto.InternalMessageInfo

func (m *PrdRubb) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *PrdRubb) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *PrdRubb) GetQcfinal() string {
	if m != nil {
		return m.Qcfinal
	}
	return ""
}

func (m *PrdRubb) GetSlipno() string {
	if m != nil {
		return m.Slipno
	}
	return ""
}

// 紀錄盤點資訊
type MtrlInventoryRecordRequest struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Factory              string   `protobuf:"bytes,2,opt,name=factory,proto3" json:"factory,omitempty"`
	Empno                string   `protobuf:"bytes,3,opt,name=empno,proto3" json:"empno,omitempty"`
	Machnd               string   `protobuf:"bytes,4,opt,name=machnd,proto3" json:"machnd,omitempty"`
	Barcode              string   `protobuf:"bytes,5,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Pday                 string   `protobuf:"bytes,6,opt,name=pday,proto3" json:"pday,omitempty"`
	Usrno                string   `protobuf:"bytes,7,opt,name=usrno,proto3" json:"usrno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MtrlInventoryRecordRequest) Reset()         { *m = MtrlInventoryRecordRequest{} }
func (m *MtrlInventoryRecordRequest) String() string { return proto.CompactTextString(m) }
func (*MtrlInventoryRecordRequest) ProtoMessage()    {}
func (*MtrlInventoryRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}

func (m *MtrlInventoryRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MtrlInventoryRecordRequest.Unmarshal(m, b)
}
func (m *MtrlInventoryRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MtrlInventoryRecordRequest.Marshal(b, m, deterministic)
}
func (m *MtrlInventoryRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MtrlInventoryRecordRequest.Merge(m, src)
}
func (m *MtrlInventoryRecordRequest) XXX_Size() int {
	return xxx_messageInfo_MtrlInventoryRecordRequest.Size(m)
}
func (m *MtrlInventoryRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MtrlInventoryRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MtrlInventoryRecordRequest proto.InternalMessageInfo

func (m *MtrlInventoryRecordRequest) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *MtrlInventoryRecordRequest) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *MtrlInventoryRecordRequest) GetEmpno() string {
	if m != nil {
		return m.Empno
	}
	return ""
}

func (m *MtrlInventoryRecordRequest) GetMachnd() string {
	if m != nil {
		return m.Machnd
	}
	return ""
}

func (m *MtrlInventoryRecordRequest) GetBarcode() string {
	if m != nil {
		return m.Barcode
	}
	return ""
}

func (m *MtrlInventoryRecordRequest) GetPday() string {
	if m != nil {
		return m.Pday
	}
	return ""
}

func (m *MtrlInventoryRecordRequest) GetUsrno() string {
	if m != nil {
		return m.Usrno
	}
	return ""
}

// 取得盤點清單
type GetPrdStkListRequest struct {
	Subno                string   `protobuf:"bytes,1,opt,name=subno,proto3" json:"subno,omitempty"`
	Pday                 string   `protobuf:"bytes,2,opt,name=pday,proto3" json:"pday,omitempty"`
	Factory              string   `protobuf:"bytes,3,opt,name=factory,proto3" json:"factory,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPrdStkListRequest) Reset()         { *m = GetPrdStkListRequest{} }
func (m *GetPrdStkListRequest) String() string { return proto.CompactTextString(m) }
func (*GetPrdStkListRequest) ProtoMessage()    {}
func (*GetPrdStkListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6}
}

func (m *GetPrdStkListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPrdStkListRequest.Unmarshal(m, b)
}
func (m *GetPrdStkListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPrdStkListRequest.Marshal(b, m, deterministic)
}
func (m *GetPrdStkListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrdStkListRequest.Merge(m, src)
}
func (m *GetPrdStkListRequest) XXX_Size() int {
	return xxx_messageInfo_GetPrdStkListRequest.Size(m)
}
func (m *GetPrdStkListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrdStkListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrdStkListRequest proto.InternalMessageInfo

func (m *GetPrdStkListRequest) GetSubno() string {
	if m != nil {
		return m.Subno
	}
	return ""
}

func (m *GetPrdStkListRequest) GetPday() string {
	if m != nil {
		return m.Pday
	}
	return ""
}

func (m *GetPrdStkListRequest) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

// 材料盤點清單-多筆
type GetPrdStkListReply struct {
	Lists                []*StkList `protobuf:"bytes,1,rep,name=lists,proto3" json:"lists,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetPrdStkListReply) Reset()         { *m = GetPrdStkListReply{} }
func (m *GetPrdStkListReply) String() string { return proto.CompactTextString(m) }
func (*GetPrdStkListReply) ProtoMessage()    {}
func (*GetPrdStkListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7}
}

func (m *GetPrdStkListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPrdStkListReply.Unmarshal(m, b)
}
func (m *GetPrdStkListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPrdStkListReply.Marshal(b, m, deterministic)
}
func (m *GetPrdStkListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrdStkListReply.Merge(m, src)
}
func (m *GetPrdStkListReply) XXX_Size() int {
	return xxx_messageInfo_GetPrdStkListReply.Size(m)
}
func (m *GetPrdStkListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrdStkListReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrdStkListReply proto.InternalMessageInfo

func (m *GetPrdStkListReply) GetLists() []*StkList {
	if m != nil {
		return m.Lists
	}
	return nil
}

// 材料盤點清單-單筆
type StkList struct {
	Machnd               string   `protobuf:"bytes,1,opt,name=machnd,proto3" json:"machnd,omitempty"`
	Barcode              string   `protobuf:"bytes,2,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Exodate              string   `protobuf:"bytes,3,opt,name=exodate,proto3" json:"exodate,omitempty"`
	Partno               string   `protobuf:"bytes,4,opt,name=partno,proto3" json:"partno,omitempty"`
	Useqty               float32  `protobuf:"fixed32,5,opt,name=useqty,proto3" json:"useqty,omitempty"`
	Usedspec             string   `protobuf:"bytes,6,opt,name=usedspec,proto3" json:"usedspec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StkList) Reset()         { *m = StkList{} }
func (m *StkList) String() string { return proto.CompactTextString(m) }
func (*StkList) ProtoMessage()    {}
func (*StkList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{8}
}

func (m *StkList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StkList.Unmarshal(m, b)
}
func (m *StkList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StkList.Marshal(b, m, deterministic)
}
func (m *StkList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StkList.Merge(m, src)
}
func (m *StkList) XXX_Size() int {
	return xxx_messageInfo_StkList.Size(m)
}
func (m *StkList) XXX_DiscardUnknown() {
	xxx_messageInfo_StkList.DiscardUnknown(m)
}

var xxx_messageInfo_StkList proto.InternalMessageInfo

func (m *StkList) GetMachnd() string {
	if m != nil {
		return m.Machnd
	}
	return ""
}

func (m *StkList) GetBarcode() string {
	if m != nil {
		return m.Barcode
	}
	return ""
}

func (m *StkList) GetExodate() string {
	if m != nil {
		return m.Exodate
	}
	return ""
}

func (m *StkList) GetPartno() string {
	if m != nil {
		return m.Partno
	}
	return ""
}

func (m *StkList) GetUseqty() float32 {
	if m != nil {
		return m.Useqty
	}
	return 0
}

func (m *StkList) GetUsedspec() string {
	if m != nil {
		return m.Usedspec
	}
	return ""
}

func init() {
	proto.RegisterType((*Barcode)(nil), "proto.dm.prd.Barcode")
	proto.RegisterType((*ProductionRecords)(nil), "proto.dm.prd.ProductionRecords")
	proto.RegisterType((*ProductionRecord)(nil), "proto.dm.prd.ProductionRecord")
	proto.RegisterType((*AffectedReply)(nil), "proto.dm.prd.AffectedReply")
	proto.RegisterType((*PrdRubb)(nil), "proto.dm.prd.PrdRubb")
	proto.RegisterType((*MtrlInventoryRecordRequest)(nil), "proto.dm.prd.MtrlInventoryRecordRequest")
	proto.RegisterType((*GetPrdStkListRequest)(nil), "proto.dm.prd.GetPrdStkListRequest")
	proto.RegisterType((*GetPrdStkListReply)(nil), "proto.dm.prd.GetPrdStkListReply")
	proto.RegisterType((*StkList)(nil), "proto.dm.prd.StkList")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 1226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcf, 0x6e, 0xdb, 0xc6,
	0x13, 0x06, 0x2d, 0xcb, 0x8a, 0xd7, 0xf6, 0x2f, 0x31, 0x63, 0x3b, 0xfc, 0xd1, 0x69, 0xa2, 0xae,
	0x9a, 0xc6, 0x49, 0x01, 0xb1, 0x70, 0x53, 0xc0, 0xcd, 0xcd, 0x4e, 0x53, 0x23, 0x40, 0x5c, 0xd8,
	0x32, 0x7a, 0x09, 0x8a, 0xb2, 0x4b, 0xee, 0x4a, 0x21, 0x4c, 0xee, 0x52, 0xcb, 0xa5, 0x63, 0x9d,
	0x8a, 0x36, 0xbd, 0xf4, 0xd4, 0x43, 0x9f, 0xa0, 0x87, 0x02, 0x7d, 0x8a, 0xbe, 0x44, 0x5f, 0xa1,
	0x7d, 0x8f, 0x62, 0xff, 0x50, 0x26, 0x25, 0x99, 0xb6, 0x03, 0xe4, 0x22, 0x69, 0x66, 0xbe, 0x9d,
	0xf9, 0x76, 0xe6, 0xe3, 0x72, 0x05, 0x56, 0x32, 0xc2, 0x4f, 0xa3, 0x90, 0x74, 0x53, 0xce, 0x04,
	0xb3, 0x97, 0xd5, 0x57, 0x17, 0x27, 0xdd, 0x94, 0x63, 0xf7, 0xee, 0x80, 0xb1, 0x41, 0x4c, 0x3c,
	0x94, 0x46, 0x1e, 0xa2, 0x94, 0x09, 0x24, 0x22, 0x46, 0x33, 0x8d, 0x75, 0x37, 0x4d, 0x54, 0x59,
	0x41, 0xde, 0xf7, 0x48, 0x92, 0x8a, 0x91, 0x09, 0x3a, 0xea, 0xcb, 0xc3, 0x89, 0x97, 0x72, 0xec,
	0xc5, 0x28, 0x20, 0xb1, 0x89, 0xb4, 0x2b, 0x91, 0x61, 0x4e, 0xf8, 0xc8, 0x4f, 0x39, 0xf6, 0x13,
	0x44, 0x0d, 0xa2, 0x53, 0x41, 0x24, 0x82, 0xc7, 0x7e, 0x28, 0x3f, 0x38, 0x09, 0x19, 0xc7, 0x06,
	0xf4, 0x70, 0x1a, 0x44, 0xce, 0x04, 0xa1, 0x98, 0xe0, 0x3a, 0xa0, 0xae, 0x17, 0x20, 0x11, 0xbe,
	0xf6, 0x87, 0x39, 0xa2, 0x22, 0x1a, 0x53, 0xde, 0xa9, 0x00, 0x11, 0xc6, 0x7e, 0x1a, 0x72, 0xbf,
	0x1f, 0xf1, 0x4c, 0xf8, 0x09, 0x3b, 0x25, 0x7e, 0x44, 0xfd, 0x04, 0x09, 0xc2, 0x23, 0x34, 0xc1,
	0xe5, 0x8b, 0x99, 0x2b, 0x33, 0x12, 0x32, 0x8a, 0xeb, 0x97, 0xc2, 0xb7, 0x16, 0x68, 0xed, 0x21,
	0x1e, 0x32, 0x4c, 0xec, 0x35, 0xd0, 0xcc, 0xf2, 0x80, 0x32, 0xc7, 0x6a, 0x5b, 0x5b, 0x8b, 0x3d,
	0x6d, 0xd8, 0x0e, 0x68, 0xf5, 0x51, 0x28, 0x18, 0x1f, 0x39, 0x73, 0xca, 0x5f, 0x98, 0xf6, 0x06,
	0x58, 0xc8, 0xe2, 0x28, 0xa5, 0xcc, 0x69, 0xa8, 0x80, 0xb1, 0xec, 0x3b, 0xa0, 0x25, 0x1b, 0x3a,
	0x14, 0x23, 0x67, 0xbe, 0x6d, 0x6d, 0x35, 0x7b, 0x0b, 0x29, 0xc7, 0x47, 0x62, 0x24, 0x03, 0x79,
	0x46, 0x54, 0xa0, 0xa9, 0x03, 0x79, 0x46, 0x8e, 0xc4, 0x08, 0x1e, 0x80, 0xd5, 0x43, 0xce, 0x70,
	0x1e, 0xca, 0xf9, 0xf6, 0x14, 0xbf, 0xcc, 0xde, 0x01, 0x2d, 0x4d, 0x35, 0x73, 0xac, 0x76, 0x63,
	0x6b, 0x69, 0xfb, 0x5e, 0xb7, 0xac, 0x8e, 0xee, 0xe4, 0x8a, 0x5e, 0x01, 0x87, 0x6f, 0x1b, 0xe0,
	0xd6, 0x64, 0xf4, 0xda, 0xbb, 0xb3, 0xc1, 0x7c, 0x8a, 0xd1, 0xc8, 0xec, 0x4d, 0xfd, 0x96, 0x39,
	0xc2, 0x18, 0x65, 0x99, 0xda, 0xd7, 0x62, 0x4f, 0x1b, 0xd2, 0x4b, 0x12, 0xd9, 0x86, 0xa6, 0xf6,
	0x2a, 0x43, 0xd5, 0x13, 0xa3, 0x94, 0x38, 0x0b, 0xa6, 0x9e, 0x34, 0xa4, 0x37, 0x55, 0xde, 0x96,
	0xf6, 0x2a, 0x43, 0x76, 0x32, 0x41, 0xe1, 0x6b, 0x8a, 0x9d, 0x1b, 0xba, 0x93, 0xda, 0x92, 0xec,
	0x02, 0x3d, 0x1c, 0x67, 0x51, 0xb3, 0x33, 0xa6, 0x5c, 0x91, 0x22, 0x2e, 0x28, 0x73, 0x80, 0x5e,
	0xa1, 0x2d, 0xdb, 0x05, 0x37, 0x54, 0x0f, 0xe2, 0x28, 0x75, 0x96, 0x54, 0x64, 0x6c, 0xcb, 0x35,
	0xf2, 0x77, 0x4a, 0x9d, 0x65, 0xbd, 0x46, 0x5b, 0xf6, 0x7d, 0xb0, 0xc4, 0xf3, 0x20, 0x20, 0xdc,
	0x57, 0xcb, 0x56, 0x54, 0x10, 0x68, 0xd7, 0xb1, 0x5c, 0xb8, 0x09, 0x16, 0x0d, 0x20, 0xa5, 0xce,
	0xff, 0x74, 0x56, 0xed, 0x38, 0xa4, 0x66, 0xa8, 0xdc, 0xa7, 0xcc, 0xb9, 0xa9, 0xd3, 0x4a, 0xf3,
	0x6b, 0x06, 0x9f, 0x80, 0x95, 0xdd, 0x7e, 0x9f, 0x84, 0x82, 0xe0, 0x1e, 0x49, 0xe3, 0x91, 0xdd,
	0x01, 0x2b, 0x9c, 0xbd, 0xc9, 0x7c, 0x64, 0xbc, 0x6a, 0x12, 0x8d, 0xde, 0xb2, 0x74, 0x16, 0x48,
	0x78, 0x02, 0x5a, 0x87, 0x1c, 0xf7, 0xf2, 0x20, 0xb8, 0xf6, 0xc4, 0x1c, 0xd0, 0x1a, 0x86, 0xfd,
	0x88, 0xa2, 0xd8, 0x0c, 0xad, 0x30, 0x4b, 0x4a, 0x9d, 0x2f, 0x2b, 0x15, 0xfe, 0x65, 0x01, 0xf7,
	0x40, 0xf0, 0xf8, 0x05, 0x3d, 0x25, 0x54, 0xe6, 0x30, 0x4a, 0x22, 0xc3, 0x9c, 0x64, 0xe2, 0xda,
	0x04, 0xc6, 0x42, 0x68, 0x94, 0x85, 0x70, 0x3e, 0xdc, 0xf9, 0x8b, 0x86, 0xdb, 0xac, 0x0e, 0xb7,
	0x90, 0xde, 0x42, 0x55, 0x7a, 0x79, 0xc6, 0x29, 0x2b, 0x84, 0xa3, 0x0c, 0xf8, 0x0a, 0xac, 0xed,
	0x13, 0x71, 0xc8, 0xf1, 0xb1, 0x38, 0x79, 0x19, 0x65, 0xa2, 0x9e, 0x79, 0x91, 0x77, 0xae, 0x94,
	0xb7, 0xb4, 0x9b, 0x46, 0x65, 0x37, 0x70, 0x17, 0xd8, 0x13, 0xb9, 0xe5, 0x10, 0x3f, 0x01, 0xcd,
	0x38, 0xca, 0x44, 0xf1, 0x4c, 0xae, 0x57, 0x9f, 0xc9, 0x02, 0xaa, 0x31, 0xf0, 0x77, 0x0b, 0xb4,
	0x8c, 0xab, 0xd4, 0x06, 0xeb, 0xa2, 0x36, 0xcc, 0x55, 0xdb, 0xe0, 0x80, 0x16, 0x39, 0x63, 0x18,
	0x09, 0x52, 0x50, 0x33, 0x66, 0x49, 0xfd, 0xf3, 0x15, 0xf5, 0x6f, 0x00, 0x29, 0xbe, 0xe2, 0x7c,
	0x99, 0xeb, 0x19, 0x4b, 0x3e, 0x15, 0x79, 0x46, 0x70, 0x96, 0x92, 0xd0, 0x34, 0x75, 0x6c, 0x6f,
	0xff, 0x7b, 0x13, 0x34, 0x0e, 0x7b, 0x5f, 0xda, 0x39, 0xb8, 0xbd, 0x8b, 0xf1, 0xd4, 0xb1, 0x71,
	0xbf, 0xfe, 0xd0, 0xc9, 0xdc, 0xcd, 0x2a, 0xa0, 0x22, 0x79, 0xd8, 0xfe, 0xe9, 0xef, 0x7f, 0x7e,
	0x9b, 0x73, 0xe1, 0xba, 0x3a, 0x99, 0xd3, 0x89, 0xc5, 0x4f, 0xad, 0xc7, 0xf6, 0x77, 0x00, 0xc8,
	0xf6, 0xbc, 0x94, 0x6f, 0xa8, 0xcc, 0x76, 0xab, 0xc9, 0x94, 0xd7, 0xcc, 0xd4, 0x75, 0x66, 0xc6,
	0x64, 0x15, 0x57, 0x55, 0x59, 0x83, 0x37, 0xcf, 0x5f, 0x76, 0x9e, 0x1c, 0x80, 0xcc, 0xff, 0x3d,
	0x58, 0xfe, 0x26, 0x95, 0x4d, 0xbb, 0x42, 0x85, 0x8d, 0xae, 0x7e, 0xa5, 0x76, 0x8b, 0x57, 0x6a,
	0xf7, 0xb9, 0x7c, 0xa5, 0xc2, 0xbb, 0x2a, 0xff, 0x86, 0xbb, 0x5a, 0xca, 0x9f, 0xab, 0xa4, 0xb2,
	0xc2, 0xb7, 0x60, 0xe9, 0x19, 0x27, 0x45, 0x85, 0xda, 0x02, 0xb7, 0x67, 0xc4, 0x8a, 0xec, 0xb0,
	0x9c, 0x3d, 0x54, 0x09, 0x65, 0x76, 0x1f, 0x2c, 0x6a, 0x15, 0x1e, 0x20, 0x6a, 0x6f, 0x4e, 0x0e,
	0x43, 0x7a, 0x8b, 0xe4, 0xff, 0x9f, 0x1d, 0x9c, 0x6e, 0x50, 0xaa, 0x22, 0xde, 0x80, 0xa8, 0x06,
	0xfd, 0x00, 0x56, 0xf7, 0x89, 0x90, 0xa7, 0xc0, 0x33, 0xc1, 0x63, 0x33, 0xf5, 0x4e, 0x35, 0x57,
	0x35, 0x5a, 0x14, 0xfc, 0xb0, 0x1e, 0x24, 0x0b, 0x43, 0x55, 0xf8, 0x2e, 0xbc, 0x33, 0xbe, 0x25,
	0x9c, 0x23, 0x0a, 0x02, 0x39, 0x58, 0xdd, 0xc5, 0xf8, 0x5d, 0x08, 0xd4, 0x4a, 0xef, 0x9e, 0x2a,
	0xed, 0xc0, 0xdb, 0x33, 0x4a, 0xcb, 0xb2, 0x67, 0x60, 0x4d, 0x0b, 0xe3, 0x7d, 0x55, 0x76, 0x2f,
	0xaa, 0xfc, 0xab, 0x05, 0xd6, 0x4d, 0xcb, 0x9f, 0x9b, 0x2b, 0x93, 0xa9, 0xfd, 0x70, 0xba, 0x76,
	0x15, 0x51, 0xd4, 0x7f, 0x70, 0x39, 0x50, 0x32, 0xf9, 0x58, 0x31, 0x69, 0xc3, 0xcd, 0x31, 0x93,
	0x2a, 0xaa, 0x18, 0xc1, 0x8f, 0x16, 0x58, 0x37, 0x33, 0x78, 0x57, 0x46, 0xb5, 0x1d, 0x99, 0x96,
	0x41, 0x35, 0x89, 0xe4, 0xf0, 0xb3, 0x05, 0x9c, 0xf3, 0x81, 0xbc, 0x4f, 0x1a, 0x6e, 0x1d, 0x8d,
	0x5f, 0x2c, 0x70, 0x6b, 0x9f, 0x88, 0x3d, 0x79, 0x43, 0x3d, 0x32, 0x17, 0x54, 0x7b, 0xa2, 0xdd,
	0x93, 0xf1, 0xa2, 0x78, 0xe7, 0x32, 0x98, 0x24, 0xf1, 0x48, 0x91, 0xe8, 0xc0, 0x7b, 0xe5, 0x23,
	0xd1, 0x0b, 0xca, 0xc0, 0x62, 0x2c, 0x7f, 0x58, 0xe0, 0xbe, 0x3c, 0x93, 0x43, 0xfe, 0x95, 0xbc,
	0x05, 0x1f, 0xb0, 0x53, 0xf2, 0x82, 0x1e, 0x98, 0x7b, 0xac, 0xe9, 0xcc, 0x93, 0x89, 0x0d, 0xd7,
	0xc3, 0xaf, 0xd4, 0x26, 0x4f, 0x31, 0x7c, 0x04, 0x3f, 0x52, 0x0c, 0x2f, 0xc9, 0x28, 0x79, 0xfe,
	0x69, 0x81, 0xb6, 0x86, 0x1d, 0xab, 0x3b, 0xf7, 0x4c, 0xa2, 0x9f, 0xcf, 0x22, 0x7a, 0x31, 0xfe,
	0x4a, 0x4c, 0x3f, 0x55, 0x4c, 0x1f, 0xc3, 0x07, 0x25, 0xa6, 0x17, 0xa7, 0x34, 0x2a, 0xdb, 0x30,
	0x4a, 0x9f, 0xb8, 0xf4, 0xd8, 0x5b, 0xd3, 0x1a, 0x9b, 0x7d, 0x2f, 0xaa, 0xe7, 0xd4, 0x51, 0x9c,
	0x3e, 0x80, 0xce, 0x58, 0x64, 0x13, 0x59, 0x24, 0x8d, 0x21, 0x58, 0xa9, 0xdc, 0x2d, 0x6c, 0x38,
	0x25, 0x9d, 0xa9, 0x4b, 0x8d, 0xdb, 0xae, 0xc5, 0xcc, 0x3c, 0xe7, 0x8f, 0xc5, 0x89, 0x11, 0xd3,
	0xde, 0xd3, 0x57, 0x3b, 0x83, 0x48, 0xc4, 0x28, 0xe8, 0x9e, 0x10, 0x8a, 0x51, 0x37, 0x64, 0x49,
	0x57, 0xbc, 0xf1, 0x94, 0xe1, 0x85, 0x2c, 0x49, 0x18, 0xcd, 0xbc, 0xd3, 0x6d, 0xfd, 0x77, 0xd2,
	0x1b, 0xb0, 0x18, 0xd1, 0x81, 0xf9, 0x4b, 0x15, 0x2c, 0x28, 0xe7, 0x67, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x4b, 0x0a, 0x11, 0xce, 0xae, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PRDClient is the client API for PRD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PRDClient interface {
	// AddProductionRecord 新增生產紀錄.
	AddProductionRecord(ctx context.Context, in *ProductionRecords, opts ...grpc.CallOption) (*AffectedReply, error)
	// ListLabels lists pre-printed labels
	ListLabels(ctx context.Context, in *LabelRequest, opts ...grpc.CallOption) (*LabelReply, error)
	// UpdateLabels update pre-printerd labels (remaining quantity only)
	UpdateLabels(ctx context.Context, in *LabelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateLabel : create new label
	CreateLabel(ctx context.Context, in *LabelRequest, opts ...grpc.CallOption) (*Label, error)
	GetPrdMan(ctx context.Context, in *PrdManRequest, opts ...grpc.CallOption) (*PrdManReply, error)
	GetMtrlCtrlRecord(ctx context.Context, in *MtrlCtrlRecordRequest, opts ...grpc.CallOption) (*MtrlCtrlRecordReply, error)
	AddMtrlCtrlRecord(ctx context.Context, in *MtrlCtrlRecordRequest, opts ...grpc.CallOption) (*AffectedReply, error)
	UpdateMtrlCtrlRecord(ctx context.Context, in *MtrlCtrlRecordRequest, opts ...grpc.CallOption) (*AffectedReply, error)
	GetMtrlExtendedRecord(ctx context.Context, in *MtrlExtendedRecordRequest, opts ...grpc.CallOption) (*MtrlExtendedRecordReply, error)
	AddMtrlExtendedRecord(ctx context.Context, in *MtrlExtendedRecordRequest, opts ...grpc.CallOption) (*AffectedReply, error)
	UpdateMtrlExtendedRecord(ctx context.Context, in *MtrlExtendedRecordRequest, opts ...grpc.CallOption) (*AffectedReply, error)
	//取得中間製品的批量及單位
	GetBatchQuantity(ctx context.Context, in *GetBatchQuantityRequest, opts ...grpc.CallOption) (*GetBatchQuantityReply, error)
	AddPcrFirstMoveInMaterialRecord(ctx context.Context, in *AddPcrFirstMoveInMaterialRecordRequest, opts ...grpc.CallOption) (*AffectedReply, error)
	AddPcrSecondMoveInMaterialRecord(ctx context.Context, in *AddPcrSecondMoveInMaterialRecordRequest, opts ...grpc.CallOption) (*AffectedReply, error)
	// 新增盤點紀錄
	AddMtrlInventoryRecord(ctx context.Context, in *MtrlInventoryRecordRequest, opts ...grpc.CallOption) (*AffectedReply, error)
	// 取得盤點紀錄
	GetPrdStkList(ctx context.Context, in *GetPrdStkListRequest, opts ...grpc.CallOption) (*GetPrdStkListReply, error)
}

type pRDClient struct {
	cc *grpc.ClientConn
}

func NewPRDClient(cc *grpc.ClientConn) PRDClient {
	return &pRDClient{cc}
}

func (c *pRDClient) AddProductionRecord(ctx context.Context, in *ProductionRecords, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/AddProductionRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) ListLabels(ctx context.Context, in *LabelRequest, opts ...grpc.CallOption) (*LabelReply, error) {
	out := new(LabelReply)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/ListLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) UpdateLabels(ctx context.Context, in *LabelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/UpdateLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) CreateLabel(ctx context.Context, in *LabelRequest, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/CreateLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) GetPrdMan(ctx context.Context, in *PrdManRequest, opts ...grpc.CallOption) (*PrdManReply, error) {
	out := new(PrdManReply)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/GetPrdMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) GetMtrlCtrlRecord(ctx context.Context, in *MtrlCtrlRecordRequest, opts ...grpc.CallOption) (*MtrlCtrlRecordReply, error) {
	out := new(MtrlCtrlRecordReply)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/GetMtrlCtrlRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) AddMtrlCtrlRecord(ctx context.Context, in *MtrlCtrlRecordRequest, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/AddMtrlCtrlRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) UpdateMtrlCtrlRecord(ctx context.Context, in *MtrlCtrlRecordRequest, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/UpdateMtrlCtrlRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) GetMtrlExtendedRecord(ctx context.Context, in *MtrlExtendedRecordRequest, opts ...grpc.CallOption) (*MtrlExtendedRecordReply, error) {
	out := new(MtrlExtendedRecordReply)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/GetMtrlExtendedRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) AddMtrlExtendedRecord(ctx context.Context, in *MtrlExtendedRecordRequest, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/AddMtrlExtendedRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) UpdateMtrlExtendedRecord(ctx context.Context, in *MtrlExtendedRecordRequest, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/UpdateMtrlExtendedRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) GetBatchQuantity(ctx context.Context, in *GetBatchQuantityRequest, opts ...grpc.CallOption) (*GetBatchQuantityReply, error) {
	out := new(GetBatchQuantityReply)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/GetBatchQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) AddPcrFirstMoveInMaterialRecord(ctx context.Context, in *AddPcrFirstMoveInMaterialRecordRequest, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/AddPcrFirstMoveInMaterialRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) AddPcrSecondMoveInMaterialRecord(ctx context.Context, in *AddPcrSecondMoveInMaterialRecordRequest, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/AddPcrSecondMoveInMaterialRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) AddMtrlInventoryRecord(ctx context.Context, in *MtrlInventoryRecordRequest, opts ...grpc.CallOption) (*AffectedReply, error) {
	out := new(AffectedReply)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/AddMtrlInventoryRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pRDClient) GetPrdStkList(ctx context.Context, in *GetPrdStkListRequest, opts ...grpc.CallOption) (*GetPrdStkListReply, error) {
	out := new(GetPrdStkListReply)
	err := c.cc.Invoke(ctx, "/proto.dm.prd.PRD/GetPrdStkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PRDServer is the server API for PRD service.
type PRDServer interface {
	// AddProductionRecord 新增生產紀錄.
	AddProductionRecord(context.Context, *ProductionRecords) (*AffectedReply, error)
	// ListLabels lists pre-printed labels
	ListLabels(context.Context, *LabelRequest) (*LabelReply, error)
	// UpdateLabels update pre-printerd labels (remaining quantity only)
	UpdateLabels(context.Context, *LabelRequest) (*empty.Empty, error)
	// CreateLabel : create new label
	CreateLabel(context.Context, *LabelRequest) (*Label, error)
	GetPrdMan(context.Context, *PrdManRequest) (*PrdManReply, error)
	GetMtrlCtrlRecord(context.Context, *MtrlCtrlRecordRequest) (*MtrlCtrlRecordReply, error)
	AddMtrlCtrlRecord(context.Context, *MtrlCtrlRecordRequest) (*AffectedReply, error)
	UpdateMtrlCtrlRecord(context.Context, *MtrlCtrlRecordRequest) (*AffectedReply, error)
	GetMtrlExtendedRecord(context.Context, *MtrlExtendedRecordRequest) (*MtrlExtendedRecordReply, error)
	AddMtrlExtendedRecord(context.Context, *MtrlExtendedRecordRequest) (*AffectedReply, error)
	UpdateMtrlExtendedRecord(context.Context, *MtrlExtendedRecordRequest) (*AffectedReply, error)
	//取得中間製品的批量及單位
	GetBatchQuantity(context.Context, *GetBatchQuantityRequest) (*GetBatchQuantityReply, error)
	AddPcrFirstMoveInMaterialRecord(context.Context, *AddPcrFirstMoveInMaterialRecordRequest) (*AffectedReply, error)
	AddPcrSecondMoveInMaterialRecord(context.Context, *AddPcrSecondMoveInMaterialRecordRequest) (*AffectedReply, error)
	// 新增盤點紀錄
	AddMtrlInventoryRecord(context.Context, *MtrlInventoryRecordRequest) (*AffectedReply, error)
	// 取得盤點紀錄
	GetPrdStkList(context.Context, *GetPrdStkListRequest) (*GetPrdStkListReply, error)
}

func RegisterPRDServer(s *grpc.Server, srv PRDServer) {
	s.RegisterService(&_PRD_serviceDesc, srv)
}

func _PRD_AddProductionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductionRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).AddProductionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/AddProductionRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).AddProductionRecord(ctx, req.(*ProductionRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_ListLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).ListLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/ListLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).ListLabels(ctx, req.(*LabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_UpdateLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).UpdateLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/UpdateLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).UpdateLabels(ctx, req.(*LabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_CreateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).CreateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/CreateLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).CreateLabel(ctx, req.(*LabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_GetPrdMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrdManRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).GetPrdMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/GetPrdMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).GetPrdMan(ctx, req.(*PrdManRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_GetMtrlCtrlRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtrlCtrlRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).GetMtrlCtrlRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/GetMtrlCtrlRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).GetMtrlCtrlRecord(ctx, req.(*MtrlCtrlRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_AddMtrlCtrlRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtrlCtrlRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).AddMtrlCtrlRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/AddMtrlCtrlRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).AddMtrlCtrlRecord(ctx, req.(*MtrlCtrlRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_UpdateMtrlCtrlRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtrlCtrlRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).UpdateMtrlCtrlRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/UpdateMtrlCtrlRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).UpdateMtrlCtrlRecord(ctx, req.(*MtrlCtrlRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_GetMtrlExtendedRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtrlExtendedRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).GetMtrlExtendedRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/GetMtrlExtendedRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).GetMtrlExtendedRecord(ctx, req.(*MtrlExtendedRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_AddMtrlExtendedRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtrlExtendedRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).AddMtrlExtendedRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/AddMtrlExtendedRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).AddMtrlExtendedRecord(ctx, req.(*MtrlExtendedRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_UpdateMtrlExtendedRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtrlExtendedRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).UpdateMtrlExtendedRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/UpdateMtrlExtendedRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).UpdateMtrlExtendedRecord(ctx, req.(*MtrlExtendedRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_GetBatchQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).GetBatchQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/GetBatchQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).GetBatchQuantity(ctx, req.(*GetBatchQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_AddPcrFirstMoveInMaterialRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPcrFirstMoveInMaterialRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).AddPcrFirstMoveInMaterialRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/AddPcrFirstMoveInMaterialRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).AddPcrFirstMoveInMaterialRecord(ctx, req.(*AddPcrFirstMoveInMaterialRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_AddPcrSecondMoveInMaterialRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPcrSecondMoveInMaterialRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).AddPcrSecondMoveInMaterialRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/AddPcrSecondMoveInMaterialRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).AddPcrSecondMoveInMaterialRecord(ctx, req.(*AddPcrSecondMoveInMaterialRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_AddMtrlInventoryRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtrlInventoryRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).AddMtrlInventoryRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/AddMtrlInventoryRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).AddMtrlInventoryRecord(ctx, req.(*MtrlInventoryRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PRD_GetPrdStkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrdStkListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PRDServer).GetPrdStkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.dm.prd.PRD/GetPrdStkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PRDServer).GetPrdStkList(ctx, req.(*GetPrdStkListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PRD_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.dm.prd.PRD",
	HandlerType: (*PRDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductionRecord",
			Handler:    _PRD_AddProductionRecord_Handler,
		},
		{
			MethodName: "ListLabels",
			Handler:    _PRD_ListLabels_Handler,
		},
		{
			MethodName: "UpdateLabels",
			Handler:    _PRD_UpdateLabels_Handler,
		},
		{
			MethodName: "CreateLabel",
			Handler:    _PRD_CreateLabel_Handler,
		},
		{
			MethodName: "GetPrdMan",
			Handler:    _PRD_GetPrdMan_Handler,
		},
		{
			MethodName: "GetMtrlCtrlRecord",
			Handler:    _PRD_GetMtrlCtrlRecord_Handler,
		},
		{
			MethodName: "AddMtrlCtrlRecord",
			Handler:    _PRD_AddMtrlCtrlRecord_Handler,
		},
		{
			MethodName: "UpdateMtrlCtrlRecord",
			Handler:    _PRD_UpdateMtrlCtrlRecord_Handler,
		},
		{
			MethodName: "GetMtrlExtendedRecord",
			Handler:    _PRD_GetMtrlExtendedRecord_Handler,
		},
		{
			MethodName: "AddMtrlExtendedRecord",
			Handler:    _PRD_AddMtrlExtendedRecord_Handler,
		},
		{
			MethodName: "UpdateMtrlExtendedRecord",
			Handler:    _PRD_UpdateMtrlExtendedRecord_Handler,
		},
		{
			MethodName: "GetBatchQuantity",
			Handler:    _PRD_GetBatchQuantity_Handler,
		},
		{
			MethodName: "AddPcrFirstMoveInMaterialRecord",
			Handler:    _PRD_AddPcrFirstMoveInMaterialRecord_Handler,
		},
		{
			MethodName: "AddPcrSecondMoveInMaterialRecord",
			Handler:    _PRD_AddPcrSecondMoveInMaterialRecord_Handler,
		},
		{
			MethodName: "AddMtrlInventoryRecord",
			Handler:    _PRD_AddMtrlInventoryRecord_Handler,
		},
		{
			MethodName: "GetPrdStkList",
			Handler:    _PRD_GetPrdStkList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
